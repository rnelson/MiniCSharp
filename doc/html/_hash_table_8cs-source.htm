<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>MiniCSharp: /Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/HashTable.cs Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<h1>/Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/HashTable.cs</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id$</span>
<a name="l00002"></a>00002 <span class="comment"> * Ross Nelson</span>
<a name="l00003"></a>00003 <span class="comment"> * Compiler Construction (CSC 446)</span>
<a name="l00004"></a>00004 <span class="comment"> * MiniCSharp/Hash Table</span>
<a name="l00005"></a>00005 <span class="comment"> */</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="preprocessor">#region Using declarations</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span><span class="keyword">using</span> System;
<a name="l00009"></a>00009 <span class="keyword">using</span> System.Text;
<a name="l00010"></a>00010 <span class="keyword">using</span> System.Text.RegularExpressions;
<a name="l00011"></a>00011 <span class="keyword">using</span> System.IO;
<a name="l00012"></a>00012 <span class="preprocessor">#endregion</span>
<a name="l00013"></a>00013 <span class="preprocessor"></span>
<a name="l00014"></a>00014 <span class="keyword">namespace </span>MiniCSharp
<a name="l00015"></a>00015 {
<a name="l00021"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm">00021</a>         <span class="keyword">public</span> <span class="keyword">class </span><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm">HashTable</a>
<a name="l00022"></a>00022         {
<a name="l00026"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#12cca4e515687d5cdfc49e1c8482055e">00026</a>                 <span class="keyword">public</span> <span class="keyword">static</span> uint <a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#12cca4e515687d5cdfc49e1c8482055e">PRIMENUM</a> = 50333;            <span class="comment">// yay for prime-numbers.org</span>
<a name="l00027"></a>00027                 
<a name="l00031"></a>00031                 <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>[] vertArray;
<a name="l00032"></a>00032                 
<a name="l00036"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#2d4879788b60d4fb1813d1003b59fa2a">00036</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#2d4879788b60d4fb1813d1003b59fa2a">HashTable</a>()
<a name="l00037"></a>00037                 {
<a name="l00038"></a>00038                         <span class="comment">/* allocate space for the hash values */</span>
<a name="l00039"></a>00039                         vertArray = <span class="keyword">new</span> <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>[<a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#12cca4e515687d5cdfc49e1c8482055e">PRIMENUM</a>];
<a name="l00040"></a>00040                         <a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#e417ae049c0e5a64eee39c26f73356fa">InitTable</a>();
<a name="l00041"></a>00041                 }
<a name="l00042"></a>00042                 
<a name="l00046"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#e417ae049c0e5a64eee39c26f73356fa">00046</a>                 <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#e417ae049c0e5a64eee39c26f73356fa">InitTable</a>()
<a name="l00047"></a>00047                 {
<a name="l00048"></a>00048                         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#12cca4e515687d5cdfc49e1c8482055e">PRIMENUM</a>; i++)
<a name="l00049"></a>00049                                 vertArray[i] = null;
<a name="l00050"></a>00050                 }
<a name="l00051"></a>00051                 
<a name="l00056"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#200c41e1b71828bbfe6a82f6071029db">00056</a>                 <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#200c41e1b71828bbfe6a82f6071029db">DeleteDepth</a>(<span class="keywordtype">int</span> depth)
<a name="l00057"></a>00057                 {
<a name="l00058"></a>00058                         <span class="keywordflow">if</span> (<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.VISUAL)
<a name="l00059"></a>00059                                 <a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#b14df50ba5cd9833aa64dd8631ff114c">WriteTable</a>(<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.depth);
<a name="l00060"></a>00060                         
<a name="l00061"></a>00061                         <span class="comment">/* we don't want to kill depths 1, 2 */</span>
<a name="l00062"></a>00062                         <span class="keywordflow">if</span> (depth &lt; 2)
<a name="l00063"></a>00063                                 <span class="keywordflow">return</span>;
<a name="l00064"></a>00064 
<a name="l00065"></a>00065                         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> loc = 0; loc &lt; <a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#12cca4e515687d5cdfc49e1c8482055e">PRIMENUM</a>; loc++)
<a name="l00066"></a>00066                         {
<a name="l00067"></a>00067                                 <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> e = vertArray[loc];
<a name="l00068"></a>00068                                 
<a name="l00069"></a>00069                                 <span class="comment">/* if there's something there, check the depth */</span>
<a name="l00070"></a>00070                                 <span class="keywordflow">if</span> (e != null)
<a name="l00071"></a>00071                                 {
<a name="l00072"></a>00072                                         <span class="comment">/* find the start of the correct depth */</span>
<a name="l00073"></a>00073                                         <span class="keywordflow">while</span> ((e.GetDepth() &gt; depth) &amp;&amp; (e.next != null))
<a name="l00074"></a>00074                                                 e = e.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a>;
<a name="l00075"></a>00075                                         
<a name="l00076"></a>00076                                         if (e == null)
<a name="l00077"></a>00077                                                 <span class="keywordflow">break</span>;
<a name="l00078"></a>00078                                         
<a name="l00079"></a>00079                                         <span class="comment">/* if the depth is the same, remove the node */</span>
<a name="l00080"></a>00080                                         <span class="keywordflow">while</span> (e.GetDepth() == depth)
<a name="l00081"></a>00081                                         {
<a name="l00082"></a>00082                                                 vertArray[loc] = e.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a>;        <span class="comment">/* remove the head node */</span>
<a name="l00083"></a>00083                                                 e = vertArray[loc];                     <span class="comment">/* reset e to the front of that linked list */</span>
<a name="l00084"></a>00084                                                 
<a name="l00085"></a>00085                                                 if ((e == null) || (e.next == null))
<a name="l00086"></a>00086                                                         <span class="keywordflow">break</span>;
<a name="l00087"></a>00087                                         }
<a name="l00088"></a>00088                                 }
<a name="l00089"></a>00089                         }
<a name="l00090"></a>00090                 }
<a name="l00091"></a>00091                 
<a name="l00099"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#8db5ac173a1eb6b2ccb22234e4f09bc7">00099</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> Insert(string lexeme, <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol token, <span class="keywordtype">int</span> depth)
<a name="l00100"></a>00100                 {
<a name="l00101"></a>00101                         <span class="comment">/* reserve memory for the new node */</span>
<a name="l00102"></a>00102                         <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> el = <span class="keyword">new</span> <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>();
<a name="l00103"></a>00103                         
<a name="l00104"></a>00104                         <span class="comment">/* figure out where the node goes */</span>
<a name="l00105"></a>00105                         <span class="keywordtype">int</span> arrayLoc = hash(lexeme);
<a name="l00106"></a>00106                         
<a name="l00107"></a>00107                         <span class="comment">/* set values for the node */</span>
<a name="l00108"></a>00108                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#fdcfafc7eb8e71e1b4fbeb26c25d5925">InitValues</a>();
<a name="l00109"></a>00109                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#1d6dc874e9303341fc52d5db0b87c29d">SetName</a>(lexeme);
<a name="l00110"></a>00110                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#f86e2da793fa2166ed7bbf53387691c0">SetToken</a>(token);
<a name="l00111"></a>00111                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#83cb6cd93e05be4538b1e975a5079896">SetDepth</a>((<span class="keywordtype">int</span>)depth);        <span class="comment">// for some reason, mono crashed without casting this for anything set to a method</span>
<a name="l00112"></a>00112                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a> = null;
<a name="l00113"></a>00113                         
<a name="l00114"></a>00114                         <span class="comment">/* keep track of if we have a constant or not */</span>
<a name="l00115"></a>00115                         <span class="keywordtype">bool</span> haveConst = <span class="keyword">false</span>;
<a name="l00116"></a>00116                         <span class="keywordflow">if</span> (el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#fc4a62d9e1b119394ba28f8c5d0df0e5">GetEType</a>() == <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.EntryType.constType)
<a name="l00117"></a>00117                                 haveConst = <span class="keyword">true</span>;
<a name="l00118"></a>00118                         
<a name="l00119"></a>00119                         <span class="comment">/* set the type */</span>
<a name="l00120"></a>00120                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)token)
<a name="l00121"></a>00121                         {
<a name="l00122"></a>00122                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._int:
<a name="l00123"></a>00123                                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#77ae35958d702e908c1f1facc8a1fed8">SetInteger</a>();
<a name="l00124"></a>00124                                         <span class="keywordflow">break</span>;
<a name="l00125"></a>00125                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._float:
<a name="l00126"></a>00126                                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#1b522926f25bf355f7fdcb208248a682">SetFloat</a>();
<a name="l00127"></a>00127                                         <span class="keywordflow">break</span>;
<a name="l00128"></a>00128                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._char:
<a name="l00129"></a>00129                                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#9f8e0ada3c536e25f516dcffa10b8803">SetCharacter</a>();
<a name="l00130"></a>00130                                         <span class="keywordflow">break</span>;
<a name="l00131"></a>00131                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._const:
<a name="l00132"></a>00132                                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#b9bc4780b00eda5591a246cb0d6ebd93">SetConstant</a>();
<a name="l00133"></a>00133                                         <span class="keywordflow">break</span>;
<a name="l00134"></a>00134                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._class:
<a name="l00135"></a>00135                                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#6fa7bfce6bdbf7eae98623595d178783">SetClass</a>();
<a name="l00136"></a>00136                                         <span class="keywordflow">break</span>;
<a name="l00137"></a>00137                                 <span class="keywordflow">default</span>:
<a name="l00138"></a>00138                                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#00c9857cfaef46596ff0b5fcc4113d18">SetMethod</a>(<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._void);
<a name="l00139"></a>00139                                         <span class="keywordflow">break</span>;
<a name="l00140"></a>00140                         }
<a name="l00141"></a>00141                         
<a name="l00142"></a>00142                         <span class="comment">/* add the node */</span>
<a name="l00143"></a>00143                         <span class="keywordflow">try</span>
<a name="l00144"></a>00144                         {
<a name="l00145"></a>00145                                 <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> oldHead = vertArray[arrayLoc];
<a name="l00146"></a>00146                                 el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a> = oldHead;
<a name="l00147"></a>00147                                 vertArray[arrayLoc] = el;
<a name="l00148"></a>00148                                 
<a name="l00149"></a>00149                                 <span class="keywordflow">if</span> (haveConst)
<a name="l00150"></a>00150                                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#b9bc4780b00eda5591a246cb0d6ebd93">SetConstant</a>();
<a name="l00151"></a>00151                         }
<a name="l00152"></a>00152                         <span class="keywordflow">catch</span>
<a name="l00153"></a>00153                         {
<a name="l00154"></a>00154                                 vertArray[arrayLoc] = el;
<a name="l00155"></a>00155                                 
<a name="l00156"></a>00156                                 <span class="keywordflow">if</span> (haveConst)
<a name="l00157"></a>00157                                         el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#b9bc4780b00eda5591a246cb0d6ebd93">SetConstant</a>();
<a name="l00158"></a>00158                         }
<a name="l00159"></a>00159                         
<a name="l00160"></a>00160                         <span class="keywordflow">return</span> el;
<a name="l00161"></a>00161                 }
<a name="l00162"></a>00162                 
<a name="l00168"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#ef9d4d83bce1c7d39e83f49e1f331993">00168</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> Lookup(string lexeme)
<a name="l00169"></a>00169                 {
<a name="l00170"></a>00170                         <span class="comment">/* create a pointer to an Element */</span>
<a name="l00171"></a>00171                         <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> el;
<a name="l00172"></a>00172                         
<a name="l00173"></a>00173                         <span class="comment">/* figure out where the node goes */</span>
<a name="l00174"></a>00174                         <span class="keywordtype">int</span> arrayLoc = hash(lexeme);
<a name="l00175"></a>00175                         
<a name="l00176"></a>00176                         <span class="comment">/* find the node */</span>
<a name="l00177"></a>00177                         <span class="keywordflow">if</span> (vertArray[arrayLoc] == null)
<a name="l00178"></a>00178                         {
<a name="l00179"></a>00179                                 el = null;
<a name="l00180"></a>00180                         }
<a name="l00181"></a>00181                         <span class="keywordflow">else</span>
<a name="l00182"></a>00182                         {
<a name="l00183"></a>00183                                 el = vertArray[arrayLoc];
<a name="l00184"></a>00184                                 
<a name="l00185"></a>00185                                 <span class="comment">/* if needed (collisions), traverse the list to find the element */</span>
<a name="l00186"></a>00186                                 <span class="keywordflow">while</span> (el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#f41a42452a6a64694572241da000e74e">GetName</a>() != lexeme)
<a name="l00187"></a>00187                                 {
<a name="l00188"></a>00188                                         el = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a>;
<a name="l00189"></a>00189                                         
<a name="l00190"></a>00190                                         <span class="comment">/* we don't want to try to access inaccessible memory */</span>
<a name="l00191"></a>00191                                         if (el == null)
<a name="l00192"></a>00192                                                 <span class="keywordflow">return</span> null;
<a name="l00193"></a>00193                                 }
<a name="l00194"></a>00194                         }
<a name="l00195"></a>00195                         
<a name="l00196"></a>00196                         <span class="comment">/* return whatever we found */</span>
<a name="l00197"></a>00197                         <span class="keywordflow">return</span> el;
<a name="l00198"></a>00198                 }
<a name="l00199"></a>00199                 
<a name="l00204"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#b14df50ba5cd9833aa64dd8631ff114c">00204</a>                 <span class="keyword">public</span> <span class="keywordtype">void</span> WriteTable(<span class="keywordtype">int</span> depth)
<a name="l00205"></a>00205                 {
<a name="l00206"></a>00206                         string header = <span class="stringliteral">"\nSymbol Table - Depth "</span> + depth + <span class="stringliteral">"\n----------------------"</span>;
<a name="l00207"></a>00207                         System.Console.WriteLine(header);
<a name="l00208"></a>00208 
<a name="l00209"></a>00209                         <span class="comment">/* create a pointer to an Element */</span>
<a name="l00210"></a>00210                         <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> el;
<a name="l00211"></a>00211                         
<a name="l00212"></a>00212                         <span class="comment">/* print out the values */</span>
<a name="l00213"></a>00213                         foreach(<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> e in vertArray)
<a name="l00214"></a>00214                         {
<a name="l00215"></a>00215                                 el = e;
<a name="l00216"></a>00216                                 
<a name="l00217"></a>00217                                 <span class="keywordflow">if</span> (el != null)
<a name="l00218"></a>00218                                 {
<a name="l00219"></a>00219                                         <span class="comment">/* advance to the correct depth if needed */</span>
<a name="l00220"></a>00220                                         <span class="keywordflow">while</span> (el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#21411b80a636d46349c654ba2f25064d">GetDepth</a>() &gt; depth)
<a name="l00221"></a>00221                                         {
<a name="l00222"></a>00222                                                 <span class="keywordflow">if</span> (el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a> != null)
<a name="l00223"></a>00223                                                         el = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a>;
<a name="l00224"></a>00224                                                 <span class="keywordflow">else</span>
<a name="l00225"></a>00225                                                         <span class="keywordflow">break</span>;
<a name="l00226"></a>00226                                         }
<a name="l00227"></a>00227                                         
<a name="l00228"></a>00228                                         <span class="keywordflow">while</span> ((el != null) &amp;&amp; (el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#21411b80a636d46349c654ba2f25064d">GetDepth</a>() == depth))
<a name="l00229"></a>00229                                         {
<a name="l00230"></a>00230                                                 <span class="comment">/* increment the line count */</span>
<a name="l00231"></a>00231                                                 <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.linecount += 3;
<a name="l00232"></a>00232                                                 
<a name="l00233"></a>00233                                                 <span class="comment">/* if we've printed a lot, clear the screen */</span>
<a name="l00234"></a>00234                                                 <span class="keywordflow">if</span> (<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.linecount &gt; 15)
<a name="l00235"></a>00235                                                 {
<a name="l00236"></a>00236                                                         <span class="comment">/* reset the line count */</span>
<a name="l00237"></a>00237                                                         <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.linecount = 0;
<a name="l00238"></a>00238                                                         <span class="comment">/* wait for the user to press enter */</span>
<a name="l00239"></a>00239                                                         <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Wait(<span class="stringliteral">"\nPress enter to continue..."</span>);
<a name="l00240"></a>00240                                                         
<a name="l00241"></a>00241                                                         <span class="comment">/* print out the header */</span>
<a name="l00242"></a>00242                                                         System.Console.WriteLine(header);
<a name="l00243"></a>00243                                                 }
<a name="l00244"></a>00244                                                 
<a name="l00245"></a>00245                                                 <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.<a class="code" href="class_mini_c_sharp_1_1_element.htm#0c193f7e1ce99f4f9c5e6bbc7ad64b93">EntryType</a> etype = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#fc4a62d9e1b119394ba28f8c5d0df0e5">GetEType</a>();
<a name="l00246"></a>00246                                                 <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.VarType vtype = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#7dcc40332bb29b8f4d6e45d671d829df">GetVType</a>();
<a name="l00247"></a>00247                                                 string lexeme = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#f41a42452a6a64694572241da000e74e">GetName</a>();
<a name="l00248"></a>00248                                                 string token = <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Tokens[(int)el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#db89fb6ab94b509d6cf486400bb9e5b7">GetToken</a>()];
<a name="l00249"></a>00249                                                 string offset = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#164678498ad55bd54219babe94dfc97d">GetOffset</a>().ToString();
<a name="l00250"></a>00250                                                 string size = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#b4b6053fffb4c5eb937b0a910f3243ae">GetSizeOfLocals</a>().ToString();
<a name="l00251"></a>00251                                                 string vartype = <span class="stringliteral">""</span>, value = <span class="stringliteral">""</span>, output = <span class="stringliteral">""</span>;
<a name="l00252"></a>00252                                                 
<a name="l00253"></a>00253                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)vtype)
<a name="l00254"></a>00254                                                 {
<a name="l00255"></a>00255                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.VarType.intType:
<a name="l00256"></a>00256                                                                 vartype = <span class="stringliteral">"int"</span>;
<a name="l00257"></a>00257                                                                 value = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#2a5ffd15a01d9edf93e11a2898cd5e50">GetIntegerValue</a>().ToString();
<a name="l00258"></a>00258                                                                 <span class="keywordflow">break</span>;
<a name="l00259"></a>00259                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.VarType.charType:
<a name="l00260"></a>00260                                                                 vartype = <span class="stringliteral">"char"</span>;
<a name="l00261"></a>00261                                                                 value = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#cd6f8c00d736866957f7c22d3fc802e5">GetCharacterValue</a>().ToString();
<a name="l00262"></a>00262                                                                 <span class="keywordflow">break</span>;
<a name="l00263"></a>00263                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.VarType.floatType:
<a name="l00264"></a>00264                                                                 vartype = <span class="stringliteral">"float"</span>;
<a name="l00265"></a>00265                                                                 value = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#c72c20d1788079dbc5d354874f8ba742">GetFloatValue</a>().ToString();
<a name="l00266"></a>00266                                                                 <span class="keywordflow">break</span>;
<a name="l00267"></a>00267                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.VarType.voidType:
<a name="l00268"></a>00268                                                                 vartype = <span class="stringliteral">"void"</span>;
<a name="l00269"></a>00269                                                                 value = <span class="stringliteral">""</span>;
<a name="l00270"></a>00270                                                                 <span class="keywordflow">break</span>;
<a name="l00271"></a>00271                                                         <span class="keywordflow">default</span>:
<a name="l00272"></a>00272                                                                 vartype = <span class="stringliteral">""</span>;
<a name="l00273"></a>00273                                                                 value = <span class="stringliteral">""</span>;
<a name="l00274"></a>00274                                                                 <span class="keywordflow">break</span>;
<a name="l00275"></a>00275                                                 }
<a name="l00276"></a>00276                                                 
<a name="l00277"></a>00277                                                 <span class="comment">/* to keep the relatively readable, just shove all of the */</span>
<a name="l00278"></a>00278                                                 <span class="comment">/* information into one big string and spit that out to the screen */</span>
<a name="l00279"></a>00279                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)etype)
<a name="l00280"></a>00280                                                 {
<a name="l00281"></a>00281                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.EntryType.varType:
<a name="l00282"></a>00282                                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#0bfd1277767810b7daeff95e2c02a3d4">mode</a>)
<a name="l00283"></a>00283                                                                 {
<a name="l00284"></a>00284                                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.PassingMode.passOut:
<a name="l00285"></a>00285                                                                                 output += <span class="stringliteral">"out "</span>;
<a name="l00286"></a>00286                                                                                 <span class="keywordflow">break</span>;
<a name="l00287"></a>00287                                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.PassingMode.passRef:
<a name="l00288"></a>00288                                                                                 output += <span class="stringliteral">"ref "</span>;
<a name="l00289"></a>00289                                                                                 <span class="keywordflow">break</span>;
<a name="l00290"></a>00290                                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.PassingMode.passNorm:
<a name="l00291"></a>00291                                                                         <span class="keywordflow">default</span>:
<a name="l00292"></a>00292                                                                                 <span class="keywordflow">break</span>;
<a name="l00293"></a>00293                                                                 }
<a name="l00294"></a>00294                                                                 output += vartype;
<a name="l00295"></a>00295                                                                 <span class="keywordflow">if</span> (vartype != <span class="stringliteral">""</span>) output += <span class="stringliteral">" "</span>;
<a name="l00296"></a>00296                                                                 output += lexeme; <span class="comment">// + " = ";</span>
<a name="l00297"></a>00297                                                                 <span class="comment">// output += value;</span>
<a name="l00298"></a>00298                                                                 output += <span class="stringliteral">"\t//size:"</span> + size;
<a name="l00299"></a>00299                                                                 output += <span class="stringliteral">" offset:"</span> + offset;
<a name="l00300"></a>00300                                                                 <span class="keywordflow">break</span>;
<a name="l00301"></a>00301                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.EntryType.constType:
<a name="l00302"></a>00302                                                                 output += <span class="stringliteral">"const "</span>;
<a name="l00303"></a>00303                                                                 output += vartype + <span class="stringliteral">" "</span>;
<a name="l00304"></a>00304                                                                 output += lexeme;
<a name="l00305"></a>00305                                                                 output += <span class="stringliteral">"\t//size:"</span> + size;
<a name="l00306"></a>00306                                                                 output += <span class="stringliteral">" offset:"</span> + offset;
<a name="l00307"></a>00307                                                                 
<a name="l00308"></a>00308                                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#7dcc40332bb29b8f4d6e45d671d829df">GetVType</a>())
<a name="l00309"></a>00309                                                                 {
<a name="l00310"></a>00310                                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.VarType.intType:
<a name="l00311"></a>00311                                                                                 output += <span class="stringliteral">" value:"</span> + el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#2a5ffd15a01d9edf93e11a2898cd5e50">GetIntegerValue</a>();
<a name="l00312"></a>00312                                                                                 <span class="keywordflow">break</span>;
<a name="l00313"></a>00313                                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.VarType.floatType:
<a name="l00314"></a>00314                                                                                 output += <span class="stringliteral">" value:"</span> + el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#c72c20d1788079dbc5d354874f8ba742">GetFloatValue</a>();
<a name="l00315"></a>00315                                                                                 <span class="keywordflow">break</span>;
<a name="l00316"></a>00316                                                                         <span class="keywordflow">default</span>:
<a name="l00317"></a>00317                                                                                 <span class="keywordflow">break</span>;
<a name="l00318"></a>00318                                                                 }
<a name="l00319"></a>00319                                                                 
<a name="l00320"></a>00320                                                                 <span class="keywordflow">break</span>;
<a name="l00321"></a>00321                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.EntryType.methodType:
<a name="l00322"></a>00322                                                                 output += vartype;
<a name="l00323"></a>00323                                                                 <span class="keywordflow">if</span> (vartype != <span class="stringliteral">""</span>) output += <span class="stringliteral">" "</span>;
<a name="l00324"></a>00324                                                                 output += lexeme + <span class="stringliteral">"() "</span>;
<a name="l00325"></a>00325                                                                 output += <span class="stringliteral">"\t//size:"</span> + size;
<a name="l00326"></a>00326                                                                 output += <span class="stringliteral">" params:"</span> + el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#7545cb3c895fa73720cdc877f0dd5382">GetNumParams</a>();
<a name="l00327"></a>00327                                                                 output += <span class="stringliteral">" offset:"</span> + offset;
<a name="l00328"></a>00328                                                                 <span class="keywordflow">if</span> (el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#2c3e28ef5d28b68d0aeb8ec9206f54a3">childList</a>.Length &gt; 0)
<a name="l00329"></a>00329                                                                         output += el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#2c3e28ef5d28b68d0aeb8ec9206f54a3">childList</a>;
<a name="l00330"></a>00330                                                                 <span class="keywordflow">break</span>;
<a name="l00331"></a>00331                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.EntryType.classType:
<a name="l00332"></a>00332                                                                 output += <span class="stringliteral">"class "</span>;
<a name="l00333"></a>00333                                                                 output += lexeme + <span class="stringliteral">" "</span>;
<a name="l00334"></a>00334                                                                 output += <span class="stringliteral">"\t//size:"</span> + size;
<a name="l00335"></a>00335                                                                 <span class="comment">//output += " offset:" + offset;</span>
<a name="l00336"></a>00336                                                                 <span class="keywordflow">if</span> (el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#2c3e28ef5d28b68d0aeb8ec9206f54a3">childList</a>.Length &gt; 0)
<a name="l00337"></a>00337                                                                         output += el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#2c3e28ef5d28b68d0aeb8ec9206f54a3">childList</a>;
<a name="l00338"></a>00338                                                                 <span class="keywordflow">break</span>;
<a name="l00339"></a>00339                                                         <span class="keywordflow">default</span>:
<a name="l00340"></a>00340                                                                 output += lexeme + <span class="stringliteral">", type:"</span> + token + <span class="stringliteral">" offset:"</span> + offset;
<a name="l00341"></a>00341                                                                 <span class="keywordflow">break</span>;
<a name="l00342"></a>00342                                                 }
<a name="l00343"></a>00343                                                 
<a name="l00344"></a>00344                                                 <span class="keywordflow">if</span> (el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#7d93f563b08a7d92ddd123d6edae9191">location</a> &gt; 0)
<a name="l00345"></a>00345                                                         output += <span class="stringliteral">" location:"</span> + el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#7d93f563b08a7d92ddd123d6edae9191">location</a>;
<a name="l00346"></a>00346                                                 
<a name="l00347"></a>00347                                                 Console.WriteLine(output);
<a name="l00348"></a>00348                                                 
<a name="l00349"></a>00349                                                 <span class="comment">/* break out of the loop or move to the next item, whichever is needed */</span>
<a name="l00350"></a>00350                                                 <span class="keywordflow">if</span> (el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a> == null)
<a name="l00351"></a>00351                                                         <span class="keywordflow">break</span>;
<a name="l00352"></a>00352                                                 <span class="keywordflow">else</span>
<a name="l00353"></a>00353                                                 {
<a name="l00354"></a>00354                                                         el = el.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a>;
<a name="l00355"></a>00355                                                         <span class="keywordflow">if</span> (el == null)
<a name="l00356"></a>00356                                                                 <span class="keywordflow">break</span>;
<a name="l00357"></a>00357                                                 }
<a name="l00358"></a>00358                                         }
<a name="l00359"></a>00359                                 }
<a name="l00360"></a>00360                         }
<a name="l00361"></a>00361                 }
<a name="l00362"></a>00362                 
<a name="l00367"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#792ed4662e3a8c78fabfdc6357c1c6f8">00367</a>                 <span class="keyword">public</span> <span class="keywordtype">int</span> GetDepthSize(<span class="keywordtype">int</span> dep)
<a name="l00368"></a>00368                 {
<a name="l00369"></a>00369                         <span class="keywordtype">int</span> retval = 0;
<a name="l00370"></a>00370                         <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> search = null;
<a name="l00371"></a>00371                         
<a name="l00372"></a>00372                         foreach(<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> el in vertArray)
<a name="l00373"></a>00373                         {
<a name="l00374"></a>00374                                 search = el;
<a name="l00375"></a>00375                                 
<a name="l00376"></a>00376                                 <span class="keywordflow">while</span> (search != null)
<a name="l00377"></a>00377                                 {
<a name="l00378"></a>00378                                         <span class="keywordflow">if</span> (search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#21411b80a636d46349c654ba2f25064d">GetDepth</a>() == dep)
<a name="l00379"></a>00379                                                 retval += search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#b4b6053fffb4c5eb937b0a910f3243ae">GetSizeOfLocals</a>();
<a name="l00380"></a>00380                                         
<a name="l00381"></a>00381                                         search = search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a>;
<a name="l00382"></a>00382                                 }
<a name="l00383"></a>00383                         }
<a name="l00384"></a>00384                         
<a name="l00385"></a>00385                         <span class="keywordflow">return</span> retval;
<a name="l00386"></a>00386                 }
<a name="l00387"></a>00387                 
<a name="l00391"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#5235bedc9010e052dd750f1b114784bc">00391</a>                 <span class="keyword">public</span> <span class="keywordtype">int</span> GetMinOffset()
<a name="l00392"></a>00392                 {
<a name="l00393"></a>00393                         <span class="keywordtype">int</span> retval = 0;
<a name="l00394"></a>00394                         <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> search = null;
<a name="l00395"></a>00395                         
<a name="l00396"></a>00396                         foreach(<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> el in vertArray)
<a name="l00397"></a>00397                         {
<a name="l00398"></a>00398                                 search = el;
<a name="l00399"></a>00399                                 
<a name="l00400"></a>00400                                 <span class="keywordflow">while</span> (search != null)
<a name="l00401"></a>00401                                 {
<a name="l00402"></a>00402                                         <span class="keywordflow">if</span> (search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#164678498ad55bd54219babe94dfc97d">GetOffset</a>() &lt; retval)
<a name="l00403"></a>00403                                                 retval = search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#164678498ad55bd54219babe94dfc97d">GetOffset</a>();
<a name="l00404"></a>00404                                         
<a name="l00405"></a>00405                                         search = search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a>;
<a name="l00406"></a>00406                                 }
<a name="l00407"></a>00407                         }
<a name="l00408"></a>00408                         
<a name="l00409"></a>00409                         <span class="keywordflow">return</span> retval;
<a name="l00410"></a>00410                 }
<a name="l00411"></a>00411                 
<a name="l00416"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#36b0967e292fed90ad5a3b72cd7236e5">00416</a>                 <span class="keyword">public</span> string GenerateAssemblyData(<span class="keywordtype">int</span> dep)
<a name="l00417"></a>00417                 {
<a name="l00418"></a>00418                         string retval = <span class="stringliteral">""</span>;
<a name="l00419"></a>00419                         <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> search = null;
<a name="l00420"></a>00420                         
<a name="l00421"></a>00421                         foreach(<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> el in vertArray)
<a name="l00422"></a>00422                         {
<a name="l00423"></a>00423                                 search = el;
<a name="l00424"></a>00424                                 
<a name="l00425"></a>00425                                 <span class="keywordflow">while</span> (search != null)
<a name="l00426"></a>00426                                 {
<a name="l00427"></a>00427                                         <span class="keywordflow">if</span> (search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#21411b80a636d46349c654ba2f25064d">GetDepth</a>() == dep)
<a name="l00428"></a>00428                                                 <span class="keywordflow">if</span> (search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#fc4a62d9e1b119394ba28f8c5d0df0e5">GetEType</a>() == <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.EntryType.varType)
<a name="l00429"></a>00429                                                         <span class="keywordflow">if</span> (retval.Length == 0)
<a name="l00430"></a>00430                                                                 retval = search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#f41a42452a6a64694572241da000e74e">GetName</a>() + <span class="stringliteral">" dw ?"</span>;
<a name="l00431"></a>00431                                                         <span class="keywordflow">else</span>
<a name="l00432"></a>00432                                                                 retval += <span class="stringliteral">"\n"</span> + search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#f41a42452a6a64694572241da000e74e">GetName</a>() + <span class="stringliteral">" dw ?"</span>;
<a name="l00433"></a>00433                                         
<a name="l00434"></a>00434                                         search = search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a>;
<a name="l00435"></a>00435                                 }
<a name="l00436"></a>00436                         }
<a name="l00437"></a>00437                         
<a name="l00438"></a>00438                         <span class="keywordflow">return</span> retval;
<a name="l00439"></a>00439                 }
<a name="l00440"></a>00440                 
<a name="l00445"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#c5815641a5ecef012116e64b1f419ef3">00445</a>                 <span class="keyword">public</span> string GetChildren(<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> ele)
<a name="l00446"></a>00446                 {
<a name="l00447"></a>00447                         string retstr = <span class="stringliteral">""</span>;
<a name="l00448"></a>00448                         <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> search = null;
<a name="l00449"></a>00449                         
<a name="l00450"></a>00450                         foreach(<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> elem in vertArray)
<a name="l00451"></a>00451                         {
<a name="l00452"></a>00452                                 search = elem;
<a name="l00453"></a>00453                                                                         
<a name="l00454"></a>00454                                 <span class="keywordflow">while</span> (search != null)
<a name="l00455"></a>00455                                 {
<a name="l00456"></a>00456                                         <span class="keywordflow">if</span> (search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#73165922ce2fe1bfd37a4b65e8093a95">parent</a> == ele)
<a name="l00457"></a>00457                                         {
<a name="l00458"></a>00458                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#0bfd1277767810b7daeff95e2c02a3d4">mode</a>)
<a name="l00459"></a>00459                                                 {
<a name="l00460"></a>00460                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.<a class="code" href="class_mini_c_sharp_1_1_element.htm#a65c99c959720a9d0a2363b1904d5454">PassingMode</a>.passOut:
<a name="l00461"></a>00461                                                                 retstr += <span class="stringliteral">"out "</span>;
<a name="l00462"></a>00462                                                                 <span class="keywordflow">break</span>;
<a name="l00463"></a>00463                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.PassingMode.passRef:
<a name="l00464"></a>00464                                                                 retstr += <span class="stringliteral">"ref "</span>;
<a name="l00465"></a>00465                                                                 <span class="keywordflow">break</span>;
<a name="l00466"></a>00466                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.PassingMode.passNorm:
<a name="l00467"></a>00467                                                         <span class="keywordflow">default</span>:
<a name="l00468"></a>00468                                                                 <span class="keywordflow">break</span>;
<a name="l00469"></a>00469                                                 }
<a name="l00470"></a>00470                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#7dcc40332bb29b8f4d6e45d671d829df">GetVType</a>())
<a name="l00471"></a>00471                                                 {
<a name="l00472"></a>00472                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._int:
<a name="l00473"></a>00473                                                                 retstr += <span class="stringliteral">"int "</span>;
<a name="l00474"></a>00474                                                                 <span class="keywordflow">break</span>;
<a name="l00475"></a>00475                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._char:
<a name="l00476"></a>00476                                                                 retstr += <span class="stringliteral">"char "</span>;
<a name="l00477"></a>00477                                                                 <span class="keywordflow">break</span>;
<a name="l00478"></a>00478                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._float:
<a name="l00479"></a>00479                                                                 retstr += <span class="stringliteral">"float "</span>;
<a name="l00480"></a>00480                                                                 <span class="keywordflow">break</span>;
<a name="l00481"></a>00481                                                         <span class="keywordflow">default</span>:
<a name="l00482"></a>00482                                                                 <span class="keywordflow">break</span>;
<a name="l00483"></a>00483                                                 }
<a name="l00484"></a>00484                                                 retstr += search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#f41a42452a6a64694572241da000e74e">GetName</a>();
<a name="l00485"></a>00485                                                 retstr += <span class="stringliteral">" | "</span>;
<a name="l00486"></a>00486                                         }
<a name="l00487"></a>00487                                                                                 
<a name="l00488"></a>00488                                         search = search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a>;
<a name="l00489"></a>00489                                 }
<a name="l00490"></a>00490                         }
<a name="l00491"></a>00491                         
<a name="l00492"></a>00492                         <span class="keywordflow">return</span> retstr;
<a name="l00493"></a>00493                 }
<a name="l00494"></a>00494                 
<a name="l00499"></a><a class="code" href="class_mini_c_sharp_1_1_hash_table.htm#5a90102803d270699bb42f5eab2618ec">00499</a>                 <span class="keyword">public</span> string GetChildrenPrint(<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> ele)
<a name="l00500"></a>00500                 {
<a name="l00501"></a>00501                         string retstr = <span class="stringliteral">"\n"</span>;
<a name="l00502"></a>00502                         <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> search = null;
<a name="l00503"></a>00503                         
<a name="l00504"></a>00504                         foreach(<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> elem in vertArray)
<a name="l00505"></a>00505                         {
<a name="l00506"></a>00506                                 search = elem;
<a name="l00507"></a>00507                                                                         
<a name="l00508"></a>00508                                 <span class="keywordflow">while</span> (search != null)
<a name="l00509"></a>00509                                 {
<a name="l00510"></a>00510                                         <span class="keywordflow">if</span> (search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#73165922ce2fe1bfd37a4b65e8093a95">parent</a> == ele)
<a name="l00511"></a>00511                                         {
<a name="l00512"></a>00512                                                 retstr += <span class="stringliteral">" =&gt; "</span>;
<a name="l00513"></a>00513                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#0bfd1277767810b7daeff95e2c02a3d4">mode</a>)
<a name="l00514"></a>00514                                                 {
<a name="l00515"></a>00515                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.<a class="code" href="class_mini_c_sharp_1_1_element.htm#a65c99c959720a9d0a2363b1904d5454">PassingMode</a>.passOut:
<a name="l00516"></a>00516                                                                 retstr += <span class="stringliteral">"out "</span>;
<a name="l00517"></a>00517                                                                 <span class="keywordflow">break</span>;
<a name="l00518"></a>00518                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.PassingMode.passRef:
<a name="l00519"></a>00519                                                                 retstr += <span class="stringliteral">"ref "</span>;
<a name="l00520"></a>00520                                                                 <span class="keywordflow">break</span>;
<a name="l00521"></a>00521                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a>.PassingMode.passNorm:
<a name="l00522"></a>00522                                                         <span class="keywordflow">default</span>:
<a name="l00523"></a>00523                                                                 <span class="keywordflow">break</span>;
<a name="l00524"></a>00524                                                 }
<a name="l00525"></a>00525                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#7dcc40332bb29b8f4d6e45d671d829df">GetVType</a>())
<a name="l00526"></a>00526                                                 {
<a name="l00527"></a>00527                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._int:
<a name="l00528"></a>00528                                                                 retstr += <span class="stringliteral">"int "</span>;
<a name="l00529"></a>00529                                                                 <span class="keywordflow">break</span>;
<a name="l00530"></a>00530                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._char:
<a name="l00531"></a>00531                                                                 retstr += <span class="stringliteral">"char "</span>;
<a name="l00532"></a>00532                                                                 <span class="keywordflow">break</span>;
<a name="l00533"></a>00533                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._float:
<a name="l00534"></a>00534                                                                 retstr += <span class="stringliteral">"float "</span>;
<a name="l00535"></a>00535                                                                 <span class="keywordflow">break</span>;
<a name="l00536"></a>00536                                                         <span class="keywordflow">default</span>:
<a name="l00537"></a>00537                                                                 <span class="keywordflow">break</span>;
<a name="l00538"></a>00538                                                 }
<a name="l00539"></a>00539                                                 retstr += search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#f41a42452a6a64694572241da000e74e">GetName</a>();
<a name="l00540"></a>00540                                                 retstr += <span class="stringliteral">"\n"</span>;
<a name="l00541"></a>00541                                         }
<a name="l00542"></a>00542                                                                                 
<a name="l00543"></a>00543                                         search = search.<a class="code" href="class_mini_c_sharp_1_1_element.htm#638bf6bade6314f8e422bb7b09819e88">next</a>;
<a name="l00544"></a>00544                                 }
<a name="l00545"></a>00545                         }
<a name="l00546"></a>00546                         
<a name="l00547"></a>00547                         <span class="keywordflow">return</span> retstr;
<a name="l00548"></a>00548                 }
<a name="l00549"></a>00549                 
<a name="l00554"></a>00554                 <span class="keyword">private</span> <span class="keyword">static</span> <span class="keywordtype">int</span> hash(string name)
<a name="l00555"></a>00555                 {
<a name="l00556"></a>00556                         <span class="keywordtype">long</span> h = 0, g;
<a name="l00557"></a>00557                         
<a name="l00558"></a>00558                         foreach(<span class="keywordtype">char</span> ch in name)
<a name="l00559"></a>00559                         {
<a name="l00560"></a>00560                                 h = (h &lt;&lt; 4) + (<span class="keywordtype">int</span>)ch;
<a name="l00561"></a>00561                                 
<a name="l00562"></a>00562                                 <span class="keywordflow">if</span> ((g = h &amp; 0xf0000000) != 0)
<a name="l00563"></a>00563                                 {
<a name="l00564"></a>00564                                         h = h ^ (g &gt;&gt; 24);
<a name="l00565"></a>00565                                         h = h ^ g;
<a name="l00566"></a>00566                                 }
<a name="l00567"></a>00567                         }
<a name="l00568"></a>00568                         
<a name="l00569"></a>00569                         <span class="keywordflow">return</span> Math.Abs((<span class="keywordtype">int</span>)(h % PRIMENUM));
<a name="l00570"></a>00570                 }
<a name="l00571"></a>00571         }
<a name="l00572"></a>00572 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Sun May 14 16:08:27 2006 for MiniCSharp by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
