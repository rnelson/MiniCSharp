<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>MiniCSharp: /Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/RDP.cs Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<h1>/Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/RDP.cs</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id$</span>
<a name="l00002"></a>00002 <span class="comment"> * Ross Nelson</span>
<a name="l00003"></a>00003 <span class="comment"> * Compiler Construction (CSC 446)</span>
<a name="l00004"></a>00004 <span class="comment"> * MiniCSharp/Recursive Descent Parser</span>
<a name="l00005"></a>00005 <span class="comment"> */</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="preprocessor">#region Using declarations</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span><span class="keyword">using</span> System;
<a name="l00009"></a>00009 <span class="keyword">using</span> System.Text;
<a name="l00010"></a>00010 <span class="keyword">using</span> System.Text.RegularExpressions;
<a name="l00011"></a>00011 <span class="keyword">using</span> System.IO;
<a name="l00012"></a>00012 <span class="preprocessor">#endregion</span>
<a name="l00013"></a>00013 <span class="preprocessor"></span>
<a name="l00014"></a>00014 <span class="keyword">namespace </span>MiniCSharp
<a name="l00015"></a>00015 {
<a name="l00016"></a><a class="code" href="class_mini_c_sharp_1_1_r_d_p.htm">00016</a>         <span class="keyword">class </span><a class="code" href="class_mini_c_sharp_1_1_r_d_p.htm">RDP</a>
<a name="l00017"></a>00017         {
<a name="l00019"></a>00019                 <span class="keyword">private</span> <a class="code" href="class_mini_c_sharp_1_1_lexical.htm">Lexical</a> lex;
<a name="l00021"></a>00021                 <span class="keyword">private</span> <span class="keywordtype">bool</span> incAtBrace;
<a name="l00023"></a>00023                 <span class="keyword">private</span> <span class="keywordtype">bool</span> isFunc;
<a name="l00025"></a>00025                 <span class="keyword">private</span> <span class="keywordtype">bool</span> foundMain;
<a name="l00027"></a>00027                 <span class="keyword">private</span> <span class="keywordtype">bool</span> nowMain;
<a name="l00029"></a>00029                 <span class="keyword">private</span> <span class="keywordtype">int</span> funcSize;
<a name="l00031"></a>00031                 <span class="keyword">private</span> <span class="keywordtype">int</span> classSize;
<a name="l00033"></a>00033                 <span class="keyword">private</span> <span class="keywordtype">int</span> varLoc;
<a name="l00035"></a>00035                 <span class="keyword">private</span> <span class="keywordtype">bool</span> inParam;
<a name="l00037"></a>00037                 <span class="keyword">private</span> <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> parent;
<a name="l00039"></a>00039                 <span class="keyword">private</span> <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> current;
<a name="l00041"></a>00041                 <span class="keyword">private</span> <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> currentclass;
<a name="l00043"></a>00043                 <span class="keyword">private</span> <a class="code" href="class_mini_c_sharp_1_1_element.htm">Element</a> currentmethod;
<a name="l00045"></a>00045                 <span class="keyword">private</span> <span class="keywordtype">int</span> localoffset;
<a name="l00047"></a>00047                 <span class="keyword">private</span> <span class="keywordtype">int</span> offsetmul;
<a name="l00048"></a>00048 
<a name="l00050"></a>00050                 <span class="keyword">private</span> string TACstart;
<a name="l00052"></a>00052                 <span class="keyword">private</span> <span class="keywordtype">bool</span> inExpr;
<a name="l00054"></a>00054                 <span class="keyword">private</span> <span class="keywordtype">int</span> minOffset;
<a name="l00055"></a>00055                 
<a name="l00057"></a>00057                 <span class="keyword">private</span> FileStream tacfs;
<a name="l00059"></a>00059                 <span class="keyword">private</span> StreamWriter tacsw;
<a name="l00060"></a>00060                 
<a name="l00064"></a><a class="code" href="class_mini_c_sharp_1_1_r_d_p.htm#9d85197ee742cd217638d4bb5851c0f1">00064</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_r_d_p.htm#9d85197ee742cd217638d4bb5851c0f1">RDP</a>()
<a name="l00065"></a>00065                 {
<a name="l00066"></a>00066                         System.Console.WriteLine(<span class="stringliteral">"error: default RDP constructor called, filename needed"</span>);
<a name="l00067"></a>00067                         System.Environment.Exit(1);
<a name="l00068"></a>00068                 }
<a name="l00069"></a>00069                 
<a name="l00075"></a><a class="code" href="class_mini_c_sharp_1_1_r_d_p.htm#f686b02e5b8cbf2c96040e9c04d2c2ba">00075</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_r_d_p.htm#9d85197ee742cd217638d4bb5851c0f1">RDP</a>(string filename)
<a name="l00076"></a>00076                 {
<a name="l00077"></a>00077                         lex = <span class="keyword">new</span> <a class="code" href="class_mini_c_sharp_1_1_lexical.htm">Lexical</a>(filename);
<a name="l00078"></a>00078                         lex.<a class="code" href="class_mini_c_sharp_1_1_lexical.htm#018294a94ad8b766fd1ba4f8b6b15d23">GetNextToken</a>();
<a name="l00079"></a>00079                         
<a name="l00080"></a>00080                         <span class="comment">/* give the class-scope variables some real values */</span>
<a name="l00081"></a>00081                         incAtBrace = <span class="keyword">true</span>;
<a name="l00082"></a>00082                         isFunc = <span class="keyword">false</span>;
<a name="l00083"></a>00083                         inParam = <span class="keyword">false</span>;
<a name="l00084"></a>00084                         foundMain = <span class="keyword">false</span>;
<a name="l00085"></a>00085                         nowMain = <span class="keyword">false</span>;
<a name="l00086"></a>00086                         funcSize = 0;
<a name="l00087"></a>00087                         classSize = 0;
<a name="l00088"></a>00088                         varLoc = 0;
<a name="l00089"></a>00089                         parent = null;
<a name="l00090"></a>00090                         current = null;
<a name="l00091"></a>00091                         currentclass = null;
<a name="l00092"></a>00092                         localoffset = 2;
<a name="l00093"></a>00093                         offsetmul = -1;
<a name="l00094"></a>00094                         minOffset = 0;
<a name="l00095"></a>00095                         
<a name="l00096"></a>00096                         <span class="comment">/* don't forget the three-address-code stuff */</span>
<a name="l00097"></a>00097                         TACstart = <span class="stringliteral">""</span>;
<a name="l00098"></a>00098                         inExpr = <span class="keyword">false</span>;
<a name="l00099"></a>00099                         
<a name="l00100"></a>00100                         <span class="comment">/* open the TAC file */</span>
<a name="l00101"></a>00101                         tacfs = <span class="keyword">new</span> FileStream(<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.GetFilename(<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.filename, <span class="charliteral">'.'</span>) + <span class="stringliteral">".TAC"</span>, FileMode.Create);
<a name="l00102"></a>00102                         tacsw = <span class="keyword">new</span> StreamWriter(tacfs, Encoding.UTF8);
<a name="l00103"></a>00103                         
<a name="l00104"></a>00104                         <span class="comment">/* run the function for the first grammar rule */</span>
<a name="l00105"></a>00105                         Prog();
<a name="l00106"></a>00106                         
<a name="l00107"></a>00107                         <span class="comment">/* flush the StreamWriter buffer and close the files */</span>
<a name="l00108"></a>00108                         <span class="keywordflow">try</span>
<a name="l00109"></a>00109                         {
<a name="l00110"></a>00110                                 tacsw.Write(TACstart);
<a name="l00111"></a>00111                                 
<a name="l00112"></a>00112                                 <span class="keywordflow">if</span> (<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.VISUAL)
<a name="l00113"></a>00113                                         Console.WriteLine(TACstart);
<a name="l00114"></a>00114                                 
<a name="l00115"></a>00115                                 tacsw.Flush();
<a name="l00116"></a>00116                                 tacsw.Close();
<a name="l00117"></a>00117                                 tacfs.Close();
<a name="l00118"></a>00118                         }
<a name="l00119"></a>00119                         <span class="keywordflow">catch</span>
<a name="l00120"></a>00120                         {
<a name="l00121"></a>00121                                 <span class="comment">/* oh well! */</span>
<a name="l00122"></a>00122                         }
<a name="l00123"></a>00123                 }
<a name="l00124"></a>00124                 
<a name="l00128"></a><a class="code" href="class_mini_c_sharp_1_1_r_d_p.htm#716f3f4d9af9ac3815c67fa533b20853">00128</a>                 <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_mini_c_sharp_1_1_r_d_p.htm#716f3f4d9af9ac3815c67fa533b20853">Dummy</a>()
<a name="l00129"></a>00129                 {
<a name="l00130"></a>00130                         <span class="comment">/* do nothing */</span>
<a name="l00131"></a>00131                 }
<a name="l00132"></a>00132                 
<a name="l00139"></a>00139                 <span class="keyword">static</span> <span class="keywordtype">void</span> Error(<span class="keywordtype">int</span> line, string expected, string found)
<a name="l00140"></a>00140                 {
<a name="l00141"></a>00141                         System.Console.WriteLine(<span class="stringliteral">"error: {0}:{1}: expecting {2} but found {3}"</span>, <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.filename, line, expected, found);
<a name="l00142"></a>00142                         <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Wait(<span class="stringliteral">"\nPress enter..."</span>);
<a name="l00143"></a>00143                         System.Environment.Exit(42);
<a name="l00144"></a>00144                 }
<a name="l00149"></a>00149                 <span class="keyword">static</span> <span class="keywordtype">void</span> Error(string message)
<a name="l00150"></a>00150                 {
<a name="l00151"></a>00151                         System.Console.WriteLine(<span class="stringliteral">"{0}"</span>, message);
<a name="l00152"></a>00152                         Globals.Wait(<span class="stringliteral">"\nPress enter..."</span>);
<a name="l00153"></a>00153                         System.Environment.Exit(42);
<a name="l00154"></a>00154                 }
<a name="l00155"></a>00155                 
<a name="l00161"></a>00161                 <span class="keyword">static</span> <span class="keywordtype">void</span> Warning(<span class="keywordtype">int</span> line, string expected)
<a name="l00162"></a>00162                 {
<a name="l00163"></a>00163                         System.Console.WriteLine(<span class="stringliteral">"warning: {0}:{1}: expecting {0}"</span>, expected);
<a name="l00164"></a>00164                 }
<a name="l00169"></a>00169                 <span class="keyword">static</span> <span class="keywordtype">void</span> Warning(string message)
<a name="l00170"></a>00170                 {
<a name="l00171"></a>00171                         System.Console.WriteLine(<span class="stringliteral">"{0}"</span>, message);
<a name="l00172"></a>00172                 }
<a name="l00173"></a>00173                 
<a name="l00178"></a>00178                 <span class="keywordtype">void</span> match(Globals.Symbol desired)
<a name="l00179"></a>00179                 {
<a name="l00180"></a>00180                         <span class="keywordtype">int</span> loc = (int)desired;
<a name="l00181"></a>00181                         string wanted = Globals.Tokens[loc];
<a name="l00182"></a>00182                         string found = Globals.Tokens[(int)Globals.token];
<a name="l00183"></a>00183                         
<a name="l00184"></a>00184                         if (Globals.token == Globals.Symbol._eof)
<a name="l00185"></a>00185                         {
<a name="l00186"></a>00186                                 <span class="keywordflow">if</span> (desired != Globals.Symbol._eof)
<a name="l00187"></a>00187                                 {
<a name="l00188"></a>00188                                         Error(Globals.curLine, wanted, <span class="stringliteral">"end of file"</span>);
<a name="l00189"></a>00189                                 }
<a name="l00190"></a>00190                         }
<a name="l00191"></a>00191                         
<a name="l00192"></a>00192                         <span class="keywordflow">if</span> (desired == Globals.token)
<a name="l00193"></a>00193                         {
<a name="l00194"></a>00194                                 <span class="comment">/* increase/decrease the depth as needed */</span>
<a name="l00195"></a>00195                                 <span class="keywordflow">if</span> (desired == Globals.Symbol._lbrace)
<a name="l00196"></a>00196                                 {
<a name="l00197"></a>00197                                         <span class="keywordflow">if</span> (incAtBrace)
<a name="l00198"></a>00198                                         {
<a name="l00199"></a>00199                                                 Globals.depth++;
<a name="l00200"></a>00200                                                 parent = current;
<a name="l00201"></a>00201                                                 localoffset = 2;
<a name="l00202"></a>00202                                                 offsetmul = -1;
<a name="l00203"></a>00203                                                 funcSize = 0;
<a name="l00204"></a>00204                                         }
<a name="l00205"></a>00205                                         <span class="keywordflow">else</span>
<a name="l00206"></a>00206                                                 incAtBrace = <span class="keyword">true</span>;
<a name="l00207"></a>00207                                 }
<a name="l00208"></a>00208                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (desired == Globals.Symbol._lparen)
<a name="l00209"></a>00209                                 {
<a name="l00210"></a>00210                                         incAtBrace = <span class="keyword">false</span>;
<a name="l00211"></a>00211                                         parent = current;
<a name="l00212"></a>00212                                         Globals.depth++;
<a name="l00213"></a>00213                                         localoffset = 4;
<a name="l00214"></a>00214                                         offsetmul = 1;
<a name="l00215"></a>00215                                         funcSize = 0;
<a name="l00216"></a>00216                                 }
<a name="l00217"></a>00217                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (desired == Globals.Symbol._rparen)
<a name="l00218"></a>00218                                         inParam = <span class="keyword">false</span>;
<a name="l00219"></a>00219                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (desired == Globals.Symbol._rbrace)
<a name="l00220"></a>00220                                 {
<a name="l00221"></a>00221                                         <span class="comment">/* save the child lists */</span>
<a name="l00222"></a>00222                                         <span class="keywordflow">try</span>
<a name="l00223"></a>00223                                         {
<a name="l00224"></a>00224                                                 parent.childList =  Globals.symTab.GetChildrenPrint(parent);
<a name="l00225"></a>00225                                                 current.childList = Globals.symTab.GetChildrenPrint(current);
<a name="l00226"></a>00226                                                 parent.pchildList = Globals.symTab.GetChildren(parent);
<a name="l00227"></a>00227                                                 current.pchildList = Globals.symTab.GetChildren(current);
<a name="l00228"></a>00228                                         
<a name="l00229"></a>00229                                                 <span class="comment">/* restore the offset */</span>
<a name="l00230"></a>00230                                                 localoffset = parent.GetOffset();
<a name="l00231"></a>00231                                         
<a name="l00232"></a>00232                                                 <span class="comment">/* save the method/class size */</span>
<a name="l00233"></a>00233                                                 funcSize = 0;
<a name="l00234"></a>00234                                         
<a name="l00235"></a>00235                                                 <span class="comment">/* unset currentclass if needed */</span>
<a name="l00236"></a>00236                                                 <span class="keywordflow">if</span> (currentclass == parent)
<a name="l00237"></a>00237                                                         currentclass = null;
<a name="l00238"></a>00238                                                 
<a name="l00239"></a>00239                                                 <span class="comment">/* do the same with currentmethod */</span>
<a name="l00240"></a>00240                                                 currentmethod = null;
<a name="l00241"></a>00241                                         
<a name="l00242"></a>00242                                                 <span class="comment">/* kill this depth */</span>
<a name="l00243"></a>00243                                                 Globals.symTab.DeleteDepth(Globals.depth);
<a name="l00244"></a>00244                                                 Globals.depth--;
<a name="l00245"></a>00245                                         
<a name="l00246"></a>00246                                                 <span class="comment">/* go up a level for parent */</span>
<a name="l00247"></a>00247                                                 <span class="keywordflow">if</span> (current != null)
<a name="l00248"></a>00248                                                         parent = parent.parent;
<a name="l00249"></a>00249                                         }
<a name="l00250"></a>00250                                         <span class="keywordflow">catch</span>
<a name="l00251"></a>00251                                         {
<a name="l00252"></a>00252                                                 <span class="comment">/* temp variables break this */</span>
<a name="l00253"></a>00253                                         }
<a name="l00254"></a>00254                                 }
<a name="l00255"></a>00255                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (desired == Globals.Symbol._identifier)
<a name="l00256"></a>00256                                 {
<a name="l00257"></a>00257                                         <span class="comment">/* ...in case we miss match("Main") */</span>
<a name="l00258"></a>00258                                         <span class="keywordflow">if</span> (Globals.lexeme == <span class="stringliteral">"Main"</span>)
<a name="l00259"></a>00259                                         {
<a name="l00260"></a>00260                                                 <span class="comment">/* this bug should be fixed.  if we hit this, something</span>
<a name="l00261"></a>00261 <span class="comment">                                                 * went wrong. */</span>
<a name="l00262"></a>00262                                                 foundMain = <span class="keyword">true</span>;
<a name="l00263"></a>00263                                                 
<a name="l00264"></a>00264                                                 <span class="comment">/* save the TAC START line */</span>
<a name="l00265"></a>00265                                                 TACstart = <span class="stringliteral">"START BROKEN_READ.Main"</span>;
<a name="l00266"></a>00266                                         }
<a name="l00267"></a>00267                                 }
<a name="l00268"></a>00268                                 
<a name="l00269"></a>00269                                 <span class="keywordflow">if</span> (desired != Globals.Symbol._eof)
<a name="l00270"></a>00270                                         lex.GetNextToken();
<a name="l00271"></a>00271                         }
<a name="l00272"></a>00272                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._comment)
<a name="l00273"></a>00273                         {
<a name="l00274"></a>00274                                 <span class="keywordflow">if</span> (desired != Globals.Symbol._eof)
<a name="l00275"></a>00275                                 {
<a name="l00276"></a>00276                                         lex.GetNextToken();
<a name="l00277"></a>00277                                         match(desired);
<a name="l00278"></a>00278                                 }
<a name="l00279"></a>00279                         }
<a name="l00280"></a>00280                         <span class="keywordflow">else</span>
<a name="l00281"></a>00281                                 Error(Globals.curLine, wanted, found);
<a name="l00282"></a>00282                 }
<a name="l00283"></a>00283                 
<a name="l00288"></a>00288                 <span class="keywordtype">void</span> match (string desired)
<a name="l00289"></a>00289                 {
<a name="l00290"></a>00290                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._eof)
<a name="l00291"></a>00291                         {
<a name="l00292"></a>00292                                 Error(Globals.curLine, desired, <span class="stringliteral">"end of file"</span>);
<a name="l00293"></a>00293                         }
<a name="l00294"></a>00294                         
<a name="l00295"></a>00295                         <span class="keywordflow">if</span> (desired == Globals.lexeme)
<a name="l00296"></a>00296                                 lex.GetNextToken();
<a name="l00297"></a>00297                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Globals.lexeme.Substring(0, 2) == <span class="stringliteral">"//"</span>)
<a name="l00298"></a>00298                         {
<a name="l00299"></a>00299                                 lex.GetNextToken();
<a name="l00300"></a>00300                                 match(desired);
<a name="l00301"></a>00301                         }
<a name="l00302"></a>00302                         <span class="keywordflow">else</span>
<a name="l00303"></a>00303                                 Error(Globals.curLine, desired, Globals.lexeme);
<a name="l00304"></a>00304                 }
<a name="l00305"></a>00305                 
<a name="l00310"></a>00310                 <span class="keyword">private</span> Element newtemp()
<a name="l00311"></a>00311                 {
<a name="l00312"></a>00312                         <span class="comment">/* find the next minimum offset */</span>
<a name="l00313"></a>00313                         minOffset = Globals.symTab.GetMinOffset();
<a name="l00314"></a>00314                         minOffset -= 2;
<a name="l00315"></a>00315                         
<a name="l00316"></a>00316                         <span class="comment">/* get a logical name for the next temporary variable */</span>
<a name="l00317"></a>00317                         string tName = <span class="stringliteral">"_BP"</span>;
<a name="l00318"></a>00318                         tName += minOffset &lt; 0 ? minOffset.ToString() : <span class="stringliteral">"-"</span> + minOffset.ToString();
<a name="l00319"></a>00319                         
<a name="l00320"></a>00320                         <span class="comment">/* create and return the new element */</span>
<a name="l00321"></a>00321                         Element e = AddSymbol(Globals.Symbol._unknown, Globals.Symbol._private, Globals.Symbol._int, Globals.Symbol._int, tName, Globals.depth);
<a name="l00322"></a>00322                         
<a name="l00323"></a>00323                         <span class="comment">/* make sure the temporary has the right offset */</span>
<a name="l00324"></a>00324                         e.SetOffset(minOffset);
<a name="l00325"></a>00325                         
<a name="l00326"></a>00326                         <span class="keywordflow">return</span> e;
<a name="l00327"></a>00327                 }
<a name="l00328"></a>00328                 
<a name="l00333"></a>00333                 <span class="keyword">private</span> <span class="keywordtype">void</span> emit(string text)
<a name="l00334"></a>00334                 {
<a name="l00335"></a>00335                         <span class="comment">/* add the line to the TAC file */</span>
<a name="l00336"></a>00336                         tacsw.Write(text);
<a name="l00337"></a>00337                         
<a name="l00338"></a>00338                         <span class="comment">/* print the line to the screen if requested */</span>
<a name="l00339"></a>00339                         <span class="keywordflow">if</span> (Globals.VISUAL == <span class="keyword">true</span>)
<a name="l00340"></a>00340                         {
<a name="l00341"></a>00341                                 <span class="keywordflow">if</span> (Globals.linecount &lt;= 15)
<a name="l00342"></a>00342                                         Console.Write(text);
<a name="l00343"></a>00343                                 <span class="keywordflow">else</span>
<a name="l00344"></a>00344                                 {
<a name="l00345"></a>00345                                         Globals.linecount = 0;
<a name="l00346"></a>00346                                         Globals.Wait(<span class="stringliteral">"Hit enter to continue..."</span>);
<a name="l00347"></a>00347                                         Console.Write(text);
<a name="l00348"></a>00348                                 }
<a name="l00349"></a>00349                                 
<a name="l00350"></a>00350                                 Globals.linecount++;
<a name="l00351"></a>00351                         }
<a name="l00352"></a>00352                 }
<a name="l00353"></a>00353                 
<a name="l00363"></a>00363                 <span class="keyword">private</span> Element AddSymbol(Globals.Symbol pMode, Globals.Symbol accMod, Globals.Symbol type, Globals.Symbol token, string lexeme, <span class="keywordtype">int</span> depth)
<a name="l00364"></a>00364                 {
<a name="l00365"></a>00365                         <span class="comment">/* add the identifier */</span>
<a name="l00366"></a>00366                         Element e;
<a name="l00367"></a>00367                         e = Globals.symTab.Lookup(lexeme);
<a name="l00368"></a>00368                         
<a name="l00369"></a>00369                         <span class="comment">/* keep track of the size for offset information */</span>
<a name="l00370"></a>00370                         <span class="keywordtype">int</span> mysize = 0;
<a name="l00371"></a>00371                         
<a name="l00372"></a>00372                         <span class="comment">/* check for duplicates */</span>
<a name="l00373"></a>00373                         <span class="keywordflow">if</span> (e != null)
<a name="l00374"></a>00374                                 <span class="keywordflow">if</span> (e.GetDepth() == Globals.depth)
<a name="l00375"></a>00375                                         Error(<span class="stringliteral">"error: duplicate symbol \""</span> + lexeme + <span class="stringliteral">"\" found on line "</span> + Globals.curLine);
<a name="l00376"></a>00376                         
<a name="l00377"></a>00377                         e = Globals.symTab.Insert(lexeme, type, depth);
<a name="l00378"></a>00378                         current = e;
<a name="l00379"></a>00379                         
<a name="l00380"></a>00380                         <span class="comment">/* set the access */</span>
<a name="l00381"></a>00381                         e.SetAccess(accMod);
<a name="l00382"></a>00382                         
<a name="l00383"></a>00383                         <span class="comment">/* set the type and size */</span>
<a name="l00384"></a>00384                         <span class="keywordflow">if</span> (!isFunc)
<a name="l00385"></a>00385                         {
<a name="l00386"></a>00386                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)type)
<a name="l00387"></a>00387                                 {
<a name="l00388"></a>00388                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._int:
<a name="l00389"></a>00389                                                 e.SetInteger();
<a name="l00390"></a>00390                                                 mysize = 2;
<a name="l00391"></a>00391                                                 <span class="keywordflow">break</span>;
<a name="l00392"></a>00392                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._float:
<a name="l00393"></a>00393                                                 e.SetFloat();
<a name="l00394"></a>00394                                                 mysize = 4;
<a name="l00395"></a>00395                                                 <span class="keywordflow">break</span>;
<a name="l00396"></a>00396                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._char:
<a name="l00397"></a>00397                                                 e.SetCharacter();
<a name="l00398"></a>00398                                                 mysize = 1;
<a name="l00399"></a>00399                                                 <span class="keywordflow">break</span>;
<a name="l00400"></a>00400                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._class:
<a name="l00401"></a>00401                                                 e.SetClass();
<a name="l00402"></a>00402                                                 mysize = 0;
<a name="l00403"></a>00403                                                 currentclass = e;
<a name="l00404"></a>00404                                                 <span class="keywordflow">break</span>;
<a name="l00405"></a>00405                                 }
<a name="l00406"></a>00406                                 
<a name="l00407"></a>00407                                 <span class="keywordflow">if</span> ((token != Globals.Symbol._const) &amp;&amp; !inParam)
<a name="l00408"></a>00408                                 {
<a name="l00409"></a>00409                                         e.SetSizeOfLocals(mysize);
<a name="l00410"></a>00410                                         funcSize += mysize;
<a name="l00411"></a>00411                                 }
<a name="l00412"></a>00412                         }
<a name="l00413"></a>00413                         <span class="keywordflow">else</span>    <span class="comment">/* we are dealing with a method */</span>
<a name="l00414"></a>00414                         {
<a name="l00415"></a>00415                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)type)
<a name="l00416"></a>00416                                 {
<a name="l00417"></a>00417                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._int:
<a name="l00418"></a>00418                                                 e.SetInteger();
<a name="l00419"></a>00419                                                 <span class="keywordflow">break</span>;
<a name="l00420"></a>00420                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._float:
<a name="l00421"></a>00421                                                 e.SetFloat();
<a name="l00422"></a>00422                                                 <span class="keywordflow">break</span>;
<a name="l00423"></a>00423                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._char:
<a name="l00424"></a>00424                                                 e.SetCharacter();
<a name="l00425"></a>00425                                                 <span class="keywordflow">break</span>;
<a name="l00426"></a>00426                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._class:
<a name="l00427"></a>00427                                                 e.SetClass();
<a name="l00428"></a>00428                                                 <span class="keywordflow">break</span>;
<a name="l00429"></a>00429                                 }
<a name="l00430"></a>00430                                 isFunc = <span class="keyword">false</span>;
<a name="l00431"></a>00431                         }
<a name="l00432"></a>00432                         
<a name="l00433"></a>00433                         <span class="comment">/* set the passing mode (if specified) */</span>
<a name="l00434"></a>00434                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)pMode)
<a name="l00435"></a>00435                         {
<a name="l00436"></a>00436                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._ref:
<a name="l00437"></a>00437                                         e.mode = Element.PassingMode.passRef;
<a name="l00438"></a>00438                                         <span class="keywordflow">break</span>;
<a name="l00439"></a>00439                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._out:
<a name="l00440"></a>00440                                         e.mode = Element.PassingMode.passOut;
<a name="l00441"></a>00441                                         <span class="keywordflow">break</span>;
<a name="l00442"></a>00442                                 <span class="keywordflow">default</span>:
<a name="l00443"></a>00443                                         <span class="keywordflow">break</span>;
<a name="l00444"></a>00444                         }
<a name="l00445"></a>00445                         
<a name="l00446"></a>00446                         <span class="comment">/* stay in touch with your folks! */</span>
<a name="l00447"></a>00447                         e.parent = parent;
<a name="l00448"></a>00448                         
<a name="l00449"></a>00449                         <span class="keywordflow">if</span> (token != Globals.Symbol._const)
<a name="l00450"></a>00450                         {
<a name="l00451"></a>00451                                 <span class="comment">/* update the local variable size for classes */</span>
<a name="l00452"></a>00452                                 <span class="keywordflow">if</span> (parent != null)
<a name="l00453"></a>00453                                         <span class="keywordflow">if</span> (parent.GetEType() == Element.EntryType.classType)
<a name="l00454"></a>00454                                         {
<a name="l00455"></a>00455                                                 classSize += mysize;
<a name="l00456"></a>00456                                                 <span class="keywordflow">if</span> (current.GetEType() == Element.EntryType.methodType)
<a name="l00457"></a>00457                                                         currentmethod = current;
<a name="l00458"></a>00458                                         }
<a name="l00459"></a>00459                                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (parent.GetEType() == Element.EntryType.methodType)
<a name="l00460"></a>00460                                                 <span class="keywordflow">if</span> (!inParam)
<a name="l00461"></a>00461                                                         parent.SetSizeOfLocals(parent.GetSizeOfLocals() + mysize);
<a name="l00462"></a>00462                         
<a name="l00463"></a>00463                                 <span class="comment">/* update the offset */</span>
<a name="l00464"></a>00464                                 e.SetOffset(localoffset);
<a name="l00465"></a>00465                                 localoffset += (mysize * offsetmul);
<a name="l00466"></a>00466                                 
<a name="l00467"></a>00467                                 <span class="comment">/* update minOffset */</span>
<a name="l00468"></a>00468                                 <span class="keywordflow">if</span> (e.GetOffset() &lt; minOffset)
<a name="l00469"></a>00469                                         minOffset = e.GetOffset();
<a name="l00470"></a>00470                         }
<a name="l00471"></a>00471                         <span class="keywordflow">else</span>
<a name="l00472"></a>00472                         {
<a name="l00473"></a>00473                                 e.SetOffset(0);
<a name="l00474"></a>00474                         }
<a name="l00475"></a>00475                         
<a name="l00476"></a>00476                         <span class="comment">/* set the parameter location (or 0) */</span>
<a name="l00477"></a>00477                         <span class="keywordflow">if</span> (!inParam)
<a name="l00478"></a>00478                                 varLoc = 0;
<a name="l00479"></a>00479                         <span class="keywordflow">else</span>
<a name="l00480"></a>00480                         {
<a name="l00481"></a>00481                                 varLoc++;
<a name="l00482"></a>00482                                 <span class="keywordflow">if</span> (parent != null)
<a name="l00483"></a>00483                                         parent.SetNumParams(varLoc);
<a name="l00484"></a>00484                         }
<a name="l00485"></a>00485                         
<a name="l00486"></a>00486                         <span class="comment">/* set the parameter number (or 0) */</span>
<a name="l00487"></a>00487                         e.location = varLoc;
<a name="l00488"></a>00488                         
<a name="l00489"></a>00489                         <span class="comment">/* make sure isFunc is false so we don't consider a variable inside a method to be a method */</span>
<a name="l00490"></a>00490                         isFunc = <span class="keyword">false</span>;
<a name="l00491"></a>00491                         
<a name="l00492"></a>00492                         <span class="keywordflow">return</span> e;
<a name="l00493"></a>00493                 }
<a name="l00494"></a>00494                 
<a name="l00498"></a>00498                 <span class="keywordtype">void</span> AccessModifier(out Globals.Symbol access)
<a name="l00499"></a>00499                 {
<a name="l00500"></a>00500                         access = Globals.Symbol._private;
<a name="l00501"></a>00501                         
<a name="l00502"></a>00502                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._public)
<a name="l00503"></a>00503                         {
<a name="l00504"></a>00504                                 match(Globals.Symbol._public);
<a name="l00505"></a>00505                                 access = Globals.token;
<a name="l00506"></a>00506                         }
<a name="l00507"></a>00507                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._static)
<a name="l00508"></a>00508                         {
<a name="l00509"></a>00509                                 match(Globals.Symbol._static);
<a name="l00510"></a>00510                                 access = Globals.token;
<a name="l00511"></a>00511                         }
<a name="l00512"></a>00512                 }
<a name="l00513"></a>00513                 
<a name="l00517"></a>00517                 <span class="keywordtype">void</span> Addop()
<a name="l00518"></a>00518                 {
<a name="l00519"></a>00519                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l00520"></a>00520                         {
<a name="l00521"></a>00521                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._addop:
<a name="l00522"></a>00522                                         match(Globals.Symbol._addop);
<a name="l00523"></a>00523                                         <span class="keywordflow">break</span>;
<a name="l00524"></a>00524                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._signop:
<a name="l00525"></a>00525                                         match(Globals.Symbol._signop);
<a name="l00526"></a>00526                                         <span class="keywordflow">break</span>;
<a name="l00527"></a>00527                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._orop:
<a name="l00528"></a>00528                                         match(Globals.Symbol._orop);
<a name="l00529"></a>00529                                         <span class="keywordflow">break</span>;
<a name="l00530"></a>00530                                 <span class="keywordflow">default</span>:
<a name="l00531"></a>00531                                         Error(Globals.curLine, <span class="stringliteral">"+, -, or ||"</span>, Globals.lexeme);
<a name="l00532"></a>00532                                         <span class="keywordflow">break</span>;
<a name="l00533"></a>00533                         }
<a name="l00534"></a>00534                 }
<a name="l00535"></a>00535                 
<a name="l00539"></a>00539                 <span class="keywordtype">void</span> AssignStat()
<a name="l00540"></a>00540                 {
<a name="l00541"></a>00541                         Element getMethod = null;
<a name="l00542"></a>00542                         <span class="keywordtype">bool</span> standAlone = <span class="keyword">true</span>;
<a name="l00543"></a>00543                         string printAssignmentVar = <span class="stringliteral">""</span>;
<a name="l00544"></a>00544                         string possibleReturnVariable = Globals.lexeme;
<a name="l00545"></a>00545                         
<a name="l00546"></a>00546                         <span class="comment">/* make sure the variable is defined */</span>
<a name="l00547"></a>00547                         Element e = Globals.symTab.Lookup(Globals.lexeme);
<a name="l00548"></a>00548                         <span class="keywordflow">if</span> (e == null)
<a name="l00549"></a>00549                         {
<a name="l00550"></a>00550                                 Warning(<span class="stringliteral">"warning: "</span> + Globals.filename + <span class="stringliteral">":"</span> + Globals.curLine + <span class="stringliteral">": undeclared variable \""</span> + Globals.lexeme + <span class="stringliteral">"\""</span>);
<a name="l00551"></a>00551                                 e = AddSymbol(Globals.Symbol._unknown, Globals.Symbol._unknown, Globals.Symbol._unknown, Globals.Symbol._unknown, Globals.lexeme, Globals.depth);
<a name="l00552"></a>00552                         }
<a name="l00553"></a>00553                         match(Globals.Symbol._identifier);
<a name="l00554"></a>00554                         
<a name="l00555"></a>00555                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._assignop)
<a name="l00556"></a>00556                         {
<a name="l00557"></a>00557                                 standAlone = <span class="keyword">false</span>;
<a name="l00558"></a>00558                                 match(Globals.Symbol._assignop);
<a name="l00559"></a>00559                         }
<a name="l00560"></a>00560                         
<a name="l00561"></a>00561                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._period)
<a name="l00562"></a>00562                                 AssignTail(ref getMethod, e, <span class="stringliteral">""</span>, standAlone, out printAssignmentVar);
<a name="l00563"></a>00563                         <span class="keywordflow">else</span> <span class="keywordflow">if</span>(Globals.token == Globals.Symbol._identifier)
<a name="l00564"></a>00564                                 AssignTail(ref getMethod, null, possibleReturnVariable, standAlone, out printAssignmentVar);
<a name="l00565"></a>00565                         <span class="keywordflow">else</span>
<a name="l00566"></a>00566                         {
<a name="l00567"></a>00567                                 string rhside;
<a name="l00568"></a>00568                                 Expr(<span class="stringliteral">""</span>, out rhside);
<a name="l00569"></a>00569                                 
<a name="l00570"></a>00570                                 <span class="keywordflow">if</span> (rhside != <span class="stringliteral">""</span>)
<a name="l00571"></a>00571                                 {
<a name="l00572"></a>00572                                         <span class="keywordflow">if</span> (!CCType.IsNumeric(rhside))
<a name="l00573"></a>00573                                         {
<a name="l00574"></a>00574                                                 Element rh = Globals.symTab.Lookup(rhside);
<a name="l00575"></a>00575                                                 
<a name="l00576"></a>00576                                                 <span class="keywordflow">if</span> (rh.GetEType() == Element.EntryType.constType)
<a name="l00577"></a>00577                                                         emit(<span class="stringliteral">"  "</span> + e.GetOffsetName() + <span class="stringliteral">" = "</span> + rh.GetIntegerValue() + <span class="stringliteral">"\n"</span>);
<a name="l00578"></a>00578                                                 <span class="keywordflow">else</span>
<a name="l00579"></a>00579                                                         emit(<span class="stringliteral">"  "</span> + e.GetOffsetName() + <span class="stringliteral">" = "</span> + rh.GetOffsetName() + <span class="stringliteral">"\n"</span>);
<a name="l00580"></a>00580                                         }
<a name="l00581"></a>00581                                         <span class="keywordflow">else</span>
<a name="l00582"></a>00582                                         {
<a name="l00583"></a>00583                                                 emit(<span class="stringliteral">"  "</span> + e.GetOffsetName() + <span class="stringliteral">" = "</span> + rhside + <span class="stringliteral">"\n"</span>);
<a name="l00584"></a>00584                                         }
<a name="l00585"></a>00585                                 }
<a name="l00586"></a>00586                         }
<a name="l00587"></a>00587                         
<a name="l00588"></a>00588                         <span class="keywordflow">if</span> (printAssignmentVar != <span class="stringliteral">""</span>)
<a name="l00589"></a>00589                         {
<a name="l00590"></a>00590                                 <span class="keywordflow">if</span> (printAssignmentVar.Length &gt; 2)
<a name="l00591"></a>00591                                 {
<a name="l00592"></a>00592                                         <span class="keywordflow">if</span> (printAssignmentVar.Substring(0, 3) != <span class="stringliteral">"_BP"</span>)
<a name="l00593"></a>00593                                         {
<a name="l00594"></a>00594                                                 Element pav = Globals.symTab.Lookup(printAssignmentVar);
<a name="l00595"></a>00595                                                 emit(<span class="stringliteral">"  "</span> + e.GetOffsetName() + <span class="stringliteral">" = "</span> + pav.GetOffsetName() + <span class="stringliteral">"\n"</span>);
<a name="l00596"></a>00596                                         }
<a name="l00597"></a>00597                                 }
<a name="l00598"></a>00598                                 <span class="keywordflow">else</span>
<a name="l00599"></a>00599                                 {
<a name="l00600"></a>00600                                         Element pav = Globals.symTab.Lookup(printAssignmentVar);
<a name="l00601"></a>00601                                         emit(<span class="stringliteral">"  "</span> + e.GetOffsetName() + <span class="stringliteral">" = "</span> + pav.GetOffsetName() + <span class="stringliteral">"\n"</span>);
<a name="l00602"></a>00602                                 }
<a name="l00603"></a>00603                         }
<a name="l00604"></a>00604                 }
<a name="l00605"></a>00605                 
<a name="l00609"></a>00609                 <span class="keywordtype">void</span> AssignTail(ref Element getMethod, Element parent, string retLoc, <span class="keywordtype">bool</span> standAloneCall, out string rhSide)
<a name="l00610"></a>00610                 {
<a name="l00611"></a>00611                         <span class="keywordflow">if</span> (standAloneCall)
<a name="l00612"></a>00612                                 match(Globals.Symbol._period);
<a name="l00613"></a>00613                         
<a name="l00614"></a>00614                         <span class="comment">/* grab the next variable and make sure it's valid */</span>
<a name="l00615"></a>00615                         Element e = Globals.symTab.Lookup(Globals.lexeme);
<a name="l00616"></a>00616                         <span class="keywordflow">if</span> (e == null)
<a name="l00617"></a>00617                         {
<a name="l00618"></a>00618                                 Warning(<span class="stringliteral">"warning: "</span> + Globals.filename + <span class="stringliteral">":"</span> + Globals.curLine + <span class="stringliteral">": undeclared variable \""</span> + Globals.lexeme + <span class="stringliteral">"\""</span>);
<a name="l00619"></a>00619                                 e = AddSymbol(Globals.Symbol._unknown, Globals.Symbol._unknown, Globals.Symbol._unknown, Globals.Symbol._unknown, Globals.lexeme, Globals.depth);
<a name="l00620"></a>00620                         }
<a name="l00621"></a>00621                         
<a name="l00622"></a>00622                         string prnt = Globals.lexeme;
<a name="l00623"></a>00623                         match(Globals.Symbol._identifier);
<a name="l00624"></a>00624                         
<a name="l00625"></a>00625                         <span class="keywordflow">if</span> ((Globals.token == Globals.Symbol._period) || standAloneCall)
<a name="l00626"></a>00626                         {
<a name="l00627"></a>00627                                 <span class="keywordflow">if</span> (parent == null)
<a name="l00628"></a>00628                                         parent = Globals.symTab.Lookup(prnt);
<a name="l00629"></a>00629                                 
<a name="l00630"></a>00630                                 string nsaMethod;
<a name="l00631"></a>00631                                 rhSide = <span class="stringliteral">""</span>;
<a name="l00632"></a>00632                                 getMethod = e;
<a name="l00633"></a>00633                                 MethodCall(standAloneCall, out nsaMethod);
<a name="l00634"></a>00634                                 
<a name="l00635"></a>00635                                 <span class="keywordflow">if</span> (parent == null)
<a name="l00636"></a>00636                                 {
<a name="l00637"></a>00637                                         <span class="keywordflow">if</span> (nsaMethod == <span class="stringliteral">""</span>)
<a name="l00638"></a>00638                                                 emit(<span class="stringliteral">"\n  CALL "</span> + e.GetName() + <span class="stringliteral">"\n"</span>);
<a name="l00639"></a>00639                                         <span class="keywordflow">else</span>
<a name="l00640"></a>00640                                                 emit(<span class="stringliteral">"\n  CALL "</span> + nsaMethod + <span class="stringliteral">"\n"</span>);
<a name="l00641"></a>00641                                 }
<a name="l00642"></a>00642                                 <span class="keywordflow">else</span>
<a name="l00643"></a>00643                                 {
<a name="l00644"></a>00644                                         <span class="keywordflow">if</span> (nsaMethod == <span class="stringliteral">""</span>)
<a name="l00645"></a>00645                                                 emit(<span class="stringliteral">"\n  CALL "</span> + parent.GetName() + <span class="stringliteral">"."</span> + e.GetName() + <span class="stringliteral">"\n"</span>);
<a name="l00646"></a>00646                                         <span class="keywordflow">else</span>
<a name="l00647"></a>00647                                                 emit(<span class="stringliteral">"\n  CALL "</span> + parent.GetName() + <span class="stringliteral">"."</span> + nsaMethod + <span class="stringliteral">"\n"</span>);
<a name="l00648"></a>00648                                 }
<a name="l00649"></a>00649                                 
<a name="l00650"></a>00650                                 <span class="keywordflow">if</span> (retLoc.Length &gt; 0)
<a name="l00651"></a>00651                                 {
<a name="l00652"></a>00652                                         Element r = Globals.symTab.Lookup(retLoc);
<a name="l00653"></a>00653                                         emit(<span class="stringliteral">"  "</span> + r.GetOffsetName() + <span class="stringliteral">" = _AX\n"</span>);
<a name="l00654"></a>00654                                 }
<a name="l00655"></a>00655                         }
<a name="l00656"></a>00656                         <span class="keywordflow">else</span>
<a name="l00657"></a>00657                         {
<a name="l00658"></a>00658                                 string right_lexeme;
<a name="l00659"></a>00659                                 ShortExpr(e.GetName(), out right_lexeme);
<a name="l00660"></a>00660                                 
<a name="l00661"></a>00661                                 <span class="keywordflow">if</span> (retLoc.Length &gt; 0)
<a name="l00662"></a>00662                                 {
<a name="l00663"></a>00663                                         rhSide = <span class="stringliteral">""</span>;
<a name="l00664"></a>00664                                         Element l = Globals.symTab.Lookup(retLoc);
<a name="l00665"></a>00665                                         Element r = Globals.symTab.Lookup(right_lexeme);
<a name="l00666"></a>00666                                         
<a name="l00667"></a>00667                                         <span class="keywordflow">if</span> (r.GetEType() == Element.EntryType.constType)
<a name="l00668"></a>00668                                                 emit(<span class="stringliteral">"  "</span> + l.GetOffsetName() + <span class="stringliteral">" = "</span> + r.GetIntegerValue() + <span class="stringliteral">"\n"</span>);
<a name="l00669"></a>00669                                         <span class="keywordflow">else</span>
<a name="l00670"></a>00670                                                 emit(<span class="stringliteral">"  "</span> + l.GetOffsetName() + <span class="stringliteral">" = "</span> + r.GetOffsetName() + <span class="stringliteral">"\n"</span>);
<a name="l00671"></a>00671                                 }
<a name="l00672"></a>00672                                 <span class="keywordflow">else</span>
<a name="l00673"></a>00673                                         rhSide = right_lexeme;
<a name="l00674"></a>00674                         }
<a name="l00675"></a>00675                 }
<a name="l00676"></a>00676                 
<a name="l00677"></a>00677                 
<a name="l00681"></a>00681                 <span class="keywordtype">void</span> BaseClass()
<a name="l00682"></a>00682                 {
<a name="l00683"></a>00683                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._colon)
<a name="l00684"></a>00684                         {
<a name="l00685"></a>00685                                 match(Globals.Symbol._colon);
<a name="l00686"></a>00686                                 ClassOrNamespace();
<a name="l00687"></a>00687                         }
<a name="l00688"></a>00688                 }
<a name="l00689"></a>00689                 
<a name="l00693"></a>00693                 <span class="keywordtype">void</span> Classes()
<a name="l00694"></a>00694                 {
<a name="l00695"></a>00695                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l00696"></a>00696                         {
<a name="l00697"></a>00697                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._public:
<a name="l00698"></a>00698                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._static:
<a name="l00699"></a>00699                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._class:
<a name="l00700"></a>00700                                         ClassesDecl();
<a name="l00701"></a>00701                                         Classes();
<a name="l00702"></a>00702                                         <span class="keywordflow">break</span>;
<a name="l00703"></a>00703                                 <span class="keywordflow">default</span>:
<a name="l00704"></a>00704                                         <span class="keywordflow">break</span>;
<a name="l00705"></a>00705                         }
<a name="l00706"></a>00706                 }
<a name="l00707"></a>00707                 
<a name="l00711"></a>00711                 <span class="keywordtype">void</span> ClassesDecl()
<a name="l00712"></a>00712                 {
<a name="l00713"></a>00713                         Globals.Symbol accMod, type = Globals.Symbol._class;
<a name="l00714"></a>00714                         <span class="keywordtype">int</span> dep = Globals.depth;
<a name="l00715"></a>00715                         classSize = 0;
<a name="l00716"></a>00716                         
<a name="l00717"></a>00717                         AccessModifier(out accMod);
<a name="l00718"></a>00718                         match(Globals.Symbol._class);
<a name="l00719"></a>00719                         
<a name="l00720"></a>00720                         <span class="comment">/* add the class to the symbol table */</span>
<a name="l00721"></a>00721                         Element c = AddSymbol(Globals.Symbol._unknown, accMod, type, Globals.token, Globals.lexeme, Globals.depth);
<a name="l00722"></a>00722                         
<a name="l00723"></a>00723                         <span class="comment">/* match the identifier and get the next token+lexeme */</span>
<a name="l00724"></a>00724                         match(Globals.Symbol._identifier);
<a name="l00725"></a>00725                         
<a name="l00726"></a>00726                         BaseClass();
<a name="l00727"></a>00727                         match(Globals.Symbol._lbrace);
<a name="l00728"></a>00728                         
<a name="l00729"></a>00729                         <span class="comment">/* find out which path we need to go on */</span>
<a name="l00730"></a>00730                         Composite();
<a name="l00731"></a>00731                         
<a name="l00732"></a>00732                         match(Globals.Symbol._rbrace);
<a name="l00733"></a>00733                         
<a name="l00734"></a>00734                         <span class="comment">/* set the class's size */</span>
<a name="l00735"></a>00735                         c.SetSizeOfLocals(classSize);
<a name="l00736"></a>00736                 }
<a name="l00737"></a>00737                 
<a name="l00741"></a>00741                 <span class="keywordtype">void</span> ClassOrNamespace()
<a name="l00742"></a>00742                 {
<a name="l00743"></a>00743                         match(Globals.Symbol._identifier);
<a name="l00744"></a>00744                         ClassOrNamespaceTail();
<a name="l00745"></a>00745                 }
<a name="l00746"></a>00746                 
<a name="l00750"></a>00750                 <span class="keywordtype">void</span> ClassOrNamespaceTail()
<a name="l00751"></a>00751                 {
<a name="l00752"></a>00752                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l00753"></a>00753                         {
<a name="l00754"></a>00754                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._period:
<a name="l00755"></a>00755                                         match(Globals.Symbol._period);
<a name="l00756"></a>00756                                         ClassOrNamespace();
<a name="l00757"></a>00757                                         <span class="keywordflow">break</span>;
<a name="l00758"></a>00758                                 <span class="keywordflow">default</span>:
<a name="l00759"></a>00759                                         <span class="keywordflow">break</span>;
<a name="l00760"></a>00760                         }
<a name="l00761"></a>00761                 }
<a name="l00762"></a>00762                 
<a name="l00766"></a>00766                 <span class="keywordtype">void</span> Composite()
<a name="l00767"></a>00767                 {
<a name="l00768"></a>00768                         Globals.Symbol accMod, type = Globals.Symbol._unknown;
<a name="l00769"></a>00769                         string idt;
<a name="l00770"></a>00770                         
<a name="l00771"></a>00771                         localoffset = 4;
<a name="l00772"></a>00772                         offsetmul = 1;
<a name="l00773"></a>00773 
<a name="l00774"></a>00774                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l00775"></a>00775                         {
<a name="l00776"></a>00776                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._public:
<a name="l00777"></a>00777                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._static:
<a name="l00778"></a>00778                                         AccessModifier(out accMod);
<a name="l00779"></a>00779                                         
<a name="l00780"></a>00780                                         <span class="comment">/* Assignment 5 (initial semantic processing) was horribly</span>
<a name="l00781"></a>00781 <span class="comment">                                         * broken because of this line--Type is non-nullable but isn't</span>
<a name="l00782"></a>00782 <span class="comment">                                         * needed for the constructor.  Simply making it nullable would</span>
<a name="l00783"></a>00783 <span class="comment">                                         * open up errors on other lines where a type *is* needed.</span>
<a name="l00784"></a>00784 <span class="comment">                                         * </span>
<a name="l00785"></a>00785 <span class="comment">                                         * Instead of doing that, check to see if the current lexeme</span>
<a name="l00786"></a>00786 <span class="comment">                                         * (Globals.lexeme) is the same as the previous one that was</span>
<a name="l00787"></a>00787 <span class="comment">                                         * added to the symbol table (current.lexeme).</span>
<a name="l00788"></a>00788 <span class="comment">                                         */</span>
<a name="l00789"></a>00789                                         <span class="keywordflow">if</span> (currentclass.GetName() == Globals.lexeme)
<a name="l00790"></a>00790                                         {
<a name="l00791"></a>00791                                                 type = Globals.Symbol._constructor;
<a name="l00792"></a>00792                                                 ConstructorDecl(accMod);
<a name="l00793"></a>00793                                         }
<a name="l00794"></a>00794                                         <span class="keywordflow">else</span>
<a name="l00795"></a>00795                                         {
<a name="l00796"></a>00796                                                 Type(out type);
<a name="l00797"></a>00797                                                 MainIDT(accMod, type, out idt);
<a name="l00798"></a>00798                                                 CompositeTail(idt);
<a name="l00799"></a>00799                                         }
<a name="l00800"></a>00800                                         Composite();
<a name="l00801"></a>00801                                         <span class="keywordflow">break</span>;
<a name="l00802"></a>00802                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._int:
<a name="l00803"></a>00803                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._float:
<a name="l00804"></a>00804                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._char:
<a name="l00805"></a>00805                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._void:
<a name="l00806"></a>00806                                         Type(out type);
<a name="l00807"></a>00807                                         MainIDT(Globals.Symbol._public, type, out idt);
<a name="l00808"></a>00808                                         CompositeTail(idt);
<a name="l00809"></a>00809                                         Composite();
<a name="l00810"></a>00810                                         <span class="keywordflow">break</span>;
<a name="l00811"></a>00811                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._const:
<a name="l00812"></a>00812                                         IdentifierDecl();
<a name="l00813"></a>00813                                         <span class="keywordflow">break</span>;
<a name="l00814"></a>00814                                 <span class="keywordflow">default</span>:
<a name="l00815"></a>00815                                         <span class="keywordflow">break</span>;
<a name="l00816"></a>00816                         }
<a name="l00817"></a>00817                 }
<a name="l00818"></a>00818                 
<a name="l00822"></a>00822                 <span class="keywordtype">void</span> CompositeTail(string idt)
<a name="l00823"></a>00823                 {
<a name="l00824"></a>00824                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l00825"></a>00825                         {
<a name="l00826"></a>00826                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._return:
<a name="l00827"></a>00827                                         match(Globals.Symbol._return);
<a name="l00828"></a>00828                                         match(Globals.Symbol._semicolon);
<a name="l00829"></a>00829                                         match(Globals.Symbol._rbrace);
<a name="l00830"></a>00830                                         <span class="keywordflow">break</span>;
<a name="l00831"></a>00831                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._lparen:
<a name="l00832"></a>00832                                         Element m = Globals.symTab.Lookup(idt);
<a name="l00833"></a>00833                                         emit(<span class="stringliteral">"PROC "</span> + m.parent.GetName() + <span class="stringliteral">"."</span> + m.GetName() + <span class="stringliteral">"\n"</span>);
<a name="l00834"></a>00834                                         
<a name="l00835"></a>00835                                         match(Globals.Symbol._lparen);
<a name="l00836"></a>00836                                         localoffset = 4;
<a name="l00837"></a>00837                                         offsetmul = 1;
<a name="l00838"></a>00838                                         ParamList();
<a name="l00839"></a>00839                                         match(Globals.Symbol._rparen);
<a name="l00840"></a>00840                                         match(Globals.Symbol._lbrace);
<a name="l00841"></a>00841                                         localoffset = -2;
<a name="l00842"></a>00842                                         offsetmul = -1;
<a name="l00843"></a>00843                                         isFunc = <span class="keyword">false</span>; <span class="comment">/* off to bigger and better identifiers! */</span>
<a name="l00844"></a>00844                                         IdentifierList();
<a name="l00845"></a>00845                                         StatList();
<a name="l00846"></a>00846                                         ReturnLine(nowMain);
<a name="l00847"></a>00847                                         match(Globals.Symbol._rbrace);
<a name="l00848"></a>00848                                         
<a name="l00849"></a>00849                                         emit(<span class="stringliteral">"ENDP "</span> + m.parent.GetName() + <span class="stringliteral">"."</span> + m.GetName() + <span class="stringliteral">"\n"</span>);
<a name="l00850"></a>00850                                         <span class="keywordflow">break</span>;
<a name="l00851"></a>00851                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._semicolon:
<a name="l00852"></a>00852                                         match(Globals.Symbol._semicolon);
<a name="l00853"></a>00853                                         <span class="keywordflow">break</span>;
<a name="l00854"></a>00854                                 <span class="keywordflow">default</span>:
<a name="l00855"></a>00855                                         <span class="keywordflow">break</span>;
<a name="l00856"></a>00856                         }
<a name="l00857"></a>00857                 }
<a name="l00858"></a>00858                 
<a name="l00862"></a>00862                 Element ConstAssign(Globals.Symbol accMod, Globals.Symbol type)
<a name="l00863"></a>00863                 {
<a name="l00864"></a>00864                         Element e = AddSymbol(Globals.Symbol._unknown, accMod, type, Globals.Symbol._const, Globals.lexeme, Globals.depth);
<a name="l00865"></a>00865                         e.SetConstant();
<a name="l00866"></a>00866                         
<a name="l00867"></a>00867                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)type)
<a name="l00868"></a>00868                         {
<a name="l00869"></a>00869                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._char:
<a name="l00870"></a>00870                                         e.vtype = Element.VarType.charType;
<a name="l00871"></a>00871                                         <span class="keywordflow">break</span>;
<a name="l00872"></a>00872                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._int:
<a name="l00873"></a>00873                                         e.vtype = Element.VarType.intType;
<a name="l00874"></a>00874                                         <span class="keywordflow">break</span>;
<a name="l00875"></a>00875                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._float:
<a name="l00876"></a>00876                                         e.vtype = Element.VarType.floatType;
<a name="l00877"></a>00877                                         <span class="keywordflow">break</span>;
<a name="l00878"></a>00878                                 <span class="keywordflow">default</span>:
<a name="l00879"></a>00879                                         e.vtype = Element.VarType.emptyType;
<a name="l00880"></a>00880                                         <span class="keywordflow">break</span>;
<a name="l00881"></a>00881                         }
<a name="l00882"></a>00882                         
<a name="l00883"></a>00883                         match(Globals.Symbol._identifier);
<a name="l00884"></a>00884                         match(Globals.Symbol._assignop);
<a name="l00885"></a>00885                         
<a name="l00886"></a>00886                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l00887"></a>00887                         {
<a name="l00888"></a>00888                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._number:
<a name="l00889"></a>00889                                         e.SetValue(Globals.value);
<a name="l00890"></a>00890                                         match(Globals.Symbol._number);
<a name="l00891"></a>00891                                         <span class="keywordflow">break</span>;
<a name="l00892"></a>00892                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._numfloat:
<a name="l00893"></a>00893                                         e.SetValue((<span class="keywordtype">float</span>)Globals.valueF);
<a name="l00894"></a>00894                                         match(Globals.Symbol._numfloat);
<a name="l00895"></a>00895                                         <span class="keywordflow">break</span>;
<a name="l00896"></a>00896                                 <span class="keywordflow">default</span>:
<a name="l00897"></a>00897                                         Error(Globals.curLine, <span class="stringliteral">"a numeric value"</span>, Globals.lexeme);
<a name="l00898"></a>00898                                         <span class="keywordflow">break</span>;
<a name="l00899"></a>00899                         }
<a name="l00900"></a>00900                         
<a name="l00901"></a>00901                         <span class="comment">/* mark the element as constant */</span>
<a name="l00902"></a>00902                         e.SetConstant();
<a name="l00903"></a>00903                         <span class="keywordflow">return</span> e;
<a name="l00904"></a>00904                 }
<a name="l00905"></a>00905                 
<a name="l00909"></a>00909                 <span class="keywordtype">void</span> ConstructorDecl(Globals.Symbol accMod)
<a name="l00910"></a>00910                 {
<a name="l00911"></a>00911                         Globals.Symbol type = Globals.Symbol._constructor;
<a name="l00912"></a>00912                         
<a name="l00913"></a>00913                         <span class="comment">/* add the constructor */</span>
<a name="l00914"></a>00914                         Element c = AddSymbol(Globals.Symbol._unknown, accMod, type, Globals.token, Globals.lexeme, Globals.depth);
<a name="l00915"></a>00915                         
<a name="l00916"></a>00916                         emit(<span class="stringliteral">"PROC "</span> + c.parent.GetName() + <span class="stringliteral">"."</span> + c.GetName() + <span class="stringliteral">"\n"</span>);
<a name="l00917"></a>00917                         match(Globals.Symbol._identifier);
<a name="l00918"></a>00918                         match(Globals.Symbol._lparen);
<a name="l00919"></a>00919                         localoffset = 4;
<a name="l00920"></a>00920                         offsetmul = 1;
<a name="l00921"></a>00921                         ParamList();
<a name="l00922"></a>00922                         match(Globals.Symbol._rparen);
<a name="l00923"></a>00923                         match(Globals.Symbol._lbrace);
<a name="l00924"></a>00924                         localoffset = -2;
<a name="l00925"></a>00925                         offsetmul = -1;
<a name="l00926"></a>00926                         IdentifierList();
<a name="l00927"></a>00927                         StatList();
<a name="l00928"></a>00928                         
<a name="l00929"></a>00929                         <span class="comment">/* set the constructor's size */</span>
<a name="l00930"></a>00930                         c.SetMethod(accMod);
<a name="l00931"></a>00931                         c.SetSizeOfLocals(Globals.symTab.GetDepthSize(Globals.depth));
<a name="l00932"></a>00932                         classSize += c.GetSizeOfLocals();
<a name="l00933"></a>00933                         
<a name="l00934"></a>00934                         match(Globals.Symbol._rbrace);
<a name="l00935"></a>00935                         emit(<span class="stringliteral">"ENDP "</span> + c.parent.GetName() + <span class="stringliteral">"."</span> + c.GetName() + <span class="stringliteral">"\n"</span>);
<a name="l00936"></a>00936                 }
<a name="l00937"></a>00937                 
<a name="l00941"></a>00941                 <span class="keywordtype">void</span> Expr(string left, out string right)
<a name="l00942"></a>00942                 {
<a name="l00943"></a>00943                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l00944"></a>00944                         {
<a name="l00945"></a>00945                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._identifier:
<a name="l00946"></a>00946                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._numfloat:
<a name="l00947"></a>00947                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._number:
<a name="l00948"></a>00948                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._lparen:
<a name="l00949"></a>00949                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._unarynot:
<a name="l00950"></a>00950                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._signop:
<a name="l00951"></a>00951                                         <span class="comment">//ShortExpr(left, out right);</span>
<a name="l00952"></a>00952                                         SimpleExpr(out right);
<a name="l00953"></a>00953                                         <span class="comment">//Relation();</span>
<a name="l00954"></a>00954                                         <span class="keywordflow">break</span>;
<a name="l00955"></a>00955                                 <span class="keywordflow">default</span>:
<a name="l00956"></a>00956                                         right = <span class="stringliteral">""</span>;
<a name="l00957"></a>00957                                         <span class="keywordflow">break</span>;
<a name="l00958"></a>00958                         }
<a name="l00959"></a>00959                 }
<a name="l00960"></a>00960                 
<a name="l00964"></a>00964                 <span class="keywordtype">void</span> Factor(out string mylex)
<a name="l00965"></a>00965                 {
<a name="l00966"></a>00966                         string fname;
<a name="l00967"></a>00967                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l00968"></a>00968                         {
<a name="l00969"></a>00969                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._identifier:
<a name="l00970"></a>00970                                         <span class="comment">/* make sure the variable is defined */</span>
<a name="l00971"></a>00971                                         Element e = Globals.symTab.Lookup(Globals.lexeme);
<a name="l00972"></a>00972                                         <span class="keywordflow">if</span> (e == null)
<a name="l00973"></a>00973                                                 Error(<span class="stringliteral">"error: "</span> + Globals.filename + <span class="stringliteral">":"</span> + Globals.curLine + <span class="stringliteral">": undeclared variable \""</span> + Globals.lexeme + <span class="stringliteral">"\""</span>);
<a name="l00974"></a>00974                                         
<a name="l00975"></a>00975                                         mylex = Globals.lexeme;
<a name="l00976"></a>00976                                         match(Globals.Symbol._identifier);
<a name="l00977"></a>00977                                         <span class="keywordflow">break</span>;
<a name="l00978"></a>00978                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._numfloat:
<a name="l00979"></a>00979                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._number:
<a name="l00980"></a>00980                                         mylex = Globals.lexeme;
<a name="l00981"></a>00981                                         match(Globals.token);
<a name="l00982"></a>00982                                         <span class="keywordflow">break</span>;
<a name="l00983"></a>00983                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._lparen:
<a name="l00984"></a>00984                                         <span class="comment">/* store the offsets, matching lparen resets them */</span>
<a name="l00985"></a>00985                                         <span class="keywordtype">int</span> lo = localoffset, om = offsetmul;
<a name="l00986"></a>00986                                         match(Globals.Symbol._lparen);
<a name="l00987"></a>00987                                         
<a name="l00988"></a>00988                                         <span class="comment">/* resetore the offsets */</span>
<a name="l00989"></a>00989                                         localoffset = lo;
<a name="l00990"></a>00990                                         offsetmul = om;
<a name="l00991"></a>00991                                         
<a name="l00992"></a>00992                                         inExpr = <span class="keyword">true</span>;
<a name="l00993"></a>00993                                         Expr(<span class="stringliteral">""</span>, out mylex);
<a name="l00994"></a>00994                                         inExpr = <span class="keyword">false</span>;
<a name="l00995"></a>00995                                         match(Globals.Symbol._rparen);
<a name="l00996"></a>00996                                         <span class="keywordflow">break</span>;
<a name="l00997"></a>00997                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._unarynot:
<a name="l00998"></a>00998                                         match(Globals.Symbol._unarynot);
<a name="l00999"></a>00999                                         Factor(out fname);
<a name="l01000"></a>01000                                         mylex = <span class="stringliteral">"!"</span> + fname;
<a name="l01001"></a>01001                                         <span class="keywordflow">break</span>;
<a name="l01002"></a>01002                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._signop:
<a name="l01003"></a>01003                                         Signop();
<a name="l01004"></a>01004                                         Factor(out fname);
<a name="l01005"></a>01005                                         
<a name="l01006"></a>01006                                         <span class="keywordflow">if</span> (CCType.IsNumeric(fname))
<a name="l01007"></a>01007                                         {
<a name="l01008"></a>01008                                                 mylex = <span class="stringliteral">"-"</span> + fname;
<a name="l01009"></a>01009                                         }
<a name="l01010"></a>01010                                         <span class="keywordflow">else</span>
<a name="l01011"></a>01011                                         {
<a name="l01012"></a>01012                                                 Element f = Globals.symTab.Lookup(fname);
<a name="l01013"></a>01013                                                 Element n = newtemp();
<a name="l01014"></a>01014                                                 
<a name="l01015"></a>01015                                                 <span class="keywordflow">if</span> (f.GetEType() == Element.EntryType.constType)
<a name="l01016"></a>01016                                                         emit(<span class="stringliteral">"  "</span> + n.GetOffsetName() + <span class="stringliteral">" = "</span> + f.GetIntegerValue() + <span class="stringliteral">"\n"</span>);
<a name="l01017"></a>01017                                                 <span class="keywordflow">else</span>
<a name="l01018"></a>01018                                                         emit(<span class="stringliteral">"  "</span> + n.GetOffsetName() + <span class="stringliteral">" = -"</span> + f.GetOffsetName() + <span class="stringliteral">"\n"</span>);
<a name="l01019"></a>01019                                                 
<a name="l01020"></a>01020                                                 mylex = n.GetName();
<a name="l01021"></a>01021                                         }
<a name="l01022"></a>01022                                         <span class="keywordflow">break</span>;
<a name="l01023"></a>01023                                 <span class="keywordflow">default</span>:
<a name="l01024"></a>01024                                         Error(Globals.curLine, <span class="stringliteral">"identifier, number, (, !, or -"</span>, Globals.Tokens[(<span class="keywordtype">int</span>)Globals.token]);
<a name="l01025"></a>01025                                         mylex = <span class="stringliteral">""</span>;
<a name="l01026"></a>01026                                         <span class="keywordflow">break</span>;
<a name="l01027"></a>01027                         }
<a name="l01028"></a>01028                 }
<a name="l01029"></a>01029                 
<a name="l01033"></a>01033                 <span class="keywordtype">void</span> IdentifierDecl()
<a name="l01034"></a>01034                 {
<a name="l01035"></a>01035                         <span class="comment">/* variables to hold variable information */</span>
<a name="l01036"></a>01036                         Globals.Symbol accMod = Globals.Symbol._unknown;
<a name="l01037"></a>01037                         Globals.Symbol type = Globals.Symbol._unknown;
<a name="l01038"></a>01038                         
<a name="l01039"></a>01039                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01040"></a>01040                         {
<a name="l01041"></a>01041                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._public:
<a name="l01042"></a>01042                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._static:
<a name="l01043"></a>01043                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._private:
<a name="l01044"></a>01044                                         AccessModifier(out accMod);
<a name="l01045"></a>01045                                         <span class="keywordflow">break</span>;
<a name="l01046"></a>01046                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._int:
<a name="l01047"></a>01047                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._float:
<a name="l01048"></a>01048                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._char:
<a name="l01049"></a>01049                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._void:
<a name="l01050"></a>01050                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._const:
<a name="l01051"></a>01051                                         <span class="keywordflow">break</span>;
<a name="l01052"></a>01052                                 <span class="keywordflow">default</span>:
<a name="l01053"></a>01053                                         <span class="keywordflow">break</span>;
<a name="l01054"></a>01054                         }
<a name="l01055"></a>01055                         
<a name="l01056"></a>01056                         <span class="comment">/* ...and keep running the grammar rules */</span>
<a name="l01057"></a>01057                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._const)
<a name="l01058"></a>01058                         {
<a name="l01059"></a>01059                                 match(Globals.Symbol._const);
<a name="l01060"></a>01060                                 Type(out type);
<a name="l01061"></a>01061                                 Element c = IDTConst(accMod, type);
<a name="l01062"></a>01062                                 match(Globals.Symbol._semicolon);
<a name="l01063"></a>01063                                 c.SetConstant();
<a name="l01064"></a>01064                                 IdentifierList();
<a name="l01065"></a>01065                         }
<a name="l01066"></a>01066                         <span class="keywordflow">else</span>
<a name="l01067"></a>01067                         {
<a name="l01068"></a>01068                                 <span class="keywordflow">if</span> (currentclass.GetName() == Globals.lexeme)
<a name="l01069"></a>01069                                 {
<a name="l01070"></a>01070                                         type = Globals.Symbol._constructor;
<a name="l01071"></a>01071                                         ConstructorDecl(accMod);
<a name="l01072"></a>01072                                 }
<a name="l01073"></a>01073                                 <span class="keywordflow">else</span>
<a name="l01074"></a>01074                                 {
<a name="l01075"></a>01075                                         Type(out type);
<a name="l01076"></a>01076                                         IDT(accMod, type);
<a name="l01077"></a>01077                                         Element e = current;
<a name="l01078"></a>01078                                         
<a name="l01079"></a>01079                                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._lparen)
<a name="l01080"></a>01080                                         {
<a name="l01081"></a>01081                                                 emit(<span class="stringliteral">"PROC "</span> + e.parent.GetName() + <span class="stringliteral">"."</span> + e.GetName() + <span class="stringliteral">"\n"</span>);
<a name="l01082"></a>01082                                                 match(Globals.Symbol._lparen);
<a name="l01083"></a>01083                                                 localoffset = 4;
<a name="l01084"></a>01084                                                 offsetmul = 1;
<a name="l01085"></a>01085                                                 ParamList();
<a name="l01086"></a>01086                                                 match(Globals.Symbol._rparen);
<a name="l01087"></a>01087                                                 match(Globals.Symbol._lbrace);
<a name="l01088"></a>01088                                                 localoffset = 2;
<a name="l01089"></a>01089                                                 offsetmul = -1;
<a name="l01090"></a>01090                                                 IdentifierList();
<a name="l01091"></a>01091                                                 StatList();
<a name="l01092"></a>01092                                                 ReturnLine(nowMain);
<a name="l01093"></a>01093                                                 match(Globals.Symbol._rbrace);
<a name="l01094"></a>01094                                                 emit(<span class="stringliteral">"ENDP "</span> + e.parent.GetName() + <span class="stringliteral">"."</span> + e.GetName() + <span class="stringliteral">"\n"</span>);
<a name="l01095"></a>01095                                         }
<a name="l01096"></a>01096                                         <span class="keywordflow">else</span>
<a name="l01097"></a>01097                                                 match(Globals.Symbol._semicolon);
<a name="l01098"></a>01098                                 }
<a name="l01099"></a>01099                         }
<a name="l01100"></a>01100                 }
<a name="l01101"></a>01101                 
<a name="l01105"></a>01105                 <span class="keywordtype">void</span> IdentifierList()
<a name="l01106"></a>01106                 {
<a name="l01107"></a>01107                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01108"></a>01108                         {
<a name="l01109"></a>01109                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._int:
<a name="l01110"></a>01110                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._float:
<a name="l01111"></a>01111                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._char:
<a name="l01112"></a>01112                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._void:
<a name="l01113"></a>01113                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._public:
<a name="l01114"></a>01114                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._static:
<a name="l01115"></a>01115                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._const:
<a name="l01116"></a>01116                                         IdentifierDecl();
<a name="l01117"></a>01117                                         IdentifierList();
<a name="l01118"></a>01118                                         <span class="keywordflow">break</span>;
<a name="l01119"></a>01119                                 <span class="keywordflow">default</span>:
<a name="l01120"></a>01120                                         <span class="keywordflow">break</span>;
<a name="l01121"></a>01121                         }
<a name="l01122"></a>01122                 }
<a name="l01123"></a>01123                 
<a name="l01127"></a>01127                 <span class="keywordtype">void</span> Id_List()
<a name="l01128"></a>01128                 {
<a name="l01129"></a>01129                         <span class="comment">/* make sure that the variable exists */</span>
<a name="l01130"></a>01130                         Element r = Globals.symTab.Lookup(Globals.lexeme);
<a name="l01131"></a>01131                         <span class="keywordflow">if</span> (r == null)
<a name="l01132"></a>01132                                 Error(<span class="stringliteral">"error: "</span> + Globals.filename + <span class="stringliteral">":"</span> + Globals.curLine + <span class="stringliteral">": attempt to read undeclared variable "</span> + Globals.lexeme);
<a name="l01133"></a>01133                         
<a name="l01134"></a>01134                         emit(<span class="stringliteral">"  RDI "</span> + r.GetOffsetName() + <span class="stringliteral">"\n"</span>);
<a name="l01135"></a>01135                         match(Globals.Symbol._identifier);
<a name="l01136"></a>01136                         Id_List_Tail();
<a name="l01137"></a>01137                 }
<a name="l01138"></a>01138                 
<a name="l01142"></a>01142                 <span class="keywordtype">void</span> Id_List_Tail()
<a name="l01143"></a>01143                 {
<a name="l01144"></a>01144                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._comma)
<a name="l01145"></a>01145                         {
<a name="l01146"></a>01146                                 match(Globals.Symbol._comma);
<a name="l01147"></a>01147                                 
<a name="l01148"></a>01148                                 <span class="comment">/* make sure that the variable exists */</span>
<a name="l01149"></a>01149                                 Element r = Globals.symTab.Lookup(Globals.lexeme);
<a name="l01150"></a>01150                                 <span class="keywordflow">if</span> (r == null)
<a name="l01151"></a>01151                                         Error(<span class="stringliteral">"error: "</span> + Globals.filename + <span class="stringliteral">":"</span> + Globals.curLine + <span class="stringliteral">": attempt to read undeclared variable "</span> + Globals.lexeme);
<a name="l01152"></a>01152                         
<a name="l01153"></a>01153                                 emit(<span class="stringliteral">"  RDI "</span> + r.GetOffsetName() + <span class="stringliteral">"\n"</span>);
<a name="l01154"></a>01154                                 match(Globals.Symbol._identifier);
<a name="l01155"></a>01155                                 Id_List_Tail();
<a name="l01156"></a>01156                         }
<a name="l01157"></a>01157                 }
<a name="l01158"></a>01158                 
<a name="l01162"></a>01162                 <span class="keywordtype">void</span> IDT(Globals.Symbol access, Globals.Symbol type)
<a name="l01163"></a>01163                 {
<a name="l01164"></a>01164                         Element e = null;
<a name="l01165"></a>01165                         
<a name="l01166"></a>01166                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01167"></a>01167                         {
<a name="l01168"></a>01168                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._identifier:
<a name="l01169"></a>01169                                         e = AddSymbol(Globals.Symbol._unknown, access, type, Globals.token, Globals.lexeme, Globals.depth);
<a name="l01170"></a>01170                                                                                 
<a name="l01171"></a>01171                                         <span class="comment">/* if it's not a class but has a size of 0, reset the size -- hit a bug somewhere */</span>
<a name="l01172"></a>01172                                         <span class="keywordflow">if</span> ((e.GetSizeOfLocals() == 0) &amp;&amp;
<a name="l01173"></a>01173                                                 !((e.GetEType() == Element.EntryType.classType) || (e.GetEType() == Element.EntryType.methodType)))
<a name="l01174"></a>01174                                         {
<a name="l01175"></a>01175                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)e.GetVType())
<a name="l01176"></a>01176                                                 {
<a name="l01177"></a>01177                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.charType:
<a name="l01178"></a>01178                                                                 e.SetSizeOfLocals(e.GetSizeOfLocals() + 1);
<a name="l01179"></a>01179                                                                 <span class="keywordflow">break</span>;
<a name="l01180"></a>01180                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.intType:
<a name="l01181"></a>01181                                                                 e.SetSizeOfLocals(e.GetSizeOfLocals() + 2);
<a name="l01182"></a>01182                                                                 <span class="keywordflow">break</span>;
<a name="l01183"></a>01183                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.floatType:
<a name="l01184"></a>01184                                                                 e.SetSizeOfLocals(e.GetSizeOfLocals() + 4);
<a name="l01185"></a>01185                                                                 <span class="keywordflow">break</span>;
<a name="l01186"></a>01186                                                 }
<a name="l01187"></a>01187                                                 
<a name="l01188"></a>01188                                                 funcSize += e.GetSizeOfLocals();
<a name="l01189"></a>01189                                         }
<a name="l01190"></a>01190                                         
<a name="l01191"></a>01191                                         match(Globals.Symbol._identifier);
<a name="l01192"></a>01192                                         
<a name="l01193"></a>01193                                         <span class="comment">/* cheat and see if we have a method coming */</span>
<a name="l01194"></a>01194                                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._lparen)
<a name="l01195"></a>01195                                         {
<a name="l01196"></a>01196                                                 isFunc = <span class="keyword">true</span>;
<a name="l01197"></a>01197                                                 e.SetMethod(type);
<a name="l01198"></a>01198                                                 e.SetSizeOfLocals(0);
<a name="l01199"></a>01199                                                 currentmethod = e;
<a name="l01200"></a>01200                                         }
<a name="l01201"></a>01201                                         <span class="keywordflow">else</span>
<a name="l01202"></a>01202                                                 IDT(access, type);
<a name="l01203"></a>01203                                         
<a name="l01204"></a>01204                                         <span class="keywordflow">break</span>;
<a name="l01205"></a>01205                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._comma:
<a name="l01206"></a>01206                                         match(Globals.Symbol._comma);
<a name="l01207"></a>01207                                         IDT(access, type);
<a name="l01208"></a>01208                                         <span class="keywordflow">break</span>;
<a name="l01209"></a>01209                                 <span class="keywordflow">default</span>:
<a name="l01210"></a>01210                                         <span class="keywordflow">break</span>;
<a name="l01211"></a>01211                         }
<a name="l01212"></a>01212                 }
<a name="l01213"></a>01213                 
<a name="l01217"></a>01217                 Element IDTConst(Globals.Symbol accMod, Globals.Symbol type)
<a name="l01218"></a>01218                 {
<a name="l01219"></a>01219                         Element c = null;
<a name="l01220"></a>01220                         
<a name="l01221"></a>01221                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01222"></a>01222                         {
<a name="l01223"></a>01223                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._identifier:
<a name="l01224"></a>01224                                         c = ConstAssign(accMod, type);
<a name="l01225"></a>01225                                         IDTConst(accMod, type);
<a name="l01226"></a>01226                                         <span class="keywordflow">break</span>;
<a name="l01227"></a>01227                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._comma:
<a name="l01228"></a>01228                                         match(Globals.Symbol._comma);
<a name="l01229"></a>01229                                         IDTConst(accMod, type);
<a name="l01230"></a>01230                                         <span class="keywordflow">break</span>;
<a name="l01231"></a>01231                                 <span class="keywordflow">default</span>:
<a name="l01232"></a>01232                                         <span class="keywordflow">break</span>;
<a name="l01233"></a>01233                         }
<a name="l01234"></a>01234                         
<a name="l01235"></a>01235                         <span class="keywordflow">if</span> (c != null)
<a name="l01236"></a>01236                                 c.SetConstant();
<a name="l01237"></a>01237                         <span class="keywordflow">return</span> c;
<a name="l01238"></a>01238                 }
<a name="l01239"></a>01239                 
<a name="l01243"></a>01243                 <span class="keywordtype">void</span> In_Stat()
<a name="l01244"></a>01244                 {
<a name="l01245"></a>01245                         match(Globals.Symbol._read);
<a name="l01246"></a>01246                         match(Globals.Symbol._lparen);
<a name="l01247"></a>01247                         Id_List();
<a name="l01248"></a>01248                         match(Globals.Symbol._rparen);
<a name="l01249"></a>01249                 }
<a name="l01250"></a>01250                 
<a name="l01254"></a>01254                 <span class="keywordtype">void</span> IOStat()
<a name="l01255"></a>01255                 {
<a name="l01256"></a>01256                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01257"></a>01257                         {
<a name="l01258"></a>01258                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._read:
<a name="l01259"></a>01259                                         In_Stat();
<a name="l01260"></a>01260                                         <span class="keywordflow">break</span>;
<a name="l01261"></a>01261                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._write:
<a name="l01262"></a>01262                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._writeln:
<a name="l01263"></a>01263                                         Out_Stat();
<a name="l01264"></a>01264                                         <span class="keywordflow">break</span>;
<a name="l01265"></a>01265                                 <span class="keywordflow">default</span>:
<a name="l01266"></a>01266                                         Error(Globals.curLine, <span class="stringliteral">"'read', 'write', or 'writeln'"</span>, Globals.lexeme);
<a name="l01267"></a>01267                                         <span class="keywordflow">break</span>;
<a name="l01268"></a>01268                         }
<a name="l01269"></a>01269                 }
<a name="l01270"></a>01270                 
<a name="l01274"></a>01274                 <span class="keywordtype">void</span> MainIDT(Globals.Symbol accMod, Globals.Symbol type, out string idt)
<a name="l01275"></a>01275                 {
<a name="l01276"></a>01276                         idt = <span class="stringliteral">""</span>;
<a name="l01277"></a>01277                         <span class="comment">/* take care of the constructor */</span>
<a name="l01278"></a>01278                         <span class="keywordflow">if</span> (type == Globals.Symbol._constructor)
<a name="l01279"></a>01279                         {
<a name="l01280"></a>01280                                 IDT(accMod, type);
<a name="l01281"></a>01281                                 MainIDT(accMod, Globals.Symbol._unknown, out idt);
<a name="l01282"></a>01282                         }
<a name="l01283"></a>01283                         
<a name="l01284"></a>01284                         <span class="keywordflow">if</span> ((Globals.token == Globals.Symbol._identifier) &amp;&amp; (Globals.lexeme != <span class="stringliteral">"Main"</span>))
<a name="l01285"></a>01285                         {
<a name="l01286"></a>01286                                 string recur_idt;
<a name="l01287"></a>01287                                 idt = Globals.lexeme;
<a name="l01288"></a>01288                                 IDT(accMod, type);
<a name="l01289"></a>01289                                 MainIDT(accMod, type, out recur_idt);
<a name="l01290"></a>01290                         }
<a name="l01291"></a>01291                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Globals.lexeme == <span class="stringliteral">"Main"</span>)
<a name="l01292"></a>01292                         {
<a name="l01293"></a>01293                                 emit(<span class="stringliteral">"PROC "</span> + currentclass.GetName() + <span class="stringliteral">".Main\n"</span>);
<a name="l01294"></a>01294                                 
<a name="l01295"></a>01295                                 Element main = AddSymbol(Globals.Symbol._unknown, Globals.Symbol._unknown, Globals.Symbol._void, Globals.Symbol._void, <span class="stringliteral">"Main"</span>, Globals.depth);
<a name="l01296"></a>01296                                 main.parent = currentclass;
<a name="l01297"></a>01297                                 
<a name="l01298"></a>01298                                 match(<span class="stringliteral">"Main"</span>);
<a name="l01299"></a>01299                                 foundMain = <span class="keyword">true</span>;       <span class="comment">/* we found it! */</span>
<a name="l01300"></a>01300                                 nowMain = <span class="keyword">true</span>;         <span class="comment">/* hello! */</span>
<a name="l01301"></a>01301                                 
<a name="l01302"></a>01302                                 <span class="comment">/* save the TAC START line */</span>
<a name="l01303"></a>01303                                 TACstart = <span class="stringliteral">"START "</span> + currentclass.GetName() + <span class="stringliteral">".Main"</span>;
<a name="l01304"></a>01304                                 
<a name="l01305"></a>01305                                 match(Globals.Symbol._lparen);
<a name="l01306"></a>01306                                 match(Globals.Symbol._rparen);
<a name="l01307"></a>01307                                 match(Globals.Symbol._lbrace);
<a name="l01308"></a>01308                                 localoffset = -2;
<a name="l01309"></a>01309                                 offsetmul = -1;
<a name="l01310"></a>01310                                 IdentifierList();
<a name="l01311"></a>01311                                 StatList();
<a name="l01312"></a>01312                                 nowMain = <span class="keyword">false</span>;        <span class="comment">/* we're done with Main() */</span>
<a name="l01313"></a>01313                                 emit(<span class="stringliteral">"ENDP "</span> + currentclass.GetName() + <span class="stringliteral">".Main\n"</span>);
<a name="l01314"></a>01314                         }
<a name="l01315"></a>01315                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._comma)
<a name="l01316"></a>01316                         {
<a name="l01317"></a>01317                                 match(Globals.Symbol._comma);
<a name="l01318"></a>01318                                 match(Globals.Symbol._identifier);
<a name="l01319"></a>01319                                 MainIDT(accMod, type, out idt);
<a name="l01320"></a>01320                         }
<a name="l01321"></a>01321                 }
<a name="l01322"></a>01322                 
<a name="l01326"></a>01326                 <span class="keywordtype">void</span> MethodCall(<span class="keywordtype">bool</span> standAloneCall, out string methodName)
<a name="l01327"></a>01327                 {
<a name="l01328"></a>01328                         string pushStats = <span class="stringliteral">""</span>;
<a name="l01329"></a>01329                         
<a name="l01330"></a>01330                         <span class="keywordflow">if</span> (standAloneCall)
<a name="l01331"></a>01331                         {
<a name="l01332"></a>01332                                 methodName = <span class="stringliteral">""</span>;
<a name="l01333"></a>01333                                 match(Globals.Symbol._lparen);
<a name="l01334"></a>01334                                 Params(ref pushStats);
<a name="l01335"></a>01335                         }
<a name="l01336"></a>01336                         <span class="keywordflow">else</span>
<a name="l01337"></a>01337                         {
<a name="l01338"></a>01338                                 match(Globals.Symbol._period);
<a name="l01339"></a>01339                                 methodName = Globals.lexeme;
<a name="l01340"></a>01340                                 match(Globals.Symbol._identifier);
<a name="l01341"></a>01341                                 match(Globals.Symbol._lparen);
<a name="l01342"></a>01342                                 Params(ref pushStats);
<a name="l01343"></a>01343                         }
<a name="l01344"></a>01344                         
<a name="l01345"></a>01345                         <span class="comment">/* now print out the 'push' statements */</span>
<a name="l01346"></a>01346                         emit(pushStats);
<a name="l01347"></a>01347                         
<a name="l01348"></a>01348                         match(Globals.Symbol._rparen);
<a name="l01349"></a>01349                 }
<a name="l01350"></a>01350                 
<a name="l01354"></a>01354                 <span class="keywordtype">void</span> Mode(ref Globals.Symbol mode)
<a name="l01355"></a>01355                 {
<a name="l01356"></a>01356                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01357"></a>01357                         {
<a name="l01358"></a>01358                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._ref:
<a name="l01359"></a>01359                                         match(Globals.Symbol._ref);
<a name="l01360"></a>01360                                         mode = Globals.Symbol._ref;
<a name="l01361"></a>01361                                         <span class="keywordflow">break</span>;
<a name="l01362"></a>01362                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._out:
<a name="l01363"></a>01363                                         match(Globals.Symbol._out);
<a name="l01364"></a>01364                                         mode = Globals.Symbol._out;
<a name="l01365"></a>01365                                         <span class="keywordflow">break</span>;
<a name="l01366"></a>01366                                 <span class="keywordflow">default</span>:
<a name="l01367"></a>01367                                         <span class="keywordflow">break</span>;
<a name="l01368"></a>01368                         }
<a name="l01369"></a>01369                 }
<a name="l01370"></a>01370                 
<a name="l01374"></a>01374                 <span class="keywordtype">void</span> MoreFactor(string left_lexeme, out string right_lexeme, string oldmulchar, out string mulchar, <span class="keywordtype">bool</span> firstRound)
<a name="l01375"></a>01375                 {
<a name="l01376"></a>01376                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01377"></a>01377                         {
<a name="l01378"></a>01378                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._lparen:
<a name="l01379"></a>01379                                         mulchar=<span class="stringliteral">""</span>;
<a name="l01380"></a>01380                                         match(Globals.Symbol._lparen);
<a name="l01381"></a>01381                                         Expr(<span class="stringliteral">""</span>, out right_lexeme);
<a name="l01382"></a>01382                                         match(Globals.Symbol._rparen);
<a name="l01383"></a>01383                                         <span class="keywordflow">break</span>;
<a name="l01384"></a>01384                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._mulop:
<a name="l01385"></a>01385                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._andop:
<a name="l01386"></a>01386                                         Element t, lLex, rLex;
<a name="l01387"></a>01387                                         mulchar = Globals.lexeme;
<a name="l01388"></a>01388                                         oldmulchar = mulchar;
<a name="l01389"></a>01389                                         string fact_lexeme, lvar, rvar, recur_lexeme, newmulchar;
<a name="l01390"></a>01390                                         
<a name="l01391"></a>01391                                         Mulop();
<a name="l01392"></a>01392                                         Factor(out fact_lexeme);
<a name="l01393"></a>01393                                         MoreFactor(fact_lexeme, out recur_lexeme, oldmulchar, out newmulchar, <span class="keyword">false</span>);
<a name="l01394"></a>01394                                         
<a name="l01395"></a>01395                                         <span class="comment">/* look up the left and right values */</span>
<a name="l01396"></a>01396                                         lLex = Globals.symTab.Lookup(left_lexeme);
<a name="l01397"></a>01397                                         <span class="keywordflow">if</span> (recur_lexeme == <span class="stringliteral">""</span>)
<a name="l01398"></a>01398                                                 rLex = Globals.symTab.Lookup(fact_lexeme);
<a name="l01399"></a>01399                                         <span class="keywordflow">else</span>
<a name="l01400"></a>01400                                                 rLex = Globals.symTab.Lookup(recur_lexeme);
<a name="l01401"></a>01401                                         
<a name="l01402"></a>01402                                         <span class="comment">/* ...and get string values for them */</span>
<a name="l01403"></a>01403                                         <span class="keywordflow">if</span> (lLex != null)
<a name="l01404"></a>01404                                         {
<a name="l01405"></a>01405                                                 <span class="keywordflow">if</span> (lLex.GetEType() == Element.EntryType.constType)
<a name="l01406"></a>01406                                                         lvar = lLex.GetIntegerValue().ToString();
<a name="l01407"></a>01407                                                 <span class="keywordflow">else</span>
<a name="l01408"></a>01408                                                         lvar = lLex.GetOffsetName();
<a name="l01409"></a>01409                                         }
<a name="l01410"></a>01410                                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (CCType.IsNumeric(left_lexeme))
<a name="l01411"></a>01411                                                 lvar = left_lexeme;
<a name="l01412"></a>01412                                         <span class="keywordflow">else</span>
<a name="l01413"></a>01413                                                 lvar = <span class="stringliteral">""</span>;
<a name="l01414"></a>01414                                         
<a name="l01415"></a>01415                                         <span class="keywordflow">if</span> (rLex != null)
<a name="l01416"></a>01416                                         {
<a name="l01417"></a>01417                                                 <span class="keywordflow">if</span> (rLex.GetEType() == Element.EntryType.constType)
<a name="l01418"></a>01418                                                         rvar = rLex.GetIntegerValue().ToString();
<a name="l01419"></a>01419                                                 <span class="keywordflow">else</span>
<a name="l01420"></a>01420                                                         rvar = rLex.GetOffsetName();
<a name="l01421"></a>01421                                         }
<a name="l01422"></a>01422                                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (CCType.IsNumeric(fact_lexeme))
<a name="l01423"></a>01423                                                 rvar = fact_lexeme;
<a name="l01424"></a>01424                                         <span class="keywordflow">else</span>
<a name="l01425"></a>01425                                                 rvar = <span class="stringliteral">""</span>;
<a name="l01426"></a>01426                                         
<a name="l01427"></a>01427                                         t = newtemp();
<a name="l01428"></a>01428                                         
<a name="l01429"></a>01429                                         emit(<span class="stringliteral">"  "</span> + t.GetOffsetName() + <span class="stringliteral">" = "</span> + lvar + <span class="stringliteral">" "</span> + mulchar + <span class="stringliteral">" "</span> + rvar + <span class="stringliteral">"\n"</span>);
<a name="l01430"></a>01430                                         right_lexeme = t.GetName();
<a name="l01431"></a>01431                                         
<a name="l01432"></a>01432                                         <span class="keywordflow">break</span>;
<a name="l01433"></a>01433 
<a name="l01434"></a>01434                                 <span class="keywordflow">default</span>:
<a name="l01435"></a>01435                                         mulchar = oldmulchar;
<a name="l01436"></a>01436                                         right_lexeme = left_lexeme;
<a name="l01437"></a>01437                                         <span class="keywordflow">break</span>;
<a name="l01438"></a>01438                         }
<a name="l01439"></a>01439                 }
<a name="l01440"></a>01440                 
<a name="l01444"></a>01444                 <span class="keywordtype">void</span> MoreTerm(string left_lexeme, out string right_lexeme, string oldaddchar, out string addchar, <span class="keywordtype">bool</span> firstRound)
<a name="l01445"></a>01445                 {
<a name="l01446"></a>01446                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01447"></a>01447                         {
<a name="l01448"></a>01448                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._addop:
<a name="l01449"></a>01449                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._signop:
<a name="l01450"></a>01450                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._orop:
<a name="l01451"></a>01451                                         Element t, lLex, rLex;
<a name="l01452"></a>01452                                         addchar = Globals.lexeme;
<a name="l01453"></a>01453                                         oldaddchar = addchar;
<a name="l01454"></a>01454                                         string term_lexeme, lvar, rvar, recur_lexeme, newaddchar;
<a name="l01455"></a>01455                                         
<a name="l01456"></a>01456                                         Addop();
<a name="l01457"></a>01457                                         Term(out term_lexeme);
<a name="l01458"></a>01458                                         MoreTerm(term_lexeme, out recur_lexeme, oldaddchar, out newaddchar, <span class="keyword">false</span>);
<a name="l01459"></a>01459                                         
<a name="l01460"></a>01460                                         <span class="comment">/* look up the left and right values */</span>
<a name="l01461"></a>01461                                         lLex = Globals.symTab.Lookup(left_lexeme);
<a name="l01462"></a>01462                                         <span class="keywordflow">if</span> (recur_lexeme == <span class="stringliteral">""</span>)
<a name="l01463"></a>01463                                                 rLex = Globals.symTab.Lookup(term_lexeme);
<a name="l01464"></a>01464                                         <span class="keywordflow">else</span>
<a name="l01465"></a>01465                                                 rLex = Globals.symTab.Lookup(recur_lexeme);
<a name="l01466"></a>01466                                         
<a name="l01467"></a>01467                                         <span class="comment">/* ...and get string values for them */</span>
<a name="l01468"></a>01468                                         <span class="keywordflow">if</span> (lLex != null)
<a name="l01469"></a>01469                                         {
<a name="l01470"></a>01470                                                 <span class="keywordflow">if</span> (lLex.GetEType() == Element.EntryType.constType)
<a name="l01471"></a>01471                                                         lvar = lLex.GetIntegerValue().ToString();
<a name="l01472"></a>01472                                                 <span class="keywordflow">else</span>
<a name="l01473"></a>01473                                                         lvar = lLex.GetOffsetName();
<a name="l01474"></a>01474                                         }
<a name="l01475"></a>01475                                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (CCType.IsNumeric(left_lexeme))
<a name="l01476"></a>01476                                                 lvar = left_lexeme;
<a name="l01477"></a>01477                                         <span class="keywordflow">else</span>
<a name="l01478"></a>01478                                                 lvar = <span class="stringliteral">""</span>;
<a name="l01479"></a>01479                                         
<a name="l01480"></a>01480                                         <span class="keywordflow">if</span> (rLex != null)
<a name="l01481"></a>01481                                         {
<a name="l01482"></a>01482                                                 <span class="keywordflow">if</span> (rLex.GetEType() == Element.EntryType.constType)
<a name="l01483"></a>01483                                                         rvar = rLex.GetIntegerValue().ToString();
<a name="l01484"></a>01484                                                 <span class="keywordflow">else</span>
<a name="l01485"></a>01485                                                         rvar = rLex.GetOffsetName();
<a name="l01486"></a>01486                                         }
<a name="l01487"></a>01487                                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (CCType.IsNumeric(term_lexeme))
<a name="l01488"></a>01488                                                 rvar = term_lexeme;
<a name="l01489"></a>01489                                         <span class="keywordflow">else</span>
<a name="l01490"></a>01490                                                 rvar = <span class="stringliteral">""</span>;
<a name="l01491"></a>01491                                         
<a name="l01492"></a>01492                                         t = newtemp();
<a name="l01493"></a>01493                                         emit(<span class="stringliteral">"  "</span> + t.GetOffsetName() + <span class="stringliteral">" = "</span> + lvar + <span class="stringliteral">" "</span> + addchar + <span class="stringliteral">" "</span> + rvar + <span class="stringliteral">"\n"</span>);
<a name="l01494"></a>01494                                         right_lexeme = t.GetName();
<a name="l01495"></a>01495                                         
<a name="l01496"></a>01496                                         <span class="keywordflow">break</span>;
<a name="l01497"></a>01497                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._rparen:
<a name="l01498"></a>01498                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._semicolon:
<a name="l01499"></a>01499                                         right_lexeme = left_lexeme;
<a name="l01500"></a>01500                                         addchar = <span class="stringliteral">""</span>;
<a name="l01501"></a>01501                                         <span class="keywordflow">break</span>;
<a name="l01502"></a>01502                                 <span class="keywordflow">default</span>:
<a name="l01503"></a>01503                                         right_lexeme = <span class="stringliteral">""</span>;
<a name="l01504"></a>01504                                         <span class="keywordflow">if</span> (inExpr)
<a name="l01505"></a>01505                                                 right_lexeme = left_lexeme;
<a name="l01506"></a>01506                                         addchar = <span class="stringliteral">""</span>;
<a name="l01507"></a>01507                                         <span class="keywordflow">break</span>;
<a name="l01508"></a>01508                         }
<a name="l01509"></a>01509                 }
<a name="l01510"></a>01510                 
<a name="l01514"></a>01514                 <span class="keywordtype">void</span> Mulop()
<a name="l01515"></a>01515                 {
<a name="l01516"></a>01516                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01517"></a>01517                         {
<a name="l01518"></a>01518                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._mulop:
<a name="l01519"></a>01519                                         match(Globals.Symbol._mulop);
<a name="l01520"></a>01520                                         <span class="keywordflow">break</span>;
<a name="l01521"></a>01521                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._andop:
<a name="l01522"></a>01522                                         match(Globals.Symbol._andop);
<a name="l01523"></a>01523                                         <span class="keywordflow">break</span>;
<a name="l01524"></a>01524                                 <span class="keywordflow">default</span>:
<a name="l01525"></a>01525                                         Error(Globals.curLine, <span class="stringliteral">"*, /, or &amp;&amp;"</span>, Globals.lexeme);
<a name="l01526"></a>01526                                         <span class="keywordflow">break</span>;
<a name="l01527"></a>01527                         }
<a name="l01528"></a>01528                 }
<a name="l01529"></a>01529                 
<a name="l01533"></a>01533                 <span class="keywordtype">void</span> NamespaceBlock()
<a name="l01534"></a>01534                 {
<a name="l01535"></a>01535                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01536"></a>01536                         {
<a name="l01537"></a>01537                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._namespace:
<a name="l01538"></a>01538                                         NamespaceBlockDecl();
<a name="l01539"></a>01539                                         <span class="keywordflow">break</span>;
<a name="l01540"></a>01540                                 <span class="keywordflow">default</span>:
<a name="l01541"></a>01541                                         Classes();
<a name="l01542"></a>01542                                         <span class="keywordflow">break</span>;
<a name="l01543"></a>01543                         }
<a name="l01544"></a>01544                 }
<a name="l01545"></a>01545                 
<a name="l01549"></a>01549                 <span class="keywordtype">void</span> NamespaceBlockDecl()
<a name="l01550"></a>01550                 {
<a name="l01551"></a>01551                         match(Globals.Symbol._namespace);
<a name="l01552"></a>01552                         ClassOrNamespace();
<a name="l01553"></a>01553                         
<a name="l01554"></a>01554                         <span class="comment">/* don't forget to add the namespace to the symbol table to give classes a parent*/</span>
<a name="l01555"></a>01555                         AddSymbol(Globals.Symbol._unknown, Globals.Symbol._public, Globals.Symbol._namespace, Globals.Symbol._namespace, Globals.lexeme, Globals.depth);
<a name="l01556"></a>01556                         
<a name="l01557"></a>01557                         match(Globals.Symbol._lbrace);
<a name="l01558"></a>01558                         Classes();
<a name="l01559"></a>01559                         match(Globals.Symbol._rbrace);
<a name="l01560"></a>01560                 }
<a name="l01561"></a>01561                 
<a name="l01565"></a>01565                 <span class="keywordtype">void</span> Out_Stat()
<a name="l01566"></a>01566                 {
<a name="l01567"></a>01567                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01568"></a>01568                         {
<a name="l01569"></a>01569                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._write:
<a name="l01570"></a>01570                                         match(Globals.Symbol._write);
<a name="l01571"></a>01571                                         match(Globals.Symbol._lparen);
<a name="l01572"></a>01572                                         Write_List();
<a name="l01573"></a>01573                                         match(Globals.Symbol._rparen);
<a name="l01574"></a>01574                                         <span class="keywordflow">break</span>;
<a name="l01575"></a>01575                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._writeln:
<a name="l01576"></a>01576                                         match(Globals.Symbol._writeln);
<a name="l01577"></a>01577                                         match(Globals.Symbol._lparen);
<a name="l01578"></a>01578                                         Write_List();
<a name="l01579"></a>01579                                         match(Globals.Symbol._rparen);
<a name="l01580"></a>01580                                         emit(<span class="stringliteral">"  WRLN\n"</span>);
<a name="l01581"></a>01581                                         <span class="keywordflow">break</span>;
<a name="l01582"></a>01582                                 <span class="keywordflow">default</span>:
<a name="l01583"></a>01583                                         Error(Globals.curLine, <span class="stringliteral">"'write' or 'writeln'"</span>, Globals.lexeme);
<a name="l01584"></a>01584                                         <span class="keywordflow">break</span>;
<a name="l01585"></a>01585                         }
<a name="l01586"></a>01586                 }
<a name="l01587"></a>01587                 
<a name="l01591"></a>01591                 <span class="keywordtype">void</span> ParamList()
<a name="l01592"></a>01592                 {
<a name="l01593"></a>01593                         Globals.Symbol mode = Globals.Symbol._unknown, type;
<a name="l01594"></a>01594                         Element e = null;
<a name="l01595"></a>01595                         
<a name="l01596"></a>01596                         <span class="comment">/* start updating varLoc */</span>
<a name="l01597"></a>01597                         inParam = <span class="keyword">true</span>;
<a name="l01598"></a>01598                         
<a name="l01599"></a>01599                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01600"></a>01600                         {
<a name="l01601"></a>01601                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._ref:
<a name="l01602"></a>01602                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._out:
<a name="l01603"></a>01603                                         Mode(ref mode);
<a name="l01604"></a>01604                                         Type(out type);
<a name="l01605"></a>01605                                         e = AddSymbol(mode, Globals.Symbol._private, type, Globals.token, Globals.lexeme, Globals.depth);
<a name="l01606"></a>01606                                         
<a name="l01607"></a>01607                                         <span class="comment">/* play with our new symbol */</span>
<a name="l01608"></a>01608                                         <span class="keywordflow">if</span> (e != null)
<a name="l01609"></a>01609                                         {
<a name="l01610"></a>01610                                                 <span class="keywordtype">int</span> mysize = 0;
<a name="l01611"></a>01611                                                 <span class="keywordtype">bool</span> cont = <span class="keyword">false</span>;
<a name="l01612"></a>01612                                                 
<a name="l01613"></a>01613                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)e.GetVType())
<a name="l01614"></a>01614                                                 {
<a name="l01615"></a>01615                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.intType:
<a name="l01616"></a>01616                                                                 e.SetInteger();
<a name="l01617"></a>01617                                                                 mysize = 2;
<a name="l01618"></a>01618                                                                 cont = <span class="keyword">true</span>;
<a name="l01619"></a>01619                                                                 <span class="keywordflow">break</span>;
<a name="l01620"></a>01620                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.floatType:
<a name="l01621"></a>01621                                                                 e.SetFloat();
<a name="l01622"></a>01622                                                                 mysize = 4;
<a name="l01623"></a>01623                                                                 cont = <span class="keyword">true</span>;
<a name="l01624"></a>01624                                                                 <span class="keywordflow">break</span>;
<a name="l01625"></a>01625                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.charType:
<a name="l01626"></a>01626                                                                 e.SetCharacter();
<a name="l01627"></a>01627                                                                 mysize = 1;
<a name="l01628"></a>01628                                                                 cont = <span class="keyword">true</span>;
<a name="l01629"></a>01629                                                                 <span class="keywordflow">break</span>;
<a name="l01630"></a>01630                                                         <span class="keywordflow">default</span>:
<a name="l01631"></a>01631                                                                 <span class="keywordflow">break</span>;
<a name="l01632"></a>01632                                                 }
<a name="l01633"></a>01633                                                 
<a name="l01634"></a>01634                                                 <span class="comment">/* if we hit a real variable, set properties */</span>
<a name="l01635"></a>01635                                                 <span class="keywordflow">if</span> (cont)
<a name="l01636"></a>01636                                                 {
<a name="l01637"></a>01637                                                         e.SetSizeOfLocals(mysize);
<a name="l01638"></a>01638                                                         e.SetOffset((localoffset * offsetmul) - (mysize * offsetmul));
<a name="l01639"></a>01639                                                         e.parent = parent;
<a name="l01640"></a>01640                                         
<a name="l01641"></a>01641                                                         funcSize += mysize;
<a name="l01642"></a>01642                                                         localoffset += (mysize * offsetmul);
<a name="l01643"></a>01643                                                 }
<a name="l01644"></a>01644                                         }
<a name="l01645"></a>01645                                         
<a name="l01646"></a>01646                                         match(Globals.Symbol._identifier);
<a name="l01647"></a>01647                                         ParamTail();
<a name="l01648"></a>01648                                         <span class="keywordflow">break</span>;
<a name="l01649"></a>01649                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._int:
<a name="l01650"></a>01650                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._float:
<a name="l01651"></a>01651                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._char:
<a name="l01652"></a>01652                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._void:
<a name="l01653"></a>01653                                         Type(out type);
<a name="l01654"></a>01654                                         e = AddSymbol(mode, Globals.Symbol._private, type, Globals.token, Globals.lexeme, Globals.depth);
<a name="l01655"></a>01655                                         
<a name="l01656"></a>01656                                         <span class="comment">/* play with our new symbol */</span>
<a name="l01657"></a>01657                                         <span class="keywordflow">if</span> (e != null)
<a name="l01658"></a>01658                                         {
<a name="l01659"></a>01659                                                 <span class="keywordtype">int</span> mysize = 0;
<a name="l01660"></a>01660                                                 <span class="keywordtype">bool</span> cont = <span class="keyword">false</span>;
<a name="l01661"></a>01661                                 
<a name="l01662"></a>01662                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)e.GetVType())
<a name="l01663"></a>01663                                                 {
<a name="l01664"></a>01664                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.intType:
<a name="l01665"></a>01665                                                                 e.SetInteger();
<a name="l01666"></a>01666                                                                 mysize = 2;
<a name="l01667"></a>01667                                                                 cont = <span class="keyword">true</span>;
<a name="l01668"></a>01668                                                                 <span class="keywordflow">break</span>;
<a name="l01669"></a>01669                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.floatType:
<a name="l01670"></a>01670                                                                 e.SetFloat();
<a name="l01671"></a>01671                                                                 mysize = 4;
<a name="l01672"></a>01672                                                                 cont = <span class="keyword">true</span>;
<a name="l01673"></a>01673                                                                 <span class="keywordflow">break</span>;
<a name="l01674"></a>01674                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.charType:
<a name="l01675"></a>01675                                                                 e.SetCharacter();
<a name="l01676"></a>01676                                                                 mysize = 1;
<a name="l01677"></a>01677                                                                 cont = <span class="keyword">true</span>;
<a name="l01678"></a>01678                                                                 <span class="keywordflow">break</span>;
<a name="l01679"></a>01679                                                         <span class="keywordflow">default</span>:
<a name="l01680"></a>01680                                                                 <span class="keywordflow">break</span>;
<a name="l01681"></a>01681                                                 }
<a name="l01682"></a>01682                                                 
<a name="l01683"></a>01683                                                 <span class="comment">/* if we hit a real variable, set properties */</span>
<a name="l01684"></a>01684                                                 <span class="keywordflow">if</span> (cont)
<a name="l01685"></a>01685                                                 {
<a name="l01686"></a>01686                                                         <span class="comment">// we don't want to count parameters towards locals</span>
<a name="l01687"></a>01687                                                         <span class="comment">//e.SetSizeOfLocals(mysize);</span>
<a name="l01688"></a>01688                                                         
<a name="l01689"></a>01689                                                         e.parent = parent;
<a name="l01690"></a>01690                                                         
<a name="l01691"></a>01691                                                         <span class="keywordflow">if</span> (e.parent.GetName() == currentclass.GetName())
<a name="l01692"></a>01692                                                                 e.SetOffset((localoffset * offsetmul) - (mysize * offsetmul));
<a name="l01693"></a>01693                                                         <span class="keywordflow">else</span>
<a name="l01694"></a>01694                                                                 e.SetOffset(localoffset * offsetmul);
<a name="l01695"></a>01695                                                         
<a name="l01696"></a>01696                                                         funcSize += mysize;
<a name="l01697"></a>01697                                                         <span class="keywordflow">if</span> (e.parent.GetName() != currentclass.GetName())
<a name="l01698"></a>01698                                                                 localoffset += (mysize * offsetmul);
<a name="l01699"></a>01699                                                         
<a name="l01700"></a>01700                                                         <span class="keywordflow">if</span> (e.parent.GetEType() == Element.EntryType.methodType)
<a name="l01701"></a>01701                                                                 e.parent.SetSizeOfParams(e.parent.GetSizeOfParams() + mysize);
<a name="l01702"></a>01702                                                 }
<a name="l01703"></a>01703                                         }
<a name="l01704"></a>01704                                         
<a name="l01705"></a>01705                                         match(Globals.Symbol._identifier);
<a name="l01706"></a>01706                                         ParamTail();
<a name="l01707"></a>01707                                         <span class="keywordflow">break</span>;
<a name="l01708"></a>01708                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._return:
<a name="l01709"></a>01709                                         match(Globals.Symbol._return);
<a name="l01710"></a>01710                                         string a = <span class="stringliteral">""</span>, b;
<a name="l01711"></a>01711                                         Expr(a, out b);
<a name="l01712"></a>01712                                         match(Globals.Symbol._semicolon);
<a name="l01713"></a>01713                                         <span class="keywordflow">break</span>;
<a name="l01714"></a>01714                                 <span class="keywordflow">default</span>:
<a name="l01715"></a>01715                                         <span class="keywordflow">break</span>;
<a name="l01716"></a>01716                         }
<a name="l01717"></a>01717                         
<a name="l01718"></a>01718                         <span class="comment">/* done! this should already by unset */</span>
<a name="l01719"></a>01719                         inParam = <span class="keyword">false</span>;
<a name="l01720"></a>01720                 }
<a name="l01721"></a>01721                 
<a name="l01725"></a>01725                 <span class="keywordtype">void</span> ParamTail()
<a name="l01726"></a>01726                 {
<a name="l01727"></a>01727                         Globals.Symbol mode = Globals.Symbol._private, type;
<a name="l01728"></a>01728 
<a name="l01729"></a>01729                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01730"></a>01730                         {
<a name="l01731"></a>01731                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._comma:
<a name="l01732"></a>01732                                         match(Globals.Symbol._comma);
<a name="l01733"></a>01733                                         Mode(ref mode);
<a name="l01734"></a>01734                                         Type(out type);
<a name="l01735"></a>01735                                         Element e = AddSymbol(mode, Globals.Symbol._private, type, Globals.token, Globals.lexeme, Globals.depth);
<a name="l01736"></a>01736                                         
<a name="l01737"></a>01737                                         <span class="comment">/* play with our new symbol */</span>
<a name="l01738"></a>01738                                         <span class="keywordflow">if</span> (e != null)
<a name="l01739"></a>01739                                         {
<a name="l01740"></a>01740                                                 <span class="keywordtype">int</span> mysize = 0;
<a name="l01741"></a>01741                                                 <span class="keywordtype">bool</span> cont = <span class="keyword">false</span>;
<a name="l01742"></a>01742                                 
<a name="l01743"></a>01743                                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)e.GetVType())
<a name="l01744"></a>01744                                                 {
<a name="l01745"></a>01745                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.intType:
<a name="l01746"></a>01746                                                                 e.SetInteger();
<a name="l01747"></a>01747                                                                 mysize = 2;
<a name="l01748"></a>01748                                                                 cont = <span class="keyword">true</span>;
<a name="l01749"></a>01749                                                                 <span class="keywordflow">break</span>;
<a name="l01750"></a>01750                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.floatType:
<a name="l01751"></a>01751                                                                 e.SetFloat();
<a name="l01752"></a>01752                                                                 mysize = 4;
<a name="l01753"></a>01753                                                                 cont = <span class="keyword">true</span>;
<a name="l01754"></a>01754                                                                 <span class="keywordflow">break</span>;
<a name="l01755"></a>01755                                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Element.VarType.charType:
<a name="l01756"></a>01756                                                                 e.SetCharacter();
<a name="l01757"></a>01757                                                                 mysize = 1;
<a name="l01758"></a>01758                                                                 cont = <span class="keyword">true</span>;
<a name="l01759"></a>01759                                                                 <span class="keywordflow">break</span>;
<a name="l01760"></a>01760                                                         <span class="keywordflow">default</span>:
<a name="l01761"></a>01761                                                                 <span class="keywordflow">break</span>;
<a name="l01762"></a>01762                                                 }
<a name="l01763"></a>01763                                                 
<a name="l01764"></a>01764                                                 <span class="comment">/* if we hit a real variable, set properties */</span>
<a name="l01765"></a>01765                                                 <span class="keywordflow">if</span> (cont)
<a name="l01766"></a>01766                                                 {
<a name="l01767"></a>01767                                                         <span class="keywordflow">if</span> (!inParam)
<a name="l01768"></a>01768                                                                 e.SetSizeOfLocals(mysize);
<a name="l01769"></a>01769                                                         e.parent = parent;
<a name="l01770"></a>01770                                                         
<a name="l01771"></a>01771                                                         <span class="keywordflow">if</span> (e.parent.GetName() == currentclass.GetName())
<a name="l01772"></a>01772                                                                 e.SetOffset((localoffset * offsetmul) - (mysize * offsetmul));
<a name="l01773"></a>01773                                                         <span class="keywordflow">else</span>
<a name="l01774"></a>01774                                                                 e.SetOffset(localoffset * offsetmul);
<a name="l01775"></a>01775                                                         
<a name="l01776"></a>01776                                                         funcSize += mysize;
<a name="l01777"></a>01777                                                         <span class="keywordflow">if</span> (e.parent.GetName() != currentclass.GetName())
<a name="l01778"></a>01778                                                                 localoffset += (mysize * offsetmul);
<a name="l01779"></a>01779                                                         
<a name="l01780"></a>01780                                                         <span class="keywordflow">if</span> (e.parent.GetEType() == Element.EntryType.methodType)
<a name="l01781"></a>01781                                                                 e.parent.SetSizeOfParams(e.parent.GetSizeOfParams() + mysize);
<a name="l01782"></a>01782                                                 }
<a name="l01783"></a>01783                                         }
<a name="l01784"></a>01784                                         
<a name="l01785"></a>01785                                         match(Globals.Symbol._identifier);
<a name="l01786"></a>01786                                         ParamTail();
<a name="l01787"></a>01787                                         <span class="keywordflow">break</span>;
<a name="l01788"></a>01788                                 <span class="keywordflow">default</span>:
<a name="l01789"></a>01789                                         <span class="keywordflow">break</span>;
<a name="l01790"></a>01790                         }
<a name="l01791"></a>01791                 }
<a name="l01792"></a>01792                 
<a name="l01796"></a>01796                 <span class="keywordtype">void</span> Params(ref string pushStats)
<a name="l01797"></a>01797                 {
<a name="l01798"></a>01798                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01799"></a>01799                         {
<a name="l01800"></a>01800                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._identifier:
<a name="l01801"></a>01801                                         <span class="comment">/* make sure it's a valid symbol */</span>
<a name="l01802"></a>01802                                         Element e = Globals.symTab.Lookup(Globals.lexeme);
<a name="l01803"></a>01803                                         <span class="keywordflow">if</span> (e == null)
<a name="l01804"></a>01804                                                 Error(<span class="stringliteral">"error: "</span> + Globals.filename + <span class="stringliteral">":"</span> + Globals.curLine + <span class="stringliteral">": undeclared variable \""</span> + Globals.lexeme + <span class="stringliteral">"\""</span>);
<a name="l01805"></a>01805                                         
<a name="l01806"></a>01806                                         <span class="comment">/* prepend the new symbol to our list */</span>
<a name="l01807"></a>01807                                         <span class="keywordflow">if</span> (pushStats.Length &gt; 0)
<a name="l01808"></a>01808                                                 pushStats = <span class="stringliteral">"  PUSH "</span> + e.GetOffsetName() + <span class="stringliteral">"\n"</span> + pushStats;
<a name="l01809"></a>01809                                         <span class="keywordflow">else</span>
<a name="l01810"></a>01810                                                 pushStats = <span class="stringliteral">"  PUSH "</span> + e.GetOffsetName();
<a name="l01811"></a>01811                                         
<a name="l01812"></a>01812                                         match(Globals.Symbol._identifier);
<a name="l01813"></a>01813                                         ParamsTail(ref pushStats);
<a name="l01814"></a>01814                                         <span class="keywordflow">break</span>;
<a name="l01815"></a>01815                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._number:
<a name="l01816"></a>01816                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._numfloat:
<a name="l01817"></a>01817                                         <span class="comment">/* prepend the new symbol to our list */</span>
<a name="l01818"></a>01818                                         <span class="keywordflow">if</span> (pushStats.Length &gt; 0)
<a name="l01819"></a>01819                                                 pushStats = <span class="stringliteral">"  PUSH "</span> + Globals.lexeme + <span class="stringliteral">"\n"</span> + pushStats;
<a name="l01820"></a>01820                                         <span class="keywordflow">else</span>
<a name="l01821"></a>01821                                                 pushStats = <span class="stringliteral">"  PUSH "</span> + Globals.lexeme;
<a name="l01822"></a>01822                                         
<a name="l01823"></a>01823                                         match(Globals.token);
<a name="l01824"></a>01824                                         ParamsTail(ref pushStats);
<a name="l01825"></a>01825                                         <span class="keywordflow">break</span>;
<a name="l01826"></a>01826                                 <span class="keywordflow">default</span>:
<a name="l01827"></a>01827                                         <span class="keywordflow">break</span>;
<a name="l01828"></a>01828                         }
<a name="l01829"></a>01829                 }
<a name="l01830"></a>01830                 
<a name="l01834"></a>01834                 <span class="keywordtype">void</span> ParamsTail(ref string pushStats)
<a name="l01835"></a>01835                 {
<a name="l01836"></a>01836                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._comma)
<a name="l01837"></a>01837                         {
<a name="l01838"></a>01838                                 match(Globals.Symbol._comma);
<a name="l01839"></a>01839                                 <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01840"></a>01840                                 {
<a name="l01841"></a>01841                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._identifier:
<a name="l01842"></a>01842                                                 <span class="comment">/* make sure it's a valid symbol */</span>
<a name="l01843"></a>01843                                                 Element e = Globals.symTab.Lookup(Globals.lexeme);
<a name="l01844"></a>01844                                                 <span class="keywordflow">if</span> (e == null)
<a name="l01845"></a>01845                                                         Error(<span class="stringliteral">"error: "</span> + Globals.filename + <span class="stringliteral">":"</span> + Globals.curLine + <span class="stringliteral">": undeclared variable \""</span> + Globals.lexeme + <span class="stringliteral">"\""</span>);
<a name="l01846"></a>01846                                         
<a name="l01847"></a>01847                                                 <span class="comment">/* prepend the new symbol to our list */</span>
<a name="l01848"></a>01848                                                 <span class="keywordflow">if</span> (pushStats.Length &gt; 0)
<a name="l01849"></a>01849                                                         pushStats = <span class="stringliteral">"  PUSH "</span> + e.GetOffsetName() + <span class="stringliteral">"\n"</span> + pushStats;
<a name="l01850"></a>01850                                                 <span class="keywordflow">else</span>
<a name="l01851"></a>01851                                                         pushStats = <span class="stringliteral">"  PUSH "</span> + e.GetOffsetName();
<a name="l01852"></a>01852                                                 
<a name="l01853"></a>01853                                                 match(Globals.Symbol._identifier);
<a name="l01854"></a>01854                                                 ParamsTail(ref pushStats);
<a name="l01855"></a>01855                                                 <span class="keywordflow">break</span>;
<a name="l01856"></a>01856                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._number:
<a name="l01857"></a>01857                                         <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._numfloat:
<a name="l01858"></a>01858                                                 <span class="comment">/* prepend the new symbol to our list */</span>
<a name="l01859"></a>01859                                                 <span class="keywordflow">if</span> (pushStats.Length &gt; 0)
<a name="l01860"></a>01860                                                         pushStats = <span class="stringliteral">"  PUSH "</span> + Globals.lexeme + <span class="stringliteral">"\n"</span> + pushStats;
<a name="l01861"></a>01861                                                 <span class="keywordflow">else</span>
<a name="l01862"></a>01862                                                         pushStats = <span class="stringliteral">"  PUSH "</span> + Globals.lexeme;
<a name="l01863"></a>01863                                                 
<a name="l01864"></a>01864                                                 match(Globals.token);
<a name="l01865"></a>01865                                                 ParamsTail(ref pushStats);
<a name="l01866"></a>01866                                                 <span class="keywordflow">break</span>;
<a name="l01867"></a>01867                                 }
<a name="l01868"></a>01868                         }
<a name="l01869"></a>01869                 }
<a name="l01870"></a>01870                 
<a name="l01874"></a>01874                 <span class="keywordtype">void</span> Prog()
<a name="l01875"></a>01875                 {
<a name="l01876"></a>01876                         UsingDirective();
<a name="l01877"></a>01877                         NamespaceBlock();
<a name="l01878"></a>01878                         match(Globals.Symbol._eof);
<a name="l01879"></a>01879                         
<a name="l01880"></a>01880                         <span class="comment">/* if we hit EOF and didn't find Main(), error -- we don't support</span>
<a name="l01881"></a>01881 <span class="comment">                         * multiple source files</span>
<a name="l01882"></a>01882 <span class="comment">                         */</span>
<a name="l01883"></a>01883                         <span class="keywordflow">if</span> (!foundMain)
<a name="l01884"></a>01884                                 Error(<span class="stringliteral">"error: Main() not found in "</span> + Globals.filename);
<a name="l01885"></a>01885                 }
<a name="l01886"></a>01886                 
<a name="l01887"></a>01887                 
<a name="l01891"></a>01891                 <span class="keywordtype">void</span> Relation(out string lex)
<a name="l01892"></a>01892                 {
<a name="l01893"></a>01893                         SimpleExpr(out lex);
<a name="l01894"></a>01894                 }
<a name="l01895"></a>01895                 
<a name="l01899"></a>01899                 <span class="keywordtype">void</span> ReturnLine(<span class="keywordtype">bool</span> inMain)
<a name="l01900"></a>01900                 {
<a name="l01901"></a>01901                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01902"></a>01902                         {
<a name="l01903"></a>01903                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._return:
<a name="l01904"></a>01904                                         match(Globals.Symbol._return);
<a name="l01905"></a>01905                                         
<a name="l01906"></a>01906                                         <span class="comment">/* Main() doesn't return a value */</span>
<a name="l01907"></a>01907                                         <span class="keywordflow">if</span> (!inMain)
<a name="l01908"></a>01908                                         {
<a name="l01909"></a>01909                                                 string a=<span class="stringliteral">""</span>, retval;
<a name="l01910"></a>01910                                                 Expr(a, out retval);
<a name="l01911"></a>01911                                                 Element r = Globals.symTab.Lookup(retval);
<a name="l01912"></a>01912                                                 <span class="keywordflow">if</span> (r != null)
<a name="l01913"></a>01913                                                         emit(<span class="stringliteral">"    _AX = "</span> + r.GetOffsetName() + <span class="stringliteral">"\n"</span>);
<a name="l01914"></a>01914                                                 <span class="keywordflow">else</span>
<a name="l01915"></a>01915                                                         emit(<span class="stringliteral">"    _AX = "</span> + retval + <span class="stringliteral">"\n"</span>);
<a name="l01916"></a>01916                                         }
<a name="l01917"></a>01917                                         
<a name="l01918"></a>01918                                         match(Globals.Symbol._semicolon);
<a name="l01919"></a>01919                                         <span class="keywordflow">break</span>;
<a name="l01920"></a>01920                                 <span class="keywordflow">default</span>:
<a name="l01921"></a>01921                                         <span class="keywordflow">break</span>;
<a name="l01922"></a>01922                         }
<a name="l01923"></a>01923                 }
<a name="l01924"></a>01924                 
<a name="l01928"></a>01928                 <span class="keywordtype">void</span> ShortExpr(string left_lexeme, out string right_lexeme)
<a name="l01929"></a>01929                 {
<a name="l01930"></a>01930                         string tmpchar, fact_right;
<a name="l01931"></a>01931                         MoreFactor(left_lexeme, out fact_right, <span class="stringliteral">""</span>, out tmpchar, <span class="keyword">true</span>);
<a name="l01932"></a>01932                         MoreTerm(fact_right, out right_lexeme, <span class="stringliteral">""</span>, out tmpchar, <span class="keyword">true</span>);
<a name="l01933"></a>01933                 }
<a name="l01934"></a>01934                 
<a name="l01938"></a>01938                 <span class="keywordtype">void</span> Signop()
<a name="l01939"></a>01939                 {
<a name="l01940"></a>01940                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01941"></a>01941                         {
<a name="l01942"></a>01942                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._signop:
<a name="l01943"></a>01943                                         match(Globals.Symbol._signop);
<a name="l01944"></a>01944                                         <span class="keywordflow">break</span>;
<a name="l01945"></a>01945                                 <span class="keywordflow">default</span>:
<a name="l01946"></a>01946                                         Error(Globals.curLine, <span class="stringliteral">"-"</span>, Globals.lexeme);
<a name="l01947"></a>01947                                         <span class="keywordflow">break</span>;
<a name="l01948"></a>01948                         }
<a name="l01949"></a>01949                 }
<a name="l01950"></a>01950                 
<a name="l01954"></a>01954                 <span class="keywordtype">void</span> SimpleExpr(out string right_lexeme)
<a name="l01955"></a>01955                 {
<a name="l01956"></a>01956                         string term_lex, tmpchar;
<a name="l01957"></a>01957                         Term(out term_lex);
<a name="l01958"></a>01958                         MoreTerm(term_lex, out right_lexeme, <span class="stringliteral">""</span>, out tmpchar, <span class="keyword">true</span>);
<a name="l01959"></a>01959                 }
<a name="l01960"></a>01960                 
<a name="l01964"></a>01964                 <span class="keywordtype">void</span> Statement()
<a name="l01965"></a>01965                 {
<a name="l01966"></a>01966                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01967"></a>01967                         {
<a name="l01968"></a>01968                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._identifier:
<a name="l01969"></a>01969                                         AssignStat();
<a name="l01970"></a>01970                                         <span class="keywordflow">break</span>;
<a name="l01971"></a>01971                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._read:
<a name="l01972"></a>01972                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._write:
<a name="l01973"></a>01973                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._writeln:
<a name="l01974"></a>01974                                         IOStat();
<a name="l01975"></a>01975                                         <span class="keywordflow">break</span>;
<a name="l01976"></a>01976                                 <span class="keywordflow">default</span>:
<a name="l01977"></a>01977                                         Error(Globals.curLine, <span class="stringliteral">"an identifier, 'read', 'write', or 'writeln'"</span>, Globals.lexeme);
<a name="l01978"></a>01978                                         <span class="keywordflow">break</span>;
<a name="l01979"></a>01979                         }
<a name="l01980"></a>01980                 }
<a name="l01981"></a>01981                 
<a name="l01985"></a>01985                 <span class="keywordtype">void</span> StatList()
<a name="l01986"></a>01986                 {
<a name="l01987"></a>01987                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l01988"></a>01988                         {
<a name="l01989"></a>01989                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._identifier:
<a name="l01990"></a>01990                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._read:
<a name="l01991"></a>01991                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._write:
<a name="l01992"></a>01992                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._writeln:
<a name="l01993"></a>01993                                         Statement();
<a name="l01994"></a>01994                                         match(Globals.Symbol._semicolon);
<a name="l01995"></a>01995                                         StatList();
<a name="l01996"></a>01996                                         <span class="keywordflow">break</span>;
<a name="l01997"></a>01997                                 <span class="keywordflow">default</span>:
<a name="l01998"></a>01998                                         <span class="keywordflow">break</span>;
<a name="l01999"></a>01999                         }
<a name="l02000"></a>02000                 }
<a name="l02001"></a>02001                 
<a name="l02005"></a>02005                 <span class="keywordtype">void</span> Term(out string right_lexeme)
<a name="l02006"></a>02006                 {
<a name="l02007"></a>02007                         string left_lexeme, mulchar;
<a name="l02008"></a>02008                         Factor(out left_lexeme);
<a name="l02009"></a>02009                         MoreFactor(left_lexeme, out right_lexeme, <span class="stringliteral">""</span>, out mulchar, <span class="keyword">true</span>);
<a name="l02010"></a>02010                 }
<a name="l02011"></a>02011                 
<a name="l02012"></a>02012                 
<a name="l02016"></a>02016                 <span class="keywordtype">void</span> Type(out Globals.Symbol type)
<a name="l02017"></a>02017                 {
<a name="l02018"></a>02018                         type = Globals.token;
<a name="l02019"></a>02019 
<a name="l02020"></a>02020                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l02021"></a>02021                         {
<a name="l02022"></a>02022                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._int:
<a name="l02023"></a>02023                                         match(Globals.Symbol._int);
<a name="l02024"></a>02024                                         <span class="keywordflow">break</span>;
<a name="l02025"></a>02025                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._float:
<a name="l02026"></a>02026                                         match(Globals.Symbol._float);
<a name="l02027"></a>02027                                         <span class="keywordflow">break</span>;
<a name="l02028"></a>02028                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._char:
<a name="l02029"></a>02029                                         match(Globals.Symbol._char);
<a name="l02030"></a>02030                                         <span class="keywordflow">break</span>;
<a name="l02031"></a>02031                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._void:
<a name="l02032"></a>02032                                         match(Globals.Symbol._void);
<a name="l02033"></a>02033                                         <span class="keywordflow">break</span>;
<a name="l02034"></a>02034                                 <span class="keywordflow">default</span>:
<a name="l02035"></a>02035                                         type = Globals.Symbol._unknown;
<a name="l02036"></a>02036                                         Error(Globals.curLine, <span class="stringliteral">"int, float, char, or void"</span>, Globals.Tokens[(<span class="keywordtype">int</span>)Globals.token]);
<a name="l02037"></a>02037                                         <span class="keywordflow">break</span>;
<a name="l02038"></a>02038                         }
<a name="l02039"></a>02039                 }
<a name="l02040"></a>02040                 
<a name="l02044"></a>02044                 <span class="keywordtype">void</span> UsingDirective()
<a name="l02045"></a>02045                 {
<a name="l02046"></a>02046                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l02047"></a>02047                         {
<a name="l02048"></a>02048                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._using:
<a name="l02049"></a>02049                                         match(Globals.Symbol._using);
<a name="l02050"></a>02050                                         ClassOrNamespace();
<a name="l02051"></a>02051                                         match(Globals.Symbol._semicolon);
<a name="l02052"></a>02052                                         UsingDirective();
<a name="l02053"></a>02053                                         <span class="keywordflow">break</span>;
<a name="l02054"></a>02054                                 <span class="keywordflow">default</span>:
<a name="l02055"></a>02055                                         <span class="keywordflow">break</span>;
<a name="l02056"></a>02056                         }
<a name="l02057"></a>02057                 }
<a name="l02058"></a>02058                 
<a name="l02062"></a>02062                 <span class="keywordtype">void</span> Write_List()
<a name="l02063"></a>02063                 {
<a name="l02064"></a>02064                         Write_Token();
<a name="l02065"></a>02065                         Write_List_Tail();
<a name="l02066"></a>02066                 }
<a name="l02067"></a>02067                 
<a name="l02071"></a>02071                 <span class="keywordtype">void</span> Write_List_Tail()
<a name="l02072"></a>02072                 {
<a name="l02073"></a>02073                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._comma)
<a name="l02074"></a>02074                         {
<a name="l02075"></a>02075                                 match(Globals.Symbol._comma);
<a name="l02076"></a>02076                                 Write_Token();
<a name="l02077"></a>02077                                 Write_List_Tail();
<a name="l02078"></a>02078                         }
<a name="l02079"></a>02079                 }
<a name="l02080"></a>02080                 
<a name="l02084"></a>02084                 <span class="keywordtype">void</span> Write_Token()
<a name="l02085"></a>02085                 {
<a name="l02086"></a>02086                         Element w;
<a name="l02087"></a>02087                         
<a name="l02088"></a>02088                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)Globals.token)
<a name="l02089"></a>02089                         {
<a name="l02090"></a>02090                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._identifier:
<a name="l02091"></a>02091                                         <span class="keywordflow">if</span> (CCType.IsNumeric(Globals.lexeme))
<a name="l02092"></a>02092                                         {
<a name="l02093"></a>02093                                                 emit(<span class="stringliteral">"  WRI "</span> + Globals.lexeme + <span class="stringliteral">"\n"</span>);
<a name="l02094"></a>02094                                                 match(Globals.token);
<a name="l02095"></a>02095                                                 <span class="keywordflow">break</span>;
<a name="l02096"></a>02096                                         }
<a name="l02097"></a>02097                                         
<a name="l02098"></a>02098                                         <span class="comment">/* make sure that the variable exists */</span>
<a name="l02099"></a>02099                                         w = Globals.symTab.Lookup(Globals.lexeme);
<a name="l02100"></a>02100                                         <span class="keywordflow">if</span> (w == null)
<a name="l02101"></a>02101                                                 Error(<span class="stringliteral">"error: "</span> + Globals.filename + <span class="stringliteral">":"</span> + Globals.curLine + <span class="stringliteral">": attempt to write undeclared variable "</span> + Globals.lexeme);
<a name="l02102"></a>02102                         
<a name="l02103"></a>02103                                         emit(<span class="stringliteral">"  WRI "</span> + w.GetOffsetName() + <span class="stringliteral">"\n"</span>);
<a name="l02104"></a>02104                                         match(Globals.Symbol._identifier);
<a name="l02105"></a>02105                                         <span class="keywordflow">break</span>;
<a name="l02106"></a>02106                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._number:
<a name="l02107"></a>02107                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._numfloat:
<a name="l02108"></a>02108                                         <span class="keywordflow">if</span> (CCType.IsNumeric(Globals.lexeme))
<a name="l02109"></a>02109                                         {
<a name="l02110"></a>02110                                                 emit(<span class="stringliteral">"  WRI "</span> + Globals.lexeme + <span class="stringliteral">"\n"</span>);
<a name="l02111"></a>02111                                                 match(Globals.token);
<a name="l02112"></a>02112                                                 <span class="keywordflow">break</span>;
<a name="l02113"></a>02113                                         }
<a name="l02114"></a>02114                                         
<a name="l02115"></a>02115                                         <span class="comment">/* make sure that the variable exists */</span>
<a name="l02116"></a>02116                                         w = Globals.symTab.Lookup(Globals.lexeme);
<a name="l02117"></a>02117                                         <span class="keywordflow">if</span> (w == null)
<a name="l02118"></a>02118                                                 Error(<span class="stringliteral">"error: "</span> + Globals.filename + <span class="stringliteral">":"</span> + Globals.curLine + <span class="stringliteral">": attempt to write undeclared variable "</span> + Globals.lexeme);
<a name="l02119"></a>02119                         
<a name="l02120"></a>02120                                         emit(<span class="stringliteral">"  WRI "</span> + w.GetOffsetName() + <span class="stringliteral">"\n"</span>);
<a name="l02121"></a>02121                                         match(Globals.token);
<a name="l02122"></a>02122                                         <span class="keywordflow">break</span>;
<a name="l02123"></a>02123                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)Globals.Symbol._literal:
<a name="l02124"></a>02124                                         <span class="comment">/* add the string to the string table */</span>
<a name="l02125"></a>02125                                         StringT s = Globals.strTab.Insert(Globals.lexeme);
<a name="l02126"></a>02126                         
<a name="l02127"></a>02127                                         emit(<span class="stringliteral">"  WRS "</span> + s.name + <span class="stringliteral">"\n"</span>);
<a name="l02128"></a>02128                                         match(Globals.Symbol._literal);
<a name="l02129"></a>02129                                         <span class="keywordflow">break</span>;
<a name="l02130"></a>02130                                 <span class="keywordflow">default</span>:
<a name="l02131"></a>02131                                         <span class="keywordflow">break</span>;
<a name="l02132"></a>02132                         }
<a name="l02133"></a>02133                 }
<a name="l02134"></a>02134         }
<a name="l02135"></a>02135 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Sun May 14 16:08:27 2006 for MiniCSharp by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
