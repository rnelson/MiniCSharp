<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>MiniCSharp: /Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/Lexical.cs Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<h1>/Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/Lexical.cs</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id$</span>
<a name="l00002"></a>00002 <span class="comment"> * Ross Nelson</span>
<a name="l00003"></a>00003 <span class="comment"> * Compiler Construction (CSC 446)</span>
<a name="l00004"></a>00004 <span class="comment"> * MiniCSharp/Lexical Analyzer</span>
<a name="l00005"></a>00005 <span class="comment"> */</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="preprocessor">#region Using declarations</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span><span class="keyword">using</span> System;
<a name="l00009"></a>00009 <span class="keyword">using</span> System.Text;
<a name="l00010"></a>00010 <span class="keyword">using</span> System.Text.RegularExpressions;
<a name="l00011"></a>00011 <span class="keyword">using</span> System.IO;
<a name="l00012"></a>00012 <span class="preprocessor">#endregion</span>
<a name="l00013"></a>00013 <span class="preprocessor"></span>
<a name="l00014"></a>00014 <span class="keyword">namespace </span>MiniCSharp
<a name="l00015"></a>00015 {
<a name="l00016"></a><a class="code" href="class_mini_c_sharp_1_1_lexical.htm">00016</a>         <span class="keyword">class </span><a class="code" href="class_mini_c_sharp_1_1_lexical.htm">Lexical</a>
<a name="l00017"></a>00017         {
<a name="l00018"></a><a class="code" href="class_mini_c_sharp_1_1_lexical.htm#b1b98a2924629c5656ad96b9661dc50e">00018</a>                 <span class="keyword">public</span> <span class="keywordtype">char</span> <a class="code" href="class_mini_c_sharp_1_1_lexical.htm#b1b98a2924629c5656ad96b9661dc50e">ch</a>;                                         <span class="comment">/* current or lookahead char */</span>
<a name="l00019"></a>00019                 <span class="keyword">private</span> FileInfo fs;                            <span class="comment">/* input file stream part 1 */</span>
<a name="l00020"></a>00020                 <span class="keyword">private</span> StreamReader stream;            <span class="comment">/* input file stream part 2 */</span>
<a name="l00021"></a>00021                 <span class="keyword">private</span> string reader;                          <span class="comment">/* read string from the file stream */</span>
<a name="l00022"></a>00022                 <span class="keyword">private</span> <span class="keywordtype">bool</span> haveToken;                         <span class="comment">/* we have a token, stop reading */</span>
<a name="l00023"></a>00023                 <span class="keyword">private</span> <span class="keywordtype">bool</span> eof;                                       <span class="comment">/* true=eof, false=!eof */</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025                 <span class="comment">/* Lexical()</span>
<a name="l00026"></a>00026 <span class="comment">                 * </span>
<a name="l00027"></a>00027 <span class="comment">                 * Dummy constructor to spit out an error and kill the calling Main()</span>
<a name="l00028"></a>00028 <span class="comment">                 */</span>
<a name="l00029"></a><a class="code" href="class_mini_c_sharp_1_1_lexical.htm#4b9fdfb85472601269cd3dd80b398647">00029</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_lexical.htm#4b9fdfb85472601269cd3dd80b398647">Lexical</a>()
<a name="l00030"></a>00030                 {
<a name="l00031"></a>00031                         System.Console.WriteLine(<span class="stringliteral">"error: default Lexical constructor called, filename needed"</span>);
<a name="l00032"></a>00032                         System.Environment.Exit(1);
<a name="l00033"></a>00033                 }
<a name="l00034"></a>00034 
<a name="l00035"></a>00035                 <span class="comment">/* Lexical()</span>
<a name="l00036"></a>00036 <span class="comment">                 * </span>
<a name="l00037"></a>00037 <span class="comment">                 * The lexical analyzer's contructor, which sets some default values</span>
<a name="l00038"></a>00038 <span class="comment">                 * and opens up the passed in filename</span>
<a name="l00039"></a>00039 <span class="comment">                 */</span>
<a name="l00040"></a><a class="code" href="class_mini_c_sharp_1_1_lexical.htm#94571a11367636ea23e3a7e815851f33">00040</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_lexical.htm#4b9fdfb85472601269cd3dd80b398647">Lexical</a>(string filename)
<a name="l00041"></a>00041                 {
<a name="l00042"></a>00042                         <span class="comment">/* set default values */</span>
<a name="l00043"></a>00043                         CleanUp();
<a name="l00044"></a>00044                         eof = <span class="keyword">false</span>;
<a name="l00045"></a>00045                         
<a name="l00046"></a>00046                         <span class="comment">/* save the filename */</span>
<a name="l00047"></a>00047                         <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.filename = filename;
<a name="l00048"></a>00048                         
<a name="l00049"></a>00049                         <span class="comment">/* open the source file */</span>
<a name="l00050"></a>00050                         <span class="keywordflow">try</span>
<a name="l00051"></a>00051                         {
<a name="l00052"></a>00052                                 fs = <span class="keyword">new</span> FileInfo(filename);
<a name="l00053"></a>00053                                 stream = fs.OpenText();
<a name="l00054"></a>00054                         }
<a name="l00055"></a>00055                         <span class="keywordflow">catch</span>
<a name="l00056"></a>00056                         {
<a name="l00057"></a>00057                                 System.Console.WriteLine(<span class="stringliteral">"There has been an error opening {0}.  The program is terminating."</span>, filename);
<a name="l00058"></a>00058                                 System.Environment.Exit(-1);
<a name="l00059"></a>00059                         }
<a name="l00060"></a>00060                 }
<a name="l00061"></a>00061                 
<a name="l00062"></a>00062                 <span class="comment">/* ~Lexical()</span>
<a name="l00063"></a>00063 <span class="comment">                 * </span>
<a name="l00064"></a>00064 <span class="comment">                 * The lexical analyzer's destructor, closes the file</span>
<a name="l00065"></a>00065 <span class="comment">                 */</span>
<a name="l00066"></a>00066                 ~<a class="code" href="class_mini_c_sharp_1_1_lexical.htm">Lexical</a>()
<a name="l00067"></a>00067                 {
<a name="l00068"></a>00068                         <span class="comment">/* close the source file, set the token to End of File */</span>
<a name="l00069"></a>00069                         <span class="keywordflow">try</span> 
<a name="l00070"></a>00070                         {
<a name="l00071"></a>00071                                 stream.Close();
<a name="l00072"></a>00072                         }
<a name="l00073"></a>00073                         <span class="keywordflow">catch</span>
<a name="l00074"></a>00074                         {
<a name="l00075"></a>00075                                 System.Console.WriteLine(<span class="stringliteral">"error closing {0}"</span>, Globals.filename);
<a name="l00076"></a>00076                         }
<a name="l00077"></a>00077                         
<a name="l00078"></a>00078                         Globals.token = Globals.Symbol._eof;
<a name="l00079"></a>00079                 }
<a name="l00080"></a>00080                 
<a name="l00081"></a>00081                 <span class="comment">/* DisplayOutput()</span>
<a name="l00082"></a>00082 <span class="comment">                 * </span>
<a name="l00083"></a>00083 <span class="comment">                 * Print out information about the token</span>
<a name="l00084"></a>00084 <span class="comment">                 */</span>
<a name="l00085"></a><a class="code" href="class_mini_c_sharp_1_1_lexical.htm#003b54ade87a997c46268ee39bd2687f">00085</a>                 <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_mini_c_sharp_1_1_lexical.htm#003b54ade87a997c46268ee39bd2687f">DisplayOutput</a>()
<a name="l00086"></a>00086                 {
<a name="l00087"></a>00087                         <span class="comment">/* increment the line count */</span>
<a name="l00088"></a>00088                         <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.linecount++;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090                         <span class="comment">/* if we've printed a lot, clear the screen */</span>
<a name="l00091"></a>00091                         <span class="keywordflow">if</span> (<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.linecount &gt; 15)
<a name="l00092"></a>00092                         {
<a name="l00093"></a>00093                                 <span class="comment">/* reset the line count */</span>
<a name="l00094"></a>00094                                 <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.linecount = 0;
<a name="l00095"></a>00095                                 <span class="comment">/* wait for the user to press enter */</span>
<a name="l00096"></a>00096                                 <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Wait(<span class="stringliteral">"\nPress enter to continue..."</span>);
<a name="l00097"></a>00097 
<a name="l00098"></a>00098                                 <span class="comment">/* print out the header */</span>
<a name="l00099"></a>00099                                 <a class="code" href="class_mini_c_sharp_1_1_program.htm">Program</a>.PrintHeader();
<a name="l00100"></a>00100                         }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102                         <span class="comment">/* print out the data */</span>
<a name="l00103"></a>00103                         <span class="keywordflow">switch</span> ((<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.token)
<a name="l00104"></a>00104                         {
<a name="l00105"></a>00105                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._literal:
<a name="l00106"></a>00106                                         System.Console.WriteLine(<span class="stringliteral">"{0,-10}\t\t{1,-10}\t\t{2}"</span>, <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Tokens[(<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.token], <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.lexeme, <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.literal);
<a name="l00107"></a>00107                                         <span class="keywordflow">break</span>;
<a name="l00108"></a>00108                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._number:
<a name="l00109"></a>00109                                         System.Console.WriteLine(<span class="stringliteral">"{0,-10}\t\t{1,-10}\t\t{2}"</span>, <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Tokens[(<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.token], <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.lexeme, <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.value);
<a name="l00110"></a>00110                                         <span class="keywordflow">break</span>;
<a name="l00111"></a>00111                                 <span class="keywordflow">case</span> (<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._numfloat:
<a name="l00112"></a>00112                                         System.Console.WriteLine(<span class="stringliteral">"{0,-10}\t\t{1,-10}\t\t{2}"</span>, <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Tokens[(<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.token], <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.lexeme, <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.valueF);
<a name="l00113"></a>00113                                         <span class="keywordflow">break</span>;
<a name="l00114"></a>00114                                 <span class="keywordflow">default</span>:
<a name="l00115"></a>00115                                         System.Console.WriteLine(<span class="stringliteral">"{0,-10}\t\t{1,-10}"</span>, <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Tokens[(<span class="keywordtype">int</span>)<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.token], <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.lexeme);
<a name="l00116"></a>00116                                         <span class="keywordflow">break</span>;
<a name="l00117"></a>00117                         }
<a name="l00118"></a>00118                         <span class="comment">/* we don't want this stuff now */</span>
<a name="l00119"></a>00119                         <span class="keywordflow">return</span>;
<a name="l00120"></a>00120                 }
<a name="l00121"></a>00121                 
<a name="l00122"></a>00122                 <span class="comment">/* GetNextToken()</span>
<a name="l00123"></a>00123 <span class="comment">                 * </span>
<a name="l00124"></a>00124 <span class="comment">                 * Read the next token from a string of text</span>
<a name="l00125"></a>00125 <span class="comment">                 * and place it into `lexeme`; if a literal</span>
<a name="l00126"></a>00126 <span class="comment">                 * string or integer/floating point number is</span>
<a name="l00127"></a>00127 <span class="comment">                 * found, place it into the appropriate public</span>
<a name="l00128"></a>00128 <span class="comment">                 * variable</span>
<a name="l00129"></a>00129 <span class="comment">                 */</span>
<a name="l00130"></a><a class="code" href="class_mini_c_sharp_1_1_lexical.htm#018294a94ad8b766fd1ba4f8b6b15d23">00130</a>                 <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_mini_c_sharp_1_1_lexical.htm#018294a94ad8b766fd1ba4f8b6b15d23">GetNextToken</a>()
<a name="l00131"></a>00131                 {
<a name="l00132"></a>00132                         <span class="comment">/* skip comments */</span>
<a name="l00133"></a>00133                         <span class="keywordflow">if</span> (reader != null)
<a name="l00134"></a>00134                                 <span class="keywordflow">while</span> (<a class="code" href="class_mini_c_sharp_1_1_lexical.htm#b1b98a2924629c5656ad96b9661dc50e">ch</a> == <span class="charliteral">'/'</span> &amp;&amp; reader[0] == <span class="charliteral">'/'</span>)
<a name="l00135"></a>00135                                 {
<a name="l00136"></a>00136                                         GetNextLine();
<a name="l00137"></a>00137                                         <span class="keywordflow">if</span> (reader == null)
<a name="l00138"></a>00138                                                 <span class="keywordflow">break</span>;
<a name="l00139"></a>00139                                 }
<a name="l00140"></a>00140                         
<a name="l00141"></a>00141                         <span class="comment">/* clean up the mess */</span>
<a name="l00142"></a>00142                         CleanUp();
<a name="l00143"></a>00143                         eof = <span class="keyword">false</span>;
<a name="l00144"></a>00144                         
<a name="l00145"></a>00145                         <span class="comment">/* avoid trying to reference something that doesn't exist */</span>
<a name="l00146"></a>00146                         <span class="keywordflow">if</span> (reader == null)
<a name="l00147"></a>00147                                 GetNextLine();
<a name="l00148"></a>00148 
<a name="l00149"></a>00149                         <span class="comment">/* remove leading and trailing whitespace, if possible */</span>
<a name="l00150"></a>00150                         <span class="keywordflow">try</span> 
<a name="l00151"></a>00151                         {
<a name="l00152"></a>00152                                 reader.Trim();
<a name="l00153"></a>00153                         }
<a name="l00154"></a>00154                         <span class="keywordflow">catch</span> 
<a name="l00155"></a>00155                         {
<a name="l00156"></a>00156                                 <span class="comment">/* nothing */</span>
<a name="l00157"></a>00157                         }
<a name="l00158"></a>00158                         
<a name="l00159"></a>00159                         <span class="comment">/* ignore whitespace */</span>
<a name="l00160"></a>00160                         <span class="keywordflow">while</span> ((<a class="code" href="class_mini_c_sharp_1_1_lexical.htm#b1b98a2924629c5656ad96b9661dc50e">ch</a> &lt;= <span class="charliteral">' '</span>) &amp;&amp; !eof)
<a name="l00161"></a>00161                         {
<a name="l00162"></a>00162                                 GetNextChar();
<a name="l00163"></a>00163                         }
<a name="l00164"></a>00164                         
<a name="l00165"></a>00165                         <span class="comment">/* as long as we read text in, process the token */</span>
<a name="l00166"></a>00166                         <span class="keywordflow">if</span> (reader != null)
<a name="l00167"></a>00167                         {
<a name="l00168"></a>00168                                 ProcessToken();
<a name="l00169"></a>00169                         }
<a name="l00170"></a>00170                 }
<a name="l00171"></a>00171                 
<a name="l00172"></a>00172                 <span class="comment">/* GetNextChar()</span>
<a name="l00173"></a>00173 <span class="comment">                 * </span>
<a name="l00174"></a>00174 <span class="comment">                 * Place the next char into `ch`</span>
<a name="l00175"></a>00175 <span class="comment">                 */</span>
<a name="l00176"></a>00176                 <span class="keyword">private</span> <span class="keywordtype">void</span> GetNextChar()
<a name="l00177"></a>00177                 {
<a name="l00178"></a>00178                         <span class="comment">/* clear out the current value */</span>
<a name="l00179"></a>00179                         <a class="code" href="class_mini_c_sharp_1_1_lexical.htm#b1b98a2924629c5656ad96b9661dc50e">ch</a> = (char)0;
<a name="l00180"></a>00180                         
<a name="l00181"></a>00181                         <span class="comment">/* stop if eof */</span>
<a name="l00182"></a>00182                         <span class="keywordflow">if</span> (eof)
<a name="l00183"></a>00183                         {
<a name="l00184"></a>00184                                 <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.token = <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.Symbol._eof;
<a name="l00185"></a>00185                                 <span class="keywordflow">return</span>;
<a name="l00186"></a>00186                         }
<a name="l00187"></a>00187                         
<a name="l00188"></a>00188                         <span class="comment">/* don't try to access the Length property if we have no string */</span>
<a name="l00189"></a>00189                         <span class="keywordtype">bool</span> newLine = <span class="keyword">false</span>;
<a name="l00190"></a>00190                         <span class="keywordflow">if</span> ((reader == null) || (reader == <span class="stringliteral">""</span>))
<a name="l00191"></a>00191                         {
<a name="l00192"></a>00192                                 <span class="keywordflow">try</span>
<a name="l00193"></a>00193                                 {
<a name="l00194"></a>00194                                         GetNextLine();
<a name="l00195"></a>00195                                         newLine = <span class="keyword">true</span>;
<a name="l00196"></a>00196                                 }
<a name="l00197"></a>00197                                 <span class="keywordflow">catch</span>
<a name="l00198"></a>00198                                 {
<a name="l00199"></a>00199                                         <span class="comment">/* nothing to do */</span>
<a name="l00200"></a>00200                                 }
<a name="l00201"></a>00201                         }
<a name="l00202"></a>00202                         
<a name="l00203"></a>00203                         <span class="keywordflow">if</span> (!newLine &amp;&amp; (Globals.token != Globals.Symbol._eof))
<a name="l00204"></a>00204                         {
<a name="l00205"></a>00205                                 <span class="keywordflow">if</span> (reader != null)
<a name="l00206"></a>00206                                 {
<a name="l00207"></a>00207                                         <span class="keywordflow">if</span> (reader.Length &gt; 0)
<a name="l00208"></a>00208                                         {
<a name="l00209"></a>00209                                                 <span class="comment">/* place the next character into `ch` */</span>
<a name="l00210"></a>00210                                                 <a class="code" href="class_mini_c_sharp_1_1_lexical.htm#b1b98a2924629c5656ad96b9661dc50e">ch</a> = reader[0];
<a name="l00211"></a>00211                                         
<a name="l00212"></a>00212                                                 <span class="comment">/* remove `ch` from reader */</span>
<a name="l00213"></a>00213                                                 reader = reader.Substring(1, reader.Length - 1);
<a name="l00214"></a>00214                                         }
<a name="l00215"></a>00215                                         <span class="keywordflow">else</span>
<a name="l00216"></a>00216                                         {
<a name="l00217"></a>00217                                                 GetNextLine();
<a name="l00218"></a>00218                                         }
<a name="l00219"></a>00219                                 }
<a name="l00220"></a>00220                         }
<a name="l00221"></a>00221                 }
<a name="l00222"></a>00222                 
<a name="l00223"></a>00223                 <span class="comment">/* GetNextLine()</span>
<a name="l00224"></a>00224 <span class="comment">                 * </span>
<a name="l00225"></a>00225 <span class="comment">                 * Read the next line from the source file</span>
<a name="l00226"></a>00226 <span class="comment">                 */</span>
<a name="l00227"></a>00227                 <span class="keyword">private</span> <span class="keywordtype">void</span> GetNextLine()
<a name="l00228"></a>00228                 {
<a name="l00229"></a>00229                         <span class="keywordflow">try</span>
<a name="l00230"></a>00230                         {
<a name="l00231"></a>00231                                 <span class="comment">/* read a line from the file */</span>
<a name="l00232"></a>00232                                 reader = stream.ReadLine();
<a name="l00233"></a>00233                                 Globals.curLine++;
<a name="l00234"></a>00234 
<a name="l00235"></a>00235                                 <span class="comment">/* set eof if needed */</span>
<a name="l00236"></a>00236                                 <span class="keywordflow">if</span> (reader == null)
<a name="l00237"></a>00237                                 {
<a name="l00238"></a>00238                                         eof = <span class="keyword">true</span>;
<a name="l00239"></a>00239                                         Globals.token = Globals.Symbol._eof;
<a name="l00240"></a>00240                                         <span class="keywordflow">return</span>;
<a name="l00241"></a>00241                                 }
<a name="l00242"></a>00242                                 
<a name="l00243"></a>00243                                 <span class="comment">/* make sure we don't have a blank line */</span>
<a name="l00244"></a>00244                                 reader.Trim();
<a name="l00245"></a>00245                                 <span class="keywordflow">while</span> (reader.Length == 0)
<a name="l00246"></a>00246                                 {
<a name="l00247"></a>00247                                         reader = stream.ReadLine();
<a name="l00248"></a>00248                                         
<a name="l00249"></a>00249                                         <span class="keywordflow">if</span> (reader == null)
<a name="l00250"></a>00250                                         {
<a name="l00251"></a>00251                                                 eof = <span class="keyword">true</span>;
<a name="l00252"></a>00252                                                 Globals.token = Globals.Symbol._eof;
<a name="l00253"></a>00253                                                 <span class="keywordflow">return</span>;
<a name="l00254"></a>00254                                         }
<a name="l00255"></a>00255                                         
<a name="l00256"></a>00256                                         reader.Trim();
<a name="l00257"></a>00257                                 }
<a name="l00258"></a>00258 
<a name="l00259"></a>00259                                 <span class="comment">/* save the first character */</span>
<a name="l00260"></a>00260                                 <a class="code" href="class_mini_c_sharp_1_1_lexical.htm#b1b98a2924629c5656ad96b9661dc50e">ch</a> = reader[0];
<a name="l00261"></a>00261                                 
<a name="l00262"></a>00262                                 <span class="comment">/* clear whitespace */</span>
<a name="l00263"></a>00263                                 <span class="keywordflow">while</span> (Char.IsWhiteSpace(<a class="code" href="class_mini_c_sharp_1_1_lexical.htm#b1b98a2924629c5656ad96b9661dc50e">ch</a>))
<a name="l00264"></a>00264                                 {
<a name="l00265"></a>00265                                         reader = reader.Substring(1, reader.Length - 1);
<a name="l00266"></a>00266                                         <a class="code" href="class_mini_c_sharp_1_1_lexical.htm#b1b98a2924629c5656ad96b9661dc50e">ch</a> = reader[0];
<a name="l00267"></a>00267                                 }
<a name="l00268"></a>00268 
<a name="l00269"></a>00269                                 <span class="comment">/* remove `ch` from reader */</span>
<a name="l00270"></a>00270                                 reader = reader.Substring(1, reader.Length - 1);
<a name="l00271"></a>00271                         }
<a name="l00272"></a>00272                         <span class="keywordflow">catch</span>
<a name="l00273"></a>00273                         {
<a name="l00274"></a>00274                                 <span class="comment">/* r795: changed to call GetNextLine() recursively   */</span>
<a name="l00275"></a>00275                                 <span class="comment">/*       now, a line of just whitespace doesn't kill */</span>
<a name="l00276"></a>00276                                 <span class="comment">/*       the parser when it gets _unknown instead of */</span>
<a name="l00277"></a>00277                                 <span class="comment">/*       a real value                                */</span>
<a name="l00278"></a>00278                                 <span class="comment">//CleanUp();</span>
<a name="l00279"></a>00279                                 <span class="comment">//eof = true;</span>
<a name="l00280"></a>00280                                 <span class="comment">//Globals.token = Globals.Symbol._unknown;</span>
<a name="l00281"></a>00281                                 <span class="comment">//reader = "";</span>
<a name="l00282"></a>00282                                 GetNextLine();
<a name="l00283"></a>00283                         }
<a name="l00284"></a>00284                 }
<a name="l00285"></a>00285                 
<a name="l00286"></a>00286                 <span class="comment">/* ProcessToken()</span>
<a name="l00287"></a>00287 <span class="comment">                 * </span>
<a name="l00288"></a>00288 <span class="comment">                 * Decide which function to use to process</span>
<a name="l00289"></a>00289 <span class="comment">                 * a given token</span>
<a name="l00290"></a>00290 <span class="comment">                 */</span>
<a name="l00291"></a>00291                 <span class="keyword">private</span> <span class="keywordtype">void</span> ProcessToken()
<a name="l00292"></a>00292                 {
<a name="l00293"></a>00293                         <span class="keywordflow">if</span> (haveToken)
<a name="l00294"></a>00294                                 <span class="keywordflow">return</span>;
<a name="l00295"></a>00295                         
<a name="l00296"></a>00296                         <span class="keywordflow">if</span> (!Char.IsWhiteSpace(ch))
<a name="l00297"></a>00297                                 Globals.lexeme = ch.ToString();
<a name="l00298"></a>00298                         <span class="keywordflow">else</span>
<a name="l00299"></a>00299                                 Globals.lexeme = <span class="stringliteral">""</span>;
<a name="l00300"></a>00300 
<a name="l00301"></a>00301                         <span class="comment">/* grab the next character so we know if it's a comment/2-char operator */</span>
<a name="l00302"></a>00302                         GetNextChar();
<a name="l00303"></a>00303                         
<a name="l00304"></a>00304                         <span class="keywordflow">try</span> 
<a name="l00305"></a>00305                         {
<a name="l00306"></a>00306                                 <span class="keywordflow">if</span> (Char.IsLetter(Globals.lexeme[0]) || Globals.lexeme[0] == <span class="charliteral">'_'</span>)       <span class="comment">/* word */</span>
<a name="l00307"></a>00307                                 {
<a name="l00308"></a>00308                                         ProcessWordToken();
<a name="l00309"></a>00309                                 }
<a name="l00310"></a>00310                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (Char.IsDigit(Globals.lexeme[0]))                                                       <span class="comment">/* number */</span>
<a name="l00311"></a>00311                                 {
<a name="l00312"></a>00312                                         ProcessNumericToken();
<a name="l00313"></a>00313                                 }
<a name="l00314"></a>00314                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((Globals.lexeme[0] == <span class="charliteral">'\"'</span>) || (Globals.lexeme[0] == <span class="charliteral">'\''</span>))    <span class="comment">/* literal */</span>
<a name="l00315"></a>00315                                 {
<a name="l00316"></a>00316                                         ProcessLiteral();
<a name="l00317"></a>00317                                 }
<a name="l00318"></a>00318                                 <span class="keywordflow">else</span>
<a name="l00319"></a>00319                                 {
<a name="l00320"></a>00320                                         <span class="comment">/* for complex operations (+=, -=, /=, *=, %=, ==, !=, etc), lex[0]</span>
<a name="l00321"></a>00321 <span class="comment">                                         * holds the first character and ch holds the second */</span>
<a name="l00322"></a>00322                                         <span class="keywordflow">if</span> (CCType.IsOperator(Globals.lexeme[0]) &amp;&amp; CCType.IsOperator(ch))      <span class="comment">/* 2-character operator */</span>
<a name="l00323"></a>00323                                         {
<a name="l00324"></a>00324                                                 <span class="comment">/* deal with comments */</span>
<a name="l00325"></a>00325                                                 <span class="keywordflow">if</span> ((Globals.lexeme[0] == <span class="charliteral">'/'</span>) &amp;&amp; (ch == <span class="charliteral">'/'</span>))
<a name="l00326"></a>00326                                                 {
<a name="l00327"></a>00327                                                         ProcessComment();
<a name="l00328"></a>00328                                                         <span class="comment">//Globals.token = Globals.Symbol._comment;</span>
<a name="l00329"></a>00329                                                         <span class="comment">//GetNextToken();</span>
<a name="l00330"></a>00330                                                 }
<a name="l00331"></a>00331                                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((reader[0] == <span class="charliteral">'/'</span>) &amp;&amp; (ch == <span class="charliteral">'/'</span>))
<a name="l00332"></a>00332                                                 {
<a name="l00333"></a>00333                                                         ProcessComment();
<a name="l00334"></a>00334                                                         <span class="comment">//Globals.token = Globals.Symbol._comment;</span>
<a name="l00335"></a>00335                                                         <span class="comment">//GetNextToken();</span>
<a name="l00336"></a>00336                                                 }
<a name="l00337"></a>00337                                                 <span class="keywordflow">else</span>
<a name="l00338"></a>00338                                                 {
<a name="l00339"></a>00339                                                         ProcessDoubleToken();
<a name="l00340"></a>00340                                                         GetNextChar();
<a name="l00341"></a>00341                                                 }
<a name="l00342"></a>00342                                         }
<a name="l00343"></a>00343                                         <span class="keywordflow">else</span>
<a name="l00344"></a>00344                                                 ProcessSingleToken();
<a name="l00345"></a>00345                                 }
<a name="l00346"></a>00346                         }
<a name="l00347"></a>00347                         <span class="keywordflow">catch</span>
<a name="l00348"></a>00348                         {
<a name="l00349"></a>00349                                 <span class="comment">/* let's just ignore it -- that's good programming, right? */</span>
<a name="l00350"></a>00350                         }
<a name="l00351"></a>00351                 }
<a name="l00352"></a>00352                 
<a name="l00353"></a>00353                 <span class="comment">/* ProcessWordToken()</span>
<a name="l00354"></a>00354 <span class="comment">                 * </span>
<a name="l00355"></a>00355 <span class="comment">                 * Process an alphanumeric (+ underscore) token</span>
<a name="l00356"></a>00356 <span class="comment">                 */</span>
<a name="l00357"></a>00357                 <span class="keyword">private</span> <span class="keywordtype">void</span> ProcessWordToken()
<a name="l00358"></a>00358                 {
<a name="l00359"></a>00359                         <span class="comment">/* fill lexeme */</span>
<a name="l00360"></a>00360                         <span class="keywordflow">while</span> ((Char.IsLetter(ch) || Char.IsDigit(ch) || ch == <span class="charliteral">'_'</span>) &amp;&amp; !eof)
<a name="l00361"></a>00361                         {
<a name="l00362"></a>00362                                 Globals.lexeme += ch.ToString();
<a name="l00363"></a>00363                                 GetNextChar();
<a name="l00364"></a>00364                         }
<a name="l00365"></a>00365                         
<a name="l00366"></a>00366                         <span class="comment">/* check to see if we have a reserved word */</span>
<a name="l00367"></a>00367                         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> count = 0; count &lt; Globals.ReservedWords.Length; count++)
<a name="l00368"></a>00368                         {
<a name="l00369"></a>00369                                 <span class="keywordflow">if</span> (Globals.lexeme == Globals.ReservedWords[count])
<a name="l00370"></a>00370                                 {
<a name="l00371"></a>00371                                         Globals.token = (Globals.Symbol)count;
<a name="l00372"></a>00372                                         haveToken = <span class="keyword">true</span>;
<a name="l00373"></a>00373                                         <span class="keywordflow">break</span>;
<a name="l00374"></a>00374                                 }
<a name="l00375"></a>00375                         }
<a name="l00376"></a>00376                         
<a name="l00377"></a>00377                         <span class="comment">/* if we get here, we've got an identifier */</span>
<a name="l00378"></a>00378                         <span class="keywordflow">if</span> (Globals.token == Globals.Symbol._unknown)
<a name="l00379"></a>00379                         {
<a name="l00380"></a>00380                                 Globals.token = Globals.Symbol._identifier;
<a name="l00381"></a>00381                                 haveToken = <span class="keyword">true</span>;
<a name="l00382"></a>00382                         }
<a name="l00383"></a>00383                 }
<a name="l00384"></a>00384                 
<a name="l00385"></a>00385                 <span class="comment">/* ProcessNumericToken()</span>
<a name="l00386"></a>00386 <span class="comment">                 * </span>
<a name="l00387"></a>00387 <span class="comment">                 * Read in until no more digits or more than one</span>
<a name="l00388"></a>00388 <span class="comment">                 * period is found, leave the string in lexeme and</span>
<a name="l00389"></a>00389 <span class="comment">                 * the value in value or valueF, depending on int/float</span>
<a name="l00390"></a>00390 <span class="comment">                 */</span>
<a name="l00391"></a>00391                 <span class="keyword">private</span> <span class="keywordtype">void</span> ProcessNumericToken()
<a name="l00392"></a>00392                 {
<a name="l00393"></a>00393                         <span class="keywordtype">bool</span> havePeriod = <span class="keyword">false</span>;                <span class="comment">/* only allow one decimal point */</span>
<a name="l00394"></a>00394 
<a name="l00395"></a>00395                         <span class="comment">/* fill lexeme */</span>
<a name="l00396"></a>00396                         <span class="keywordflow">while</span> (Char.IsDigit(ch) || (ch == <span class="charliteral">'.'</span>) &amp;&amp; !eof)
<a name="l00397"></a>00397                         {
<a name="l00398"></a>00398                                 <span class="keywordflow">if</span> (Char.IsDigit(ch) || (ch == <span class="charliteral">'.'</span>))
<a name="l00399"></a>00399                                 {
<a name="l00400"></a>00400                                         <span class="comment">/* kill the '12..05' bug */</span>
<a name="l00401"></a>00401                                         <span class="keywordflow">if</span> ((ch == <span class="charliteral">'.'</span>) &amp;&amp; havePeriod)
<a name="l00402"></a>00402                                         {
<a name="l00403"></a>00403                                                 Globals.lexeme += ch;
<a name="l00404"></a>00404                                                 while ((Char.IsDigit(ch) || (ch == <span class="charliteral">'.'</span>)) &amp;&amp; !eof)
<a name="l00405"></a>00405                                                 {
<a name="l00406"></a>00406                                                         GetNextChar();
<a name="l00407"></a>00407                                                         <span class="keywordflow">if</span> (Char.IsDigit(ch) || (ch == <span class="charliteral">'.'</span>))
<a name="l00408"></a>00408                                                                 Globals.lexeme += ch;
<a name="l00409"></a>00409                                                 }
<a name="l00410"></a>00410                                                 
<a name="l00411"></a>00411                                                 System.Console.WriteLine(<span class="stringliteral">"error: {0}:{1}: \"{2}\" is an invalid number"</span>, Globals.filename, Globals.curLine, Globals.lexeme);
<a name="l00412"></a>00412                                                 System.Environment.Exit(-2);
<a name="l00413"></a>00413                                         }
<a name="l00414"></a>00414                                         
<a name="l00415"></a>00415                                         Globals.lexeme += ch;
<a name="l00416"></a>00416                                 }
<a name="l00417"></a>00417                                 
<a name="l00418"></a>00418                                 <span class="keywordflow">if</span> (ch == <span class="charliteral">'.'</span>)
<a name="l00419"></a>00419                                         havePeriod = <span class="keyword">true</span>;
<a name="l00420"></a>00420                                 
<a name="l00421"></a>00421                                 GetNextChar();
<a name="l00422"></a>00422                         }
<a name="l00423"></a>00423                         
<a name="l00424"></a>00424                         <span class="comment">/* convert the string to a number and return the token type */</span>
<a name="l00425"></a>00425                         <span class="keywordflow">if</span> (havePeriod)
<a name="l00426"></a>00426                         {       
<a name="l00427"></a>00427                                 Globals.value = 0;
<a name="l00428"></a>00428                                 Globals.valueF = System.Convert.ToDouble(Globals.lexeme);
<a name="l00429"></a>00429                                 Globals.token = Globals.Symbol._numfloat;
<a name="l00430"></a>00430                                 haveToken = <span class="keyword">true</span>;
<a name="l00431"></a>00431                         }
<a name="l00432"></a>00432                         <span class="keywordflow">else</span>
<a name="l00433"></a>00433                         {
<a name="l00434"></a>00434                                 Globals.value = System.Convert.ToInt32(Globals.lexeme);
<a name="l00435"></a>00435                                 Globals.valueF = 0.0;
<a name="l00436"></a>00436                                 Globals.token = Globals.Symbol._number;
<a name="l00437"></a>00437                                 haveToken = <span class="keyword">true</span>;
<a name="l00438"></a>00438                         }
<a name="l00439"></a>00439                 }
<a name="l00440"></a>00440                 
<a name="l00441"></a>00441                 <span class="comment">/* ProcessCommentToken()</span>
<a name="l00442"></a>00442 <span class="comment">                 * </span>
<a name="l00443"></a>00443 <span class="comment">                 * Take care of (read: ignore) comments</span>
<a name="l00444"></a>00444 <span class="comment">                 */</span>
<a name="l00445"></a>00445                 <span class="keyword">private</span> <span class="keywordtype">void</span> ProcessComment()
<a name="l00446"></a>00446                 {       
<a name="l00447"></a>00447                         <span class="comment">/* By the time we get to this chunk of code, ch holds '/' and</span>
<a name="l00448"></a>00448 <span class="comment">                         * Globals.lexeme[0] holds '/', we know we've got a comment.</span>
<a name="l00449"></a>00449 <span class="comment">                         * Since double slash comments extend to the end of the line,</span>
<a name="l00450"></a>00450 <span class="comment">                         * nothing more has to be done with the line of text we have.</span>
<a name="l00451"></a>00451 <span class="comment">                         * Wipe it out and let a parent function read in the next line. */</span>
<a name="l00452"></a>00452                         reader = <span class="stringliteral">""</span>;
<a name="l00453"></a>00453                         Globals.token = Globals.Symbol._comment;
<a name="l00454"></a>00454                         GetNextLine();
<a name="l00455"></a>00455                         GetNextToken();
<a name="l00456"></a>00456                 }
<a name="l00457"></a>00457                 
<a name="l00458"></a>00458                 <span class="comment">/* ProcessSingleToken()</span>
<a name="l00459"></a>00459 <span class="comment">                 * </span>
<a name="l00460"></a>00460 <span class="comment">                 * Deal with single operators...assignop, mulop, addop, and so forth</span>
<a name="l00461"></a>00461 <span class="comment">                 */</span>
<a name="l00462"></a>00462                 <span class="keyword">private</span> <span class="keywordtype">void</span> ProcessSingleToken()
<a name="l00463"></a>00463                 {
<a name="l00464"></a>00464                         <span class="comment">/* ch holds the operator */</span>
<a name="l00465"></a>00465                         <span class="keywordflow">switch</span> (Globals.lexeme[0])
<a name="l00466"></a>00466                         {
<a name="l00467"></a>00467                                 <span class="keywordflow">case</span> <span class="charliteral">'&lt;'</span>: <span class="keywordflow">case</span> <span class="charliteral">'&gt;'</span>:
<a name="l00468"></a>00468                                         Globals.token = Globals.Symbol._relop;
<a name="l00469"></a>00469                                         haveToken = <span class="keyword">true</span>;
<a name="l00470"></a>00470                                         <span class="keywordflow">break</span>;
<a name="l00471"></a>00471                                 <span class="keywordflow">case</span> <span class="charliteral">'!'</span>:
<a name="l00472"></a>00472                                         Globals.token = Globals.Symbol._unarynot;
<a name="l00473"></a>00473                                         haveToken = <span class="keyword">true</span>;
<a name="l00474"></a>00474                                         <span class="keywordflow">break</span>;
<a name="l00475"></a>00475                                 <span class="keywordflow">case</span> <span class="charliteral">'+'</span>:
<a name="l00476"></a>00476                                         Globals.token = Globals.Symbol._addop;
<a name="l00477"></a>00477                                         haveToken = <span class="keyword">true</span>;
<a name="l00478"></a>00478                                         <span class="keywordflow">break</span>;
<a name="l00479"></a>00479                                 <span class="keywordflow">case</span> <span class="charliteral">'-'</span>:
<a name="l00480"></a>00480                                         Globals.token = Globals.Symbol._signop;
<a name="l00481"></a>00481                                         haveToken = <span class="keyword">true</span>;
<a name="l00482"></a>00482                                         <span class="keywordflow">break</span>;
<a name="l00483"></a>00483                                 <span class="keywordflow">case</span> <span class="charliteral">'*'</span>: <span class="keywordflow">case</span> <span class="charliteral">'/'</span>:
<a name="l00484"></a>00484                                         Globals.token = Globals.Symbol._mulop;
<a name="l00485"></a>00485                                         haveToken = <span class="keyword">true</span>;
<a name="l00486"></a>00486                                         <span class="keywordflow">break</span>;
<a name="l00487"></a>00487                                 <span class="keywordflow">case</span> <span class="charliteral">'='</span>:
<a name="l00488"></a>00488                                         Globals.token = Globals.Symbol._assignop;
<a name="l00489"></a>00489                                         haveToken = <span class="keyword">true</span>;
<a name="l00490"></a>00490                                         <span class="keywordflow">break</span>;
<a name="l00491"></a>00491                                 <span class="keywordflow">case</span> <span class="charliteral">'('</span>:
<a name="l00492"></a>00492                                         Globals.token = Globals.Symbol._lparen;
<a name="l00493"></a>00493                                         haveToken = <span class="keyword">true</span>;
<a name="l00494"></a>00494                                         <span class="keywordflow">break</span>;
<a name="l00495"></a>00495                                 <span class="keywordflow">case</span> <span class="charliteral">')'</span>:
<a name="l00496"></a>00496                                         Globals.token = Globals.Symbol._rparen;
<a name="l00497"></a>00497                                         haveToken = <span class="keyword">true</span>;
<a name="l00498"></a>00498                                         <span class="keywordflow">break</span>;
<a name="l00499"></a>00499                                 <span class="keywordflow">case</span> <span class="charliteral">'{'</span>:
<a name="l00500"></a>00500                                         Globals.token = Globals.Symbol._lbrace;
<a name="l00501"></a>00501                                         haveToken = <span class="keyword">true</span>;
<a name="l00502"></a>00502                                         <span class="keywordflow">break</span>;
<a name="l00503"></a>00503                                 <span class="keywordflow">case</span> <span class="charliteral">'}'</span>:
<a name="l00504"></a>00504                                         Globals.token = Globals.Symbol._rbrace;
<a name="l00505"></a>00505                                         haveToken = <span class="keyword">true</span>;
<a name="l00506"></a>00506                                         <span class="keywordflow">break</span>;
<a name="l00507"></a>00507                                 <span class="keywordflow">case</span> <span class="charliteral">'['</span>:
<a name="l00508"></a>00508                                         Globals.token = Globals.Symbol._lbracket;
<a name="l00509"></a>00509                                         haveToken = <span class="keyword">true</span>;
<a name="l00510"></a>00510                                         <span class="keywordflow">break</span>;
<a name="l00511"></a>00511                                 <span class="keywordflow">case</span> <span class="charliteral">']'</span>:
<a name="l00512"></a>00512                                         Globals.token = Globals.Symbol._rbracket;
<a name="l00513"></a>00513                                         haveToken = <span class="keyword">true</span>;
<a name="l00514"></a>00514                                         <span class="keywordflow">break</span>;
<a name="l00515"></a>00515                                 <span class="keywordflow">case</span> <span class="charliteral">','</span>:
<a name="l00516"></a>00516                                         Globals.token = Globals.Symbol._comma;
<a name="l00517"></a>00517                                         haveToken = <span class="keyword">true</span>;
<a name="l00518"></a>00518                                         <span class="keywordflow">break</span>;
<a name="l00519"></a>00519                                 <span class="keywordflow">case</span> <span class="charliteral">':'</span>:
<a name="l00520"></a>00520                                         Globals.token = Globals.Symbol._colon;
<a name="l00521"></a>00521                                         haveToken = <span class="keyword">true</span>;
<a name="l00522"></a>00522                                         <span class="keywordflow">break</span>;
<a name="l00523"></a>00523                                 <span class="keywordflow">case</span> <span class="charliteral">';'</span>:
<a name="l00524"></a>00524                                         Globals.token = Globals.Symbol._semicolon;
<a name="l00525"></a>00525                                         haveToken = <span class="keyword">true</span>;
<a name="l00526"></a>00526                                         <span class="keywordflow">break</span>;
<a name="l00527"></a>00527                                 <span class="keywordflow">case</span> <span class="charliteral">'.'</span>:
<a name="l00528"></a>00528                                         Globals.token = Globals.Symbol._period;
<a name="l00529"></a>00529                                         haveToken = <span class="keyword">true</span>;
<a name="l00530"></a>00530                                         <span class="keywordflow">break</span>;
<a name="l00531"></a>00531                                 <span class="keywordflow">case</span> <span class="charliteral">'\''</span>:
<a name="l00532"></a>00532                                         Globals.token = Globals.Symbol._quote;
<a name="l00533"></a>00533                                         haveToken = <span class="keyword">true</span>;
<a name="l00534"></a>00534                                         <span class="keywordflow">break</span>;
<a name="l00535"></a>00535                                 <span class="keywordflow">case</span> <span class="charliteral">'"'</span>:
<a name="l00536"></a>00536                                         Globals.token = Globals.Symbol._dquote;
<a name="l00537"></a>00537                                         haveToken = <span class="keyword">true</span>;
<a name="l00538"></a>00538                                         <span class="keywordflow">break</span>;
<a name="l00539"></a>00539                                 <span class="keywordflow">case</span> <span class="charliteral">'&amp;'</span>:
<a name="l00540"></a>00540                                         Globals.token = Globals.Symbol._bandop;
<a name="l00541"></a>00541                                         haveToken = <span class="keyword">true</span>;
<a name="l00542"></a>00542                                         <span class="keywordflow">break</span>;
<a name="l00543"></a>00543                                 <span class="keywordflow">case</span> <span class="charliteral">'|'</span>:
<a name="l00544"></a>00544                                         Globals.token = Globals.Symbol._borop;
<a name="l00545"></a>00545                                         haveToken = <span class="keyword">true</span>;
<a name="l00546"></a>00546                                         <span class="keywordflow">break</span>;
<a name="l00547"></a>00547                                 <span class="keywordflow">default</span>:
<a name="l00548"></a>00548                                         Globals.token = Globals.Symbol._unknown;
<a name="l00549"></a>00549                                         haveToken = <span class="keyword">true</span>;
<a name="l00550"></a>00550                                         <span class="keywordflow">break</span>;
<a name="l00551"></a>00551                         }
<a name="l00552"></a>00552                 }
<a name="l00553"></a>00553                 
<a name="l00554"></a>00554                 <span class="comment">/* ProcessDoubleToken()</span>
<a name="l00555"></a>00555 <span class="comment">                 * </span>
<a name="l00556"></a>00556 <span class="comment">                 * Take care of two-character operators, such as += -= *= /= %=</span>
<a name="l00557"></a>00557 <span class="comment">                 * and so on</span>
<a name="l00558"></a>00558 <span class="comment">                 */</span>
<a name="l00559"></a>00559                 <span class="keyword">private</span> <span class="keywordtype">void</span> ProcessDoubleToken()
<a name="l00560"></a>00560                 {
<a name="l00561"></a>00561                         <span class="comment">/* ch holds &lt; &gt; = !</span>
<a name="l00562"></a>00562 <span class="comment">                         * Globals.lexeme[0] holds =</span>
<a name="l00563"></a>00563 <span class="comment">                         */</span>
<a name="l00564"></a>00564                         <span class="keywordflow">switch</span> (Globals.lexeme[0])
<a name="l00565"></a>00565                         {
<a name="l00566"></a>00566                                 <span class="keywordflow">case</span> <span class="charliteral">'+'</span>: <span class="keywordflow">case</span> <span class="charliteral">'-'</span>: <span class="keywordflow">case</span> <span class="charliteral">'/'</span>: <span class="keywordflow">case</span> <span class="charliteral">'*'</span>: <span class="keywordflow">case</span> <span class="charliteral">'%'</span>:
<a name="l00567"></a>00567                                         Globals.token = Globals.Symbol._assignop;
<a name="l00568"></a>00568                                         Globals.lexeme = Globals.lexeme[0] + ch.ToString();
<a name="l00569"></a>00569                                         haveToken = <span class="keyword">true</span>;
<a name="l00570"></a>00570                                         <span class="keywordflow">break</span>;
<a name="l00571"></a>00571                                 <span class="keywordflow">case</span> <span class="charliteral">'&lt;'</span>: <span class="keywordflow">case</span> <span class="charliteral">'&gt;'</span>:
<a name="l00572"></a>00572                                         Globals.token = Globals.Symbol._relop;
<a name="l00573"></a>00573                                         Globals.lexeme = Globals.lexeme[0] + ch.ToString();
<a name="l00574"></a>00574                                         haveToken = <span class="keyword">true</span>;
<a name="l00575"></a>00575                                         <span class="keywordflow">break</span>;
<a name="l00576"></a>00576                                 <span class="keywordflow">case</span> <span class="charliteral">'='</span>: <span class="keywordflow">case</span> <span class="charliteral">'!'</span>:
<a name="l00577"></a>00577                                         Globals.token = Globals.Symbol._condop;
<a name="l00578"></a>00578                                         Globals.lexeme = Globals.lexeme[0] + ch.ToString();
<a name="l00579"></a>00579                                         haveToken = <span class="keyword">true</span>;
<a name="l00580"></a>00580                                         <span class="keywordflow">break</span>;
<a name="l00581"></a>00581                                 <span class="keywordflow">case</span> <span class="charliteral">'&amp;'</span>:
<a name="l00582"></a>00582                                         <span class="keywordflow">if</span> (ch == <span class="charliteral">'&amp;'</span>)
<a name="l00583"></a>00583                                         {
<a name="l00584"></a>00584                                                 Globals.token = Globals.Symbol._andop;
<a name="l00585"></a>00585                                                 Globals.lexeme = Globals.lexeme[0] + ch.ToString();
<a name="l00586"></a>00586                                                 haveToken = <span class="keyword">true</span>;
<a name="l00587"></a>00587                                         }
<a name="l00588"></a>00588                                         <span class="keywordflow">break</span>;
<a name="l00589"></a>00589                                 <span class="keywordflow">case</span> <span class="charliteral">'|'</span>:
<a name="l00590"></a>00590                                         <span class="keywordflow">if</span> (ch == <span class="charliteral">'|'</span>)
<a name="l00591"></a>00591                                         {
<a name="l00592"></a>00592                                                 Globals.token = Globals.Symbol._orop;
<a name="l00593"></a>00593                                                 Globals.lexeme = Globals.lexeme[0] + ch.ToString();
<a name="l00594"></a>00594                                                 haveToken = <span class="keyword">true</span>;
<a name="l00595"></a>00595                                         }
<a name="l00596"></a>00596                                         <span class="keywordflow">break</span>;
<a name="l00597"></a>00597                                 <span class="keywordflow">default</span>:
<a name="l00598"></a>00598                                         <span class="keywordflow">if</span> (!CCType.IsOperator(Globals.lexeme[0]))
<a name="l00599"></a>00599                                         {
<a name="l00600"></a>00600                                                 ProcessSingleToken();
<a name="l00601"></a>00601                                                 <span class="keywordflow">break</span>;
<a name="l00602"></a>00602                                         }
<a name="l00603"></a>00603                                         Globals.token = Globals.Symbol._unknown;
<a name="l00604"></a>00604                                         haveToken = <span class="keyword">true</span>;
<a name="l00605"></a>00605                                         <span class="keywordflow">break</span>;
<a name="l00606"></a>00606                         }
<a name="l00607"></a>00607                 }
<a name="l00608"></a>00608 
<a name="l00609"></a>00609                 <span class="comment">/* ProcessLiteral()</span>
<a name="l00610"></a>00610 <span class="comment">                 * </span>
<a name="l00611"></a>00611 <span class="comment">                 * Take care of literals</span>
<a name="l00612"></a>00612 <span class="comment">                 */</span>
<a name="l00613"></a>00613                 <span class="keyword">private</span> <span class="keywordtype">void</span> ProcessLiteral()
<a name="l00614"></a>00614                 {
<a name="l00615"></a>00615                         <span class="keywordtype">char</span> findMe;
<a name="l00616"></a>00616                         <span class="keywordtype">bool</span> dblQuote;
<a name="l00617"></a>00617 
<a name="l00618"></a>00618                         <span class="comment">/* keep track of the character to look for */</span>
<a name="l00619"></a>00619                         findMe = Globals.lexeme[0];
<a name="l00620"></a>00620                         Globals.literal = <span class="stringliteral">""</span>;
<a name="l00621"></a>00621 
<a name="l00622"></a>00622                         <span class="comment">/* what kind of quote do we have? */</span>
<a name="l00623"></a>00623                         <span class="keywordflow">if</span> (findMe == <span class="charliteral">'\"'</span>)
<a name="l00624"></a>00624                                 dblQuote = <span class="keyword">true</span>;
<a name="l00625"></a>00625                         <span class="keywordflow">else</span>
<a name="l00626"></a>00626                                 dblQuote = <span class="keyword">false</span>;
<a name="l00627"></a>00627 
<a name="l00628"></a>00628                         <span class="comment">/* print out the information about the current quote mark */</span>
<a name="l00629"></a>00629                         Globals.lexeme = findMe.ToString();
<a name="l00630"></a>00630                         <span class="keywordflow">if</span> (dblQuote)
<a name="l00631"></a>00631                                 Globals.token = Globals.Symbol._dquote;
<a name="l00632"></a>00632                         <span class="keywordflow">else</span>
<a name="l00633"></a>00633                                 Globals.token = Globals.Symbol._quote;
<a name="l00634"></a>00634 
<a name="l00635"></a>00635                         <span class="comment">/* get the remainder of literal */</span>
<a name="l00636"></a>00636                         <span class="keywordflow">while</span> (ch != findMe)
<a name="l00637"></a>00637                         {
<a name="l00638"></a>00638                                 <span class="keywordflow">if</span> (reader.Length == 0)
<a name="l00639"></a>00639                                 {
<a name="l00640"></a>00640                                         System.Console.WriteLine(<span class="stringliteral">"warning: {0}:{1}: unterminated literal, expecting {2}"</span>, Globals.filename, Globals.curLine, findMe);
<a name="l00641"></a>00641                                         <span class="keywordflow">break</span>;
<a name="l00642"></a>00642                                 }
<a name="l00643"></a>00643                                 
<a name="l00644"></a>00644                                 Globals.lexeme += ch.ToString();
<a name="l00645"></a>00645                                 Globals.literal += ch.ToString();
<a name="l00646"></a>00646 
<a name="l00647"></a>00647                                 <span class="keywordflow">if</span> (ch != findMe)
<a name="l00648"></a>00648                                         GetNextChar();
<a name="l00649"></a>00649                         }
<a name="l00650"></a>00650 
<a name="l00651"></a>00651                         <span class="comment">/* add the quote on the end */</span>
<a name="l00652"></a>00652                         Globals.lexeme += ch.ToString();
<a name="l00653"></a>00653                         
<a name="l00654"></a>00654                         <span class="comment">/* set the token type */</span>
<a name="l00655"></a>00655                         Globals.token = Globals.Symbol._literal;
<a name="l00656"></a>00656                         
<a name="l00657"></a>00657                         <span class="comment">/* read the next character */</span>
<a name="l00658"></a>00658                         GetNextChar();
<a name="l00659"></a>00659                 }
<a name="l00660"></a>00660 
<a name="l00661"></a>00661                 <span class="comment">/* CleanUp()</span>
<a name="l00662"></a>00662 <span class="comment">                 * </span>
<a name="l00663"></a>00663 <span class="comment">                 * Reset variables</span>
<a name="l00664"></a>00664 <span class="comment">                 */</span>
<a name="l00665"></a>00665                 <span class="keyword">private</span> <span class="keywordtype">void</span> CleanUp()
<a name="l00666"></a>00666                 {
<a name="l00667"></a>00667                         <span class="comment">/* reset things */</span>
<a name="l00668"></a>00668                         Globals.lexeme = <span class="stringliteral">""</span>;
<a name="l00669"></a>00669                         Globals.token = Globals.Symbol._unknown;
<a name="l00670"></a>00670                         Globals.value = 0;
<a name="l00671"></a>00671                         Globals.valueF = 0.0;
<a name="l00672"></a>00672                         Globals.literal = <span class="stringliteral">""</span>;
<a name="l00673"></a>00673                         haveToken = <span class="keyword">false</span>;
<a name="l00674"></a>00674                         
<a name="l00675"></a>00675                         <span class="comment">/* fix blank line issue */</span>
<a name="l00676"></a>00676                         <span class="keywordflow">if</span> (reader == null)
<a name="l00677"></a>00677                         {
<a name="l00678"></a>00678                                 Globals.token = Globals.Symbol._comment;
<a name="l00679"></a>00679                                 <span class="keywordflow">return</span>;
<a name="l00680"></a>00680                         }
<a name="l00681"></a>00681                         <span class="keywordflow">if</span> (reader == <span class="stringliteral">""</span>)
<a name="l00682"></a>00682                         {
<a name="l00683"></a>00683                                 Globals.token = Globals.Symbol._comment;
<a name="l00684"></a>00684                                 <span class="keywordflow">return</span>;
<a name="l00685"></a>00685                         }
<a name="l00686"></a>00686                         <span class="keywordflow">if</span> ((reader[0] == <span class="charliteral">'/'</span>) &amp;&amp; (reader[1] == <span class="charliteral">'/'</span>))
<a name="l00687"></a>00687                         {
<a name="l00688"></a>00688                                 reader = <span class="stringliteral">""</span>;
<a name="l00689"></a>00689                                 Globals.token = Globals.Symbol._comment;
<a name="l00690"></a>00690                                 <span class="keywordflow">return</span>;
<a name="l00691"></a>00691                         }
<a name="l00692"></a>00692                 }
<a name="l00693"></a>00693         }
<a name="l00694"></a>00694 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Sun May 14 16:08:27 2006 for MiniCSharp by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
