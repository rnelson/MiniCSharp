<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>MiniCSharp: /Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/GenAsm.cs Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<h1>/Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/GenAsm.cs</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id$</span>
<a name="l00002"></a>00002 <span class="comment"> * Ross Nelson</span>
<a name="l00003"></a>00003 <span class="comment"> * Compiler Construction (CSC 446)</span>
<a name="l00004"></a>00004 <span class="comment"> * MiniCSharp/Assembly Generator</span>
<a name="l00005"></a>00005 <span class="comment"> */</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="preprocessor">#region Using declarations</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span><span class="keyword">using</span> System;
<a name="l00009"></a>00009 <span class="keyword">using</span> System.Text;
<a name="l00010"></a>00010 <span class="keyword">using</span> System.IO;
<a name="l00011"></a>00011 <span class="preprocessor">#endregion</span>
<a name="l00012"></a>00012 <span class="preprocessor"></span>
<a name="l00013"></a>00013 <span class="keyword">namespace </span>MiniCSharp
<a name="l00014"></a>00014 {
<a name="l00020"></a><a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm">00020</a>         <span class="keyword">public</span> <span class="keyword">class </span><a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm">GenAsm</a>
<a name="l00021"></a>00021         {
<a name="l00022"></a>00022                 <span class="keyword">private</span> string asmfile;                                         
<a name="l00023"></a>00023                 <span class="keyword">private</span> FileInfo ifs;                                           
<a name="l00024"></a>00024                 <span class="keyword">private</span> FileStream fs;                                          
<a name="l00025"></a>00025                 <span class="keyword">private</span> StreamWriter sw;                                        
<a name="l00026"></a>00026                 <span class="keyword">private</span> StreamReader sr;                                        
<a name="l00027"></a>00027                 <span class="keyword">private</span> <a class="code" href="class_mini_c_sharp_1_1_hash_table.htm">HashTable</a> symtab;                                       
<a name="l00028"></a>00028                 <span class="keyword">private</span> <a class="code" href="class_mini_c_sharp_1_1_string_table.htm">StringTable</a> strtab;                                     
<a name="l00029"></a>00029                 <span class="keyword">private</span> string t1, t2, t3, t4, t5;                      
<a name="l00030"></a>00030                 <span class="keyword">private</span> <span class="keywordtype">int</span> tactokencount;                                      
<a name="l00031"></a>00031                 <span class="keyword">private</span> string reader;                                          
<a name="l00032"></a>00032                 
<a name="l00034"></a><a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm#79b738b3f8c1c047972d8c61831b4972">00034</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm#79b738b3f8c1c047972d8c61831b4972">GenAsm</a>()
<a name="l00035"></a>00035                 {
<a name="l00036"></a>00036                         System.Console.WriteLine(<span class="stringliteral">"Oops, someone called GenAsm() instead of GenAsm(...).  Yell at the programmer!"</span>);
<a name="l00037"></a>00037                         System.Environment.Exit(-1);
<a name="l00038"></a>00038                 }
<a name="l00039"></a>00039                 
<a name="l00041"></a><a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm#95cfe3a5a8fc6be5cc5eadf0d03de311">00041</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm#79b738b3f8c1c047972d8c61831b4972">GenAsm</a>(string filename, <a class="code" href="class_mini_c_sharp_1_1_hash_table.htm">HashTable</a> symboltable, <a class="code" href="class_mini_c_sharp_1_1_string_table.htm">StringTable</a> stringtable)
<a name="l00042"></a>00042                 {
<a name="l00043"></a>00043                         <span class="comment">/* open the input file */</span>
<a name="l00044"></a>00044                         ifs = <span class="keyword">new</span> FileInfo(<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.GetFilename(<a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.filename, <span class="charliteral">'.'</span>) + <span class="stringliteral">".TAC"</span>);
<a name="l00045"></a>00045                         sr = ifs.OpenText();
<a name="l00046"></a>00046                         
<a name="l00047"></a>00047                         <span class="comment">/* open the output file */</span>
<a name="l00048"></a>00048                         asmfile = <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.GetFilename(filename, <span class="charliteral">'.'</span>) + <span class="stringliteral">".s"</span>;
<a name="l00049"></a>00049                         fs = <span class="keyword">new</span> FileStream(asmfile, FileMode.Create);
<a name="l00050"></a>00050                         sw = <span class="keyword">new</span> StreamWriter(fs, Encoding.ASCII);
<a name="l00051"></a>00051                         
<a name="l00052"></a>00052                         <span class="comment">/* set the tables */</span>
<a name="l00053"></a>00053                         symtab = symboltable;
<a name="l00054"></a>00054                         strtab = stringtable;
<a name="l00055"></a>00055                         
<a name="l00056"></a>00056                         <span class="comment">/* get an initial set of tokens */</span>
<a name="l00057"></a>00057                         <a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm#22996fe2f677fd28083402f40658dc46">GetTokens</a>();
<a name="l00058"></a>00058                 }
<a name="l00059"></a>00059                 
<a name="l00063"></a>00063                 <span class="keyword">private</span> <span class="keywordtype">void</span> emit(string text)
<a name="l00064"></a>00064                 {
<a name="l00065"></a>00065                         string endline;
<a name="l00066"></a>00066                         
<a name="l00067"></a>00067                         <span class="keywordflow">if</span> (text.Length &gt; 8)
<a name="l00068"></a>00068                         {
<a name="l00069"></a>00069                                 endline = text.Substring(0, 9);
<a name="l00070"></a>00070                                 
<a name="l00071"></a>00071                                 <span class="keywordflow">if</span> (endline == <span class="stringliteral">"      end"</span>)
<a name="l00072"></a>00072                                         sw.Write(text);
<a name="l00073"></a>00073                                 <span class="keywordflow">else</span>
<a name="l00074"></a>00074                                         sw.Write(text + <span class="stringliteral">"\n"</span>);
<a name="l00075"></a>00075                         }
<a name="l00076"></a>00076                         <span class="keywordflow">else</span>
<a name="l00077"></a>00077                                 sw.Write(text + <span class="stringliteral">"\n"</span>);
<a name="l00078"></a>00078                 }
<a name="l00079"></a>00079                 
<a name="l00084"></a><a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm#22996fe2f677fd28083402f40658dc46">00084</a>                 <span class="keyword">public</span> <span class="keywordtype">bool</span> <a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm#22996fe2f677fd28083402f40658dc46">GetTokens</a>()
<a name="l00085"></a>00085                 {
<a name="l00086"></a>00086                         reader = sr.ReadLine();
<a name="l00087"></a>00087                         <span class="keywordtype">char</span> ch = (char)0;
<a name="l00088"></a>00088                         
<a name="l00089"></a>00089                         <span class="comment">/* clear out the old tokens */</span>
<a name="l00090"></a>00090                         t1 = null;
<a name="l00091"></a>00091                         t2 = null;
<a name="l00092"></a>00092                         t3 = null;
<a name="l00093"></a>00093                         t4 = null;
<a name="l00094"></a>00094                         t5 = null;
<a name="l00095"></a>00095                         
<a name="l00096"></a>00096                         <span class="comment">/* if the string is null, we've hit EOF */</span>
<a name="l00097"></a>00097                         <span class="keywordflow">if</span> (reader == null)
<a name="l00098"></a>00098                                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00099"></a>00099                         
<a name="l00100"></a>00100                         <span class="comment">/* trim whitespace from both ends of the line */</span>
<a name="l00101"></a>00101                         reader.Trim();
<a name="l00102"></a>00102                         TrimReader();
<a name="l00103"></a>00103                         
<a name="l00104"></a>00104                         <span class="comment">/* skip over blank lines */</span>
<a name="l00105"></a>00105                         <span class="keywordflow">while</span> (reader.Length == 0)
<a name="l00106"></a>00106                         {
<a name="l00107"></a>00107                                 reader = sr.ReadLine();
<a name="l00108"></a>00108                                 <span class="keywordflow">if</span> (reader == null)
<a name="l00109"></a>00109                                         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00110"></a>00110                                 reader.Trim();
<a name="l00111"></a>00111                                 TrimReader();
<a name="l00112"></a>00112                         }
<a name="l00113"></a>00113                         
<a name="l00114"></a>00114                         <span class="comment">/* fill in the first token */</span>
<a name="l00115"></a>00115                         ch = reader[0];
<a name="l00116"></a>00116                         <span class="keywordflow">while</span> (ch &gt; <span class="charliteral">' '</span>)
<a name="l00117"></a>00117                         {
<a name="l00118"></a>00118                                 t1 += ch.ToString();
<a name="l00119"></a>00119                                 <span class="keywordflow">try</span>
<a name="l00120"></a>00120                                 {
<a name="l00121"></a>00121                                         reader = reader.Substring(1, reader.Length - 1);
<a name="l00122"></a>00122                                         ch = reader[0];
<a name="l00123"></a>00123                                 }
<a name="l00124"></a>00124                                 <span class="keywordflow">catch</span>
<a name="l00125"></a>00125                                 {
<a name="l00126"></a>00126                                         <span class="keywordflow">break</span>;
<a name="l00127"></a>00127                                 }
<a name="l00128"></a>00128                         }
<a name="l00129"></a>00129                         tactokencount = 1;
<a name="l00130"></a>00130                         
<a name="l00131"></a>00131                         <span class="comment">/* fill in the second token (if available) */</span>
<a name="l00132"></a>00132                         TrimReader();
<a name="l00133"></a>00133                         <span class="keywordflow">if</span> (reader.Length == 0)
<a name="l00134"></a>00134                                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00135"></a>00135                         ch = reader[0];
<a name="l00136"></a>00136                         <span class="keywordflow">while</span> (ch &gt; <span class="charliteral">' '</span>)
<a name="l00137"></a>00137                         {
<a name="l00138"></a>00138                                 t2 += ch.ToString();
<a name="l00139"></a>00139                                 <span class="keywordflow">try</span>
<a name="l00140"></a>00140                                 {
<a name="l00141"></a>00141                                         reader = reader.Substring(1, reader.Length - 1);
<a name="l00142"></a>00142                                         ch = reader[0];
<a name="l00143"></a>00143                                 }
<a name="l00144"></a>00144                                 <span class="keywordflow">catch</span>
<a name="l00145"></a>00145                                 {
<a name="l00146"></a>00146                                         <span class="keywordflow">break</span>;
<a name="l00147"></a>00147                                 }
<a name="l00148"></a>00148                         }
<a name="l00149"></a>00149                         tactokencount = 2;
<a name="l00150"></a>00150                         
<a name="l00151"></a>00151                         <span class="comment">/* fill in the third token (if available) */</span>
<a name="l00152"></a>00152                         TrimReader();
<a name="l00153"></a>00153                         <span class="keywordflow">if</span> (reader.Length == 0)
<a name="l00154"></a>00154                                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00155"></a>00155                         ch = reader[0];
<a name="l00156"></a>00156                         <span class="keywordflow">while</span> (ch &gt; <span class="charliteral">' '</span>)
<a name="l00157"></a>00157                         {
<a name="l00158"></a>00158                                 t3 += ch.ToString();
<a name="l00159"></a>00159                                 <span class="keywordflow">try</span>
<a name="l00160"></a>00160                                 {
<a name="l00161"></a>00161                                         reader = reader.Substring(1, reader.Length - 1);
<a name="l00162"></a>00162                                         ch = reader[0];
<a name="l00163"></a>00163                                 }
<a name="l00164"></a>00164                                 <span class="keywordflow">catch</span>
<a name="l00165"></a>00165                                 {
<a name="l00166"></a>00166                                         <span class="keywordflow">break</span>;
<a name="l00167"></a>00167                                 }
<a name="l00168"></a>00168                         }
<a name="l00169"></a>00169                         tactokencount = 3;
<a name="l00170"></a>00170                         
<a name="l00171"></a>00171                         <span class="comment">/* fill in the fourth token (if available) */</span>
<a name="l00172"></a>00172                         TrimReader();
<a name="l00173"></a>00173                         <span class="keywordflow">if</span> (reader.Length == 0)
<a name="l00174"></a>00174                                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00175"></a>00175                         ch = reader[0];
<a name="l00176"></a>00176                         <span class="keywordflow">while</span> (ch &gt; <span class="charliteral">' '</span>)
<a name="l00177"></a>00177                         {
<a name="l00178"></a>00178                                 t4 += ch.ToString();
<a name="l00179"></a>00179                                 <span class="keywordflow">try</span>
<a name="l00180"></a>00180                                 {
<a name="l00181"></a>00181                                         reader = reader.Substring(1, reader.Length - 1);
<a name="l00182"></a>00182                                         ch = reader[0];
<a name="l00183"></a>00183                                 }
<a name="l00184"></a>00184                                 <span class="keywordflow">catch</span>
<a name="l00185"></a>00185                                 {
<a name="l00186"></a>00186                                         <span class="keywordflow">break</span>;
<a name="l00187"></a>00187                                 }
<a name="l00188"></a>00188                         }
<a name="l00189"></a>00189                         tactokencount = 4;
<a name="l00190"></a>00190                         
<a name="l00191"></a>00191                         <span class="comment">/* fill in the fifth token (if available) */</span>
<a name="l00192"></a>00192                         TrimReader();
<a name="l00193"></a>00193                         <span class="keywordflow">if</span> (reader.Length == 0)
<a name="l00194"></a>00194                                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00195"></a>00195                         ch = reader[0];
<a name="l00196"></a>00196                         <span class="keywordflow">while</span> (ch &gt; <span class="charliteral">' '</span>)
<a name="l00197"></a>00197                         {
<a name="l00198"></a>00198                                 t5 += ch.ToString();
<a name="l00199"></a>00199                                 <span class="keywordflow">try</span>
<a name="l00200"></a>00200                                 {
<a name="l00201"></a>00201                                         reader = reader.Substring(1, reader.Length - 1);
<a name="l00202"></a>00202                                         ch = reader[0];
<a name="l00203"></a>00203                                 }
<a name="l00204"></a>00204                                 <span class="keywordflow">catch</span>
<a name="l00205"></a>00205                                 {
<a name="l00206"></a>00206                                         <span class="keywordflow">break</span>;
<a name="l00207"></a>00207                                 }
<a name="l00208"></a>00208                         }
<a name="l00209"></a>00209                         tactokencount = 5;
<a name="l00210"></a>00210                         
<a name="l00211"></a>00211                         <span class="comment">/* return true (token(s) found) */</span>
<a name="l00212"></a>00212                         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00213"></a>00213                 }
<a name="l00214"></a>00214                 
<a name="l00218"></a>00218                 <span class="keyword">private</span> <span class="keywordtype">void</span> TrimReader()
<a name="l00219"></a>00219                 {
<a name="l00220"></a>00220                         <span class="keywordflow">try</span>
<a name="l00221"></a>00221                         {
<a name="l00222"></a>00222                                 <span class="keywordtype">char</span> c = reader[0];
<a name="l00223"></a>00223                                 <span class="keywordflow">while</span> (Char.IsWhiteSpace(c.ToString(), 0))
<a name="l00224"></a>00224                                 {
<a name="l00225"></a>00225                                         <span class="keywordflow">try</span>
<a name="l00226"></a>00226                                         {
<a name="l00227"></a>00227                                                 reader = reader.Substring(1, reader.Length - 1);
<a name="l00228"></a>00228                                                 c = reader[0];
<a name="l00229"></a>00229                                         }
<a name="l00230"></a>00230                                         <span class="keywordflow">catch</span>
<a name="l00231"></a>00231                                         {
<a name="l00232"></a>00232                                                 <span class="keywordflow">break</span>;
<a name="l00233"></a>00233                                         }
<a name="l00234"></a>00234                                 }
<a name="l00235"></a>00235                         }
<a name="l00236"></a>00236                         <span class="keywordflow">catch</span>
<a name="l00237"></a>00237                         {
<a name="l00238"></a>00238                                 <span class="keywordflow">return</span>;
<a name="l00239"></a>00239                         }
<a name="l00240"></a>00240                 }
<a name="l00241"></a>00241                 
<a name="l00245"></a>00245                 <span class="keyword">private</span> string GetAddress(string tacstyle)
<a name="l00246"></a>00246                 {
<a name="l00247"></a>00247                         <span class="comment">/* if we have a number, return it as-is */</span>
<a name="l00248"></a>00248                         <span class="keywordflow">if</span> (CCType.IsNumeric(tacstyle))
<a name="l00249"></a>00249                                 <span class="keywordflow">return</span> tacstyle;
<a name="l00250"></a>00250                         
<a name="l00251"></a>00251                         <span class="comment">/* if it's shorter than 3 characters and non-numeric, assume it's a class-scope */</span>
<a name="l00252"></a>00252                         <span class="keywordflow">if</span> (tacstyle.Length &lt; 3)
<a name="l00253"></a>00253                                 <span class="keywordflow">return</span> tacstyle;
<a name="l00254"></a>00254                         
<a name="l00255"></a>00255                         <span class="comment">/* if we have a 'global' (class-scope) variable, return that */</span>
<a name="l00256"></a>00256                         <span class="keywordflow">if</span> (tacstyle.Substring(0, 3) != <span class="stringliteral">"_BP"</span>)
<a name="l00257"></a>00257                                 <span class="keywordflow">return</span> tacstyle;
<a name="l00258"></a>00258                         
<a name="l00259"></a>00259                         <span class="comment">/* otherwise, return an assembly-friendly pointer */</span>
<a name="l00260"></a>00260                         string asmstyle = <span class="stringliteral">"[bp"</span> + tacstyle[3] + tacstyle.Substring(4, tacstyle.Length - 4) + <span class="stringliteral">"]"</span>;
<a name="l00261"></a>00261                         <span class="keywordflow">return</span> asmstyle;
<a name="l00262"></a>00262                 }
<a name="l00263"></a>00263                 
<a name="l00267"></a>00267                 <span class="keyword">private</span> Element FindMethod(string tacname)
<a name="l00268"></a>00268                 {
<a name="l00269"></a>00269                         <span class="comment">/* split the name into method and class */</span>
<a name="l00270"></a>00270                         <span class="keywordtype">int</span> period = tacname.IndexOf(<span class="stringliteral">"."</span>, 0, tacname.Length);
<a name="l00271"></a>00271                         string s_class = tacname.Substring(0, period);
<a name="l00272"></a>00272                         string s_method = tacname.Substring(period + 1, tacname.Length - (period + 1));
<a name="l00273"></a>00273                         
<a name="l00274"></a>00274                         <span class="comment">/* find the method and return it or null */</span>
<a name="l00275"></a>00275                         Element retval = symtab.Lookup(s_method);
<a name="l00276"></a>00276                         <span class="keywordflow">if</span> (s_method == <span class="stringliteral">"Main"</span>)
<a name="l00277"></a>00277                                 <span class="keywordflow">return</span> null;
<a name="l00278"></a>00278                         <span class="keywordflow">if</span> (retval.parent.GetName() == s_class)
<a name="l00279"></a>00279                                 <span class="keywordflow">return</span> retval;
<a name="l00280"></a>00280                         <span class="keywordflow">else</span>
<a name="l00281"></a>00281                                 <span class="keywordflow">return</span> null;
<a name="l00282"></a>00282                 }
<a name="l00283"></a>00283                 
<a name="l00287"></a><a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm#439bc20263bf07f958c07a82aef45284">00287</a>                 <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_mini_c_sharp_1_1_gen_asm.htm#439bc20263bf07f958c07a82aef45284">Generate</a>()
<a name="l00288"></a>00288                 {
<a name="l00289"></a>00289                         <span class="comment">/* print out information about the program */</span>
<a name="l00290"></a>00290                         Header();
<a name="l00291"></a>00291                         DataSegment();
<a name="l00292"></a>00292                         CodeSegment();
<a name="l00293"></a>00293                         
<a name="l00294"></a>00294                         <span class="comment">/* print the program itself */</span>
<a name="l00295"></a>00295                         Procedures();
<a name="l00296"></a>00296                         Start();
<a name="l00297"></a>00297                         
<a name="l00298"></a>00298                         <span class="comment">/* close open streams */</span>
<a name="l00299"></a>00299                         sw.Flush();
<a name="l00300"></a>00300                         sw.Close();
<a name="l00301"></a>00301                         fs.Close();
<a name="l00302"></a>00302                         sr.Close();
<a name="l00303"></a>00303                 }
<a name="l00304"></a>00304                 
<a name="l00308"></a>00308                 <span class="keyword">private</span> <span class="keywordtype">void</span> Header()
<a name="l00309"></a>00309                 {
<a name="l00310"></a>00310                         emit(<span class="stringliteral">"; "</span> + <a class="code" href="class_mini_c_sharp_1_1_globals.htm">Globals</a>.filename);
<a name="l00311"></a>00311                         emit(<span class="stringliteral">"    .model small"</span>);
<a name="l00312"></a>00312                         emit(<span class="stringliteral">"    .586"</span>);
<a name="l00313"></a>00313                         emit(<span class="stringliteral">"    .stack 100h"</span>);
<a name="l00314"></a>00314                         emit(<span class="stringliteral">"    "</span>);
<a name="l00315"></a>00315                 }
<a name="l00316"></a>00316                 
<a name="l00320"></a>00320                 <span class="keyword">private</span> <span class="keywordtype">void</span> DataSegment()
<a name="l00321"></a>00321                 {
<a name="l00322"></a>00322                         emit(<span class="stringliteral">"; data segment"</span>);
<a name="l00323"></a>00323                         emit(<span class="stringliteral">"    .data"</span>);
<a name="l00324"></a>00324                         
<a name="l00325"></a>00325                         <span class="comment">/* add all strings */</span>
<a name="l00326"></a>00326                         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> sc = 0; sc &lt; strtab.numstrings; sc++)
<a name="l00327"></a>00327                         {
<a name="l00328"></a>00328                                 StringT st = strtab.Lookup(<span class="stringliteral">"_S"</span> + sc.ToString());
<a name="l00329"></a>00329                                 
<a name="l00330"></a>00330                                 <span class="comment">/* sanitize the string</span>
<a name="l00331"></a>00331 <span class="comment">                                 * we don't deal with escaped characters anywhere</span>
<a name="l00332"></a>00332 <span class="comment">                                 * in the lexical analyzer so this isn't an issue,</span>
<a name="l00333"></a>00333 <span class="comment">                                 * but it's good to have in there</span>
<a name="l00334"></a>00334 <span class="comment">                                 */</span>
<a name="l00335"></a>00335                                 string str = st.str.Substring(1, st.str.Length - 2);
<a name="l00336"></a>00336                                 str = str.Replace(<span class="stringliteral">"\""</span>, <span class="stringliteral">"\", 34, \""</span>);
<a name="l00337"></a>00337                                 emit(<span class="stringliteral">"_S"</span> + sc.ToString() + <span class="stringliteral">" DB \""</span> + str + <span class="stringliteral">"\", '$'"</span>);
<a name="l00338"></a>00338                         }
<a name="l00339"></a>00339                         
<a name="l00340"></a>00340                         <span class="comment">/* print out class-scope variables */</span>
<a name="l00341"></a>00341                         emit(symtab.GenerateAssemblyData(1));
<a name="l00342"></a>00342                         
<a name="l00343"></a>00343                         emit(<span class="stringliteral">"    "</span>);
<a name="l00344"></a>00344                 }
<a name="l00345"></a>00345                 
<a name="l00349"></a>00349                 <span class="keyword">private</span> <span class="keywordtype">void</span> CodeSegment()
<a name="l00350"></a>00350                 {
<a name="l00351"></a>00351                         emit(<span class="stringliteral">"; code segment"</span>);
<a name="l00352"></a>00352                         emit(<span class="stringliteral">"    .code"</span>);
<a name="l00353"></a>00353                         emit(<span class="stringliteral">"    include io.asm"</span>);
<a name="l00354"></a>00354                 }
<a name="l00355"></a>00355                 
<a name="l00359"></a>00359                 <span class="keyword">private</span> <span class="keywordtype">void</span> Procedures()
<a name="l00360"></a>00360                 {
<a name="l00361"></a>00361                         string procname;
<a name="l00362"></a>00362                         <span class="keywordtype">int</span> size_o_locals, size_o_params, locals;
<a name="l00363"></a>00363                         Element m;
<a name="l00364"></a>00364                         
<a name="l00365"></a>00365                         <span class="keywordflow">while</span> (t1 != <span class="stringliteral">"START"</span>)
<a name="l00366"></a>00366                         {
<a name="l00367"></a>00367                                 size_o_locals = 0;
<a name="l00368"></a>00368                                 size_o_params = 0;
<a name="l00369"></a>00369                                 locals = 0;
<a name="l00370"></a>00370                                 
<a name="l00371"></a>00371                                 <span class="keywordflow">switch</span>(t1)
<a name="l00372"></a>00372                                 {
<a name="l00373"></a>00373                                         <span class="keywordflow">case</span> <span class="stringliteral">"PROC"</span>:
<a name="l00374"></a>00374                                                 m = FindMethod(t2);
<a name="l00375"></a>00375                                                 <span class="keywordflow">if</span> (m != null)
<a name="l00376"></a>00376                                                 {
<a name="l00377"></a>00377                                                         size_o_locals = m.GetSizeOfLocals();
<a name="l00378"></a>00378                                                         size_o_params = m.GetSizeOfParams();
<a name="l00379"></a>00379                                                 }
<a name="l00380"></a>00380                                                 <span class="keywordflow">else</span>
<a name="l00381"></a>00381                                                 {
<a name="l00382"></a>00382                                                         size_o_locals = 30; <span class="comment">/* no magic to this number */</span>
<a name="l00383"></a>00383                                                         size_o_params = 0;
<a name="l00384"></a>00384                                                 }
<a name="l00385"></a>00385                                                 locals = size_o_locals;
<a name="l00386"></a>00386                                                 
<a name="l00387"></a>00387                                                 <span class="comment">/* rename the procedure */</span>
<a name="l00388"></a>00388                                                 procname = t2.Replace(<span class="stringliteral">"."</span>, <span class="stringliteral">"_"</span>);
<a name="l00389"></a>00389                                                 
<a name="l00390"></a>00390                                                 emit(procname + <span class="stringliteral">" proc"</span>);
<a name="l00391"></a>00391                                                 emit(<span class="stringliteral">"    push bp"</span>);
<a name="l00392"></a>00392                                                 emit(<span class="stringliteral">"    mov bp, sp"</span>);
<a name="l00393"></a>00393                                                 <span class="keywordflow">if</span> (locals != 0)
<a name="l00394"></a>00394                                                         emit(<span class="stringliteral">"    sub sp, "</span> + locals);
<a name="l00395"></a>00395                                                 <span class="keywordflow">break</span>;
<a name="l00396"></a>00396                                         <span class="keywordflow">case</span> <span class="stringliteral">"ENDP"</span>:
<a name="l00397"></a>00397                                                 m = FindMethod(t2);
<a name="l00398"></a>00398                                                 <span class="keywordflow">if</span> (m != null)
<a name="l00399"></a>00399                                                 {
<a name="l00400"></a>00400                                                         size_o_locals = m.GetSizeOfLocals();
<a name="l00401"></a>00401                                                         size_o_params = m.GetSizeOfParams();
<a name="l00402"></a>00402                                                 }
<a name="l00403"></a>00403                                                 <span class="keywordflow">else</span>
<a name="l00404"></a>00404                                                 {
<a name="l00405"></a>00405                                                         size_o_locals = 30; <span class="comment">/* no magic to this number */</span>
<a name="l00406"></a>00406                                                         size_o_params = 0;
<a name="l00407"></a>00407                                                 }
<a name="l00408"></a>00408                                                 locals = size_o_locals;
<a name="l00409"></a>00409                                                 
<a name="l00410"></a>00410                                                 <span class="comment">/* rename the procedure */</span>
<a name="l00411"></a>00411                                                 procname = t2.Replace(<span class="stringliteral">"."</span>, <span class="stringliteral">"_"</span>);
<a name="l00412"></a>00412                                                 
<a name="l00413"></a>00413                                                 <span class="keywordflow">if</span> (locals != 0)
<a name="l00414"></a>00414                                                         emit(<span class="stringliteral">"    add sp, "</span> + locals);
<a name="l00415"></a>00415                                                 emit(<span class="stringliteral">"    pop bp"</span>);
<a name="l00416"></a>00416                                                 <span class="keywordflow">if</span> (size_o_params == 0)
<a name="l00417"></a>00417                                                         emit(<span class="stringliteral">"    ret"</span>);
<a name="l00418"></a>00418                                                 <span class="keywordflow">else</span>
<a name="l00419"></a>00419                                                         emit(<span class="stringliteral">"    ret "</span> + size_o_params);
<a name="l00420"></a>00420                                                 emit(procname + <span class="stringliteral">" endp"</span>);
<a name="l00421"></a>00421                                                 <span class="keywordflow">break</span>;
<a name="l00422"></a>00422                                         <span class="keywordflow">case</span> <span class="stringliteral">"PUSH"</span>:
<a name="l00423"></a>00423                                                 <span class="keywordflow">if</span> (!CCType.IsNumeric(t2))
<a name="l00424"></a>00424                                                         emit(<span class="stringliteral">"    push "</span> + GetAddress(t2));
<a name="l00425"></a>00425                                                 <span class="keywordflow">else</span>
<a name="l00426"></a>00426                                                         emit(<span class="stringliteral">"    push "</span> + t2);
<a name="l00427"></a>00427                                                 <span class="keywordflow">break</span>;
<a name="l00428"></a>00428                                         <span class="keywordflow">case</span> <span class="stringliteral">"CALL"</span>:
<a name="l00429"></a>00429                                                 emit(<span class="stringliteral">"    call "</span> + t2.Replace(<span class="stringliteral">"."</span>, <span class="stringliteral">"_"</span>));
<a name="l00430"></a>00430                                                 <span class="keywordflow">break</span>;
<a name="l00431"></a>00431                                         <span class="keywordflow">case</span> <span class="stringliteral">"WRI"</span>:
<a name="l00432"></a>00432                                                 _WriteInt(t2);
<a name="l00433"></a>00433                                                 <span class="keywordflow">break</span>;
<a name="l00434"></a>00434                                         <span class="keywordflow">case</span> <span class="stringliteral">"WRS"</span>:
<a name="l00435"></a>00435                                                 _WriteStr(t2);
<a name="l00436"></a>00436                                                 <span class="keywordflow">break</span>;
<a name="l00437"></a>00437                                         <span class="keywordflow">case</span> <span class="stringliteral">"WRLN"</span>:
<a name="l00438"></a>00438                                                 _WriteLn();
<a name="l00439"></a>00439                                                 <span class="keywordflow">break</span>;
<a name="l00440"></a>00440                                         <span class="keywordflow">case</span> <span class="stringliteral">"RDI"</span>:
<a name="l00441"></a>00441                                                 _ReadInt(t2);
<a name="l00442"></a>00442                                                 <span class="keywordflow">break</span>;
<a name="l00443"></a>00443                                         <span class="keywordflow">default</span>:
<a name="l00444"></a>00444                                                 <span class="comment">/* figure out what kind of statement we have */</span>
<a name="l00445"></a>00445                                                 <span class="keywordflow">if</span> (tactokencount == 5)
<a name="l00446"></a>00446                                                 {
<a name="l00447"></a>00447                                                         <span class="keywordflow">switch</span> (t4)
<a name="l00448"></a>00448                                                         {
<a name="l00449"></a>00449                                                                 <span class="keywordflow">case</span> <span class="stringliteral">"+"</span>:
<a name="l00450"></a>00450                                                                         _Add(t1, t3, t5);
<a name="l00451"></a>00451                                                                         <span class="keywordflow">break</span>;
<a name="l00452"></a>00452                                                                 <span class="keywordflow">case</span> <span class="stringliteral">"-"</span>:
<a name="l00453"></a>00453                                                                         _Sub(t1, t3, t5);
<a name="l00454"></a>00454                                                                         <span class="keywordflow">break</span>;
<a name="l00455"></a>00455                                                                 <span class="keywordflow">case</span> <span class="stringliteral">"/"</span>:
<a name="l00456"></a>00456                                                                         _Div(t1, t3, t5);
<a name="l00457"></a>00457                                                                         <span class="keywordflow">break</span>;
<a name="l00458"></a>00458                                                                 <span class="keywordflow">case</span> <span class="stringliteral">"*"</span>:
<a name="l00459"></a>00459                                                                         _Mul(t1, t3, t5);
<a name="l00460"></a>00460                                                                         <span class="keywordflow">break</span>;
<a name="l00461"></a>00461                                                                 <span class="keywordflow">default</span>:
<a name="l00462"></a>00462                                                                         System.Console.WriteLine(<span class="stringliteral">"Oops, unexpected situation: {0}"</span>, reader);
<a name="l00463"></a>00463                                                                         <span class="keywordflow">break</span>;
<a name="l00464"></a>00464                                                         }
<a name="l00465"></a>00465                                                 }
<a name="l00466"></a>00466                                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tactokencount == 4)
<a name="l00467"></a>00467                                                 {
<a name="l00468"></a>00468                                                         <span class="keywordflow">switch</span> (t3)
<a name="l00469"></a>00469                                                         {
<a name="l00470"></a>00470                                                                 <span class="keywordflow">case</span> <span class="stringliteral">"-"</span>:
<a name="l00471"></a>00471                                                                         _Neg(t1, t4);
<a name="l00472"></a>00472                                                                         <span class="keywordflow">break</span>;
<a name="l00473"></a>00473                                                                 <span class="keywordflow">default</span>:
<a name="l00474"></a>00474                                                                         System.Console.WriteLine(<span class="stringliteral">"Oops, unexpected situation: {0}"</span>, reader);
<a name="l00475"></a>00475                                                                         <span class="keywordflow">break</span>;
<a name="l00476"></a>00476                                                         }
<a name="l00477"></a>00477                                                 }
<a name="l00478"></a>00478                                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (tactokencount == 3)
<a name="l00479"></a>00479                                                 {
<a name="l00480"></a>00480                                                         _Ass(t1, t3);
<a name="l00481"></a>00481                                                 }
<a name="l00482"></a>00482                                                 <span class="keywordflow">else</span>
<a name="l00483"></a>00483                                                 {
<a name="l00484"></a>00484                                                         <span class="keywordflow">if</span> (reader.Length &gt; 0)
<a name="l00485"></a>00485                                                                 System.Console.WriteLine(<span class="stringliteral">"Oops, unexpected situation: {0}"</span>, reader);
<a name="l00486"></a>00486                                                 }
<a name="l00487"></a>00487                                                 
<a name="l00488"></a>00488                                                 <span class="keywordflow">break</span>;
<a name="l00489"></a>00489                                 }
<a name="l00490"></a>00490                                 
<a name="l00491"></a>00491                                 <span class="comment">/* get the next set of tokens */</span>
<a name="l00492"></a>00492                                 <span class="keywordflow">if</span> (GetTokens() == <span class="keyword">false</span>)
<a name="l00493"></a>00493                                         <span class="keywordflow">return</span>;
<a name="l00494"></a>00494                         }
<a name="l00495"></a>00495                 }
<a name="l00496"></a>00496                 
<a name="l00500"></a>00500                 <span class="keyword">private</span> <span class="keywordtype">void</span> Start()
<a name="l00501"></a>00501                 {
<a name="l00502"></a>00502                         string firstproc = t2.Replace(<span class="stringliteral">"."</span>, <span class="stringliteral">"_"</span>);
<a name="l00503"></a>00503                         
<a name="l00504"></a>00504                         emit(<span class="stringliteral">"start proc"</span>);
<a name="l00505"></a>00505                         emit(<span class="stringliteral">"    mov ax, @data"</span>);
<a name="l00506"></a>00506                         emit(<span class="stringliteral">"    mov ds, ax"</span>);
<a name="l00507"></a>00507                         emit(<span class="stringliteral">"    call "</span> + firstproc);
<a name="l00508"></a>00508                         emit(<span class="stringliteral">"    mov al, 0"</span>);
<a name="l00509"></a>00509                         emit(<span class="stringliteral">"    mov ah, 4ch"</span>);
<a name="l00510"></a>00510                         emit(<span class="stringliteral">"    int 21h"</span>);
<a name="l00511"></a>00511                         emit(<span class="stringliteral">"start endp"</span>);
<a name="l00512"></a>00512                         emit(<span class="stringliteral">"      end start"</span>);
<a name="l00513"></a>00513                 }
<a name="l00514"></a>00514                 
<a name="l00516"></a>00516                 <span class="keyword">private</span> <span class="keywordtype">void</span> _Add(string dest, string left, string right)
<a name="l00517"></a>00517                 {
<a name="l00518"></a>00518                         <span class="comment">/* check for special cases */</span>
<a name="l00519"></a>00519                         <span class="keywordflow">if</span> ((left == <span class="stringliteral">"1"</span>) &amp;&amp; !CCType.IsNumeric(right))
<a name="l00520"></a>00520                         {
<a name="l00521"></a>00521                                 <span class="comment">/* inc is faster than adding one */</span>
<a name="l00522"></a>00522                                 emit(<span class="stringliteral">"    inc "</span> + GetAddress(right));
<a name="l00523"></a>00523                                 <span class="keywordflow">return</span>;
<a name="l00524"></a>00524                         }
<a name="l00525"></a>00525                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((right == <span class="stringliteral">"1"</span>) &amp;&amp; !CCType.IsNumeric(left))
<a name="l00526"></a>00526                         {
<a name="l00527"></a>00527                                 <span class="comment">/* inc is faster than adding one */</span>
<a name="l00528"></a>00528                                 emit(<span class="stringliteral">"    inc "</span> + GetAddress(left));
<a name="l00529"></a>00529                                 <span class="keywordflow">return</span>;
<a name="l00530"></a>00530                         }
<a name="l00531"></a>00531                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((left == <span class="stringliteral">"0"</span>) || (right == <span class="stringliteral">"0"</span>))
<a name="l00532"></a>00532                         {
<a name="l00533"></a>00533                                 <span class="comment">/* we don't need to add 0, no point in putting it in the output */</span>
<a name="l00534"></a>00534                                 <span class="keywordflow">return</span>;
<a name="l00535"></a>00535                         }
<a name="l00536"></a>00536                         <span class="keywordflow">else</span>
<a name="l00537"></a>00537                         {
<a name="l00538"></a>00538                                 <span class="keywordflow">if</span> (CCType.IsNumeric(left))
<a name="l00539"></a>00539                                 {
<a name="l00540"></a>00540                                         <span class="keywordflow">if</span> (CCType.IsNumeric(right))
<a name="l00541"></a>00541                                         {
<a name="l00542"></a>00542                                                 emit(<span class="stringliteral">"    mov ax, "</span> + left);
<a name="l00543"></a>00543                                                 emit(<span class="stringliteral">"    add ax, "</span> + right);
<a name="l00544"></a>00544                                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00545"></a>00545                                         }
<a name="l00546"></a>00546                                         <span class="keywordflow">else</span>
<a name="l00547"></a>00547                                         {
<a name="l00548"></a>00548                                                 emit(<span class="stringliteral">"    mov ax, "</span> + left);
<a name="l00549"></a>00549                                                 emit(<span class="stringliteral">"    add ax, "</span> + GetAddress(right));
<a name="l00550"></a>00550                                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00551"></a>00551                                         }
<a name="l00552"></a>00552                                 }
<a name="l00553"></a>00553                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (CCType.IsNumeric(right))
<a name="l00554"></a>00554                                 {
<a name="l00555"></a>00555                                         emit(<span class="stringliteral">"    mov ax, "</span> + GetAddress(left));
<a name="l00556"></a>00556                                         emit(<span class="stringliteral">"    add ax, "</span> + right);
<a name="l00557"></a>00557                                         emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00558"></a>00558                                 }
<a name="l00559"></a>00559                                 <span class="keywordflow">else</span>
<a name="l00560"></a>00560                                 {
<a name="l00561"></a>00561                                         emit(<span class="stringliteral">"    mov ax, "</span> + GetAddress(left));
<a name="l00562"></a>00562                                         emit(<span class="stringliteral">"    add ax, "</span> + GetAddress(right));
<a name="l00563"></a>00563                                         emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00564"></a>00564                                 }
<a name="l00565"></a>00565                                 <span class="keywordflow">return</span>;
<a name="l00566"></a>00566                         }
<a name="l00567"></a>00567                 }
<a name="l00568"></a>00568                 
<a name="l00570"></a>00570                 <span class="keyword">private</span> <span class="keywordtype">void</span> _Sub(string dest, string left, string right)
<a name="l00571"></a>00571                 {
<a name="l00572"></a>00572                         <span class="comment">/* check for special cases */</span>
<a name="l00573"></a>00573                         <span class="keywordflow">if</span> ((left == <span class="stringliteral">"1"</span>) &amp;&amp; !CCType.IsNumeric(right))
<a name="l00574"></a>00574                         {
<a name="l00575"></a>00575                                 <span class="comment">/* dec is faster than adding one */</span>
<a name="l00576"></a>00576                                 emit(<span class="stringliteral">"    dec "</span> + GetAddress(right));
<a name="l00577"></a>00577                                 <span class="keywordflow">return</span>;
<a name="l00578"></a>00578                         }
<a name="l00579"></a>00579                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((right == <span class="stringliteral">"1"</span>) &amp;&amp; !CCType.IsNumeric(left))
<a name="l00580"></a>00580                         {
<a name="l00581"></a>00581                                 <span class="comment">/* dec is faster than adding one */</span>
<a name="l00582"></a>00582                                 emit(<span class="stringliteral">"    dec "</span> + GetAddress(left));
<a name="l00583"></a>00583                                 <span class="keywordflow">return</span>;
<a name="l00584"></a>00584                         }
<a name="l00585"></a>00585                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((left == <span class="stringliteral">"0"</span>) || (right == <span class="stringliteral">"0"</span>))
<a name="l00586"></a>00586                         {
<a name="l00587"></a>00587                                 <span class="comment">/* we don't need to subtract 0, no point in putting it in the output */</span>
<a name="l00588"></a>00588                                 <span class="keywordflow">return</span>;
<a name="l00589"></a>00589                         }
<a name="l00590"></a>00590                         <span class="keywordflow">else</span>
<a name="l00591"></a>00591                         {
<a name="l00592"></a>00592                                 <span class="keywordflow">if</span> (CCType.IsNumeric(left))
<a name="l00593"></a>00593                                 {
<a name="l00594"></a>00594                                         <span class="keywordflow">if</span> (CCType.IsNumeric(right))
<a name="l00595"></a>00595                                         {
<a name="l00596"></a>00596                                                 emit(<span class="stringliteral">"    mov ax, "</span> + left);
<a name="l00597"></a>00597                                                 emit(<span class="stringliteral">"    sub ax, "</span> + right);
<a name="l00598"></a>00598                                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00599"></a>00599                                         }
<a name="l00600"></a>00600                                         <span class="keywordflow">else</span>
<a name="l00601"></a>00601                                         {
<a name="l00602"></a>00602                                                 emit(<span class="stringliteral">"    mov ax, "</span> + left);
<a name="l00603"></a>00603                                                 emit(<span class="stringliteral">"    sub ax, "</span> + GetAddress(right));
<a name="l00604"></a>00604                                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00605"></a>00605                                         }
<a name="l00606"></a>00606                                 }
<a name="l00607"></a>00607                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (CCType.IsNumeric(right))
<a name="l00608"></a>00608                                 {
<a name="l00609"></a>00609                                         emit(<span class="stringliteral">"    mov ax, "</span> + GetAddress(left));
<a name="l00610"></a>00610                                         emit(<span class="stringliteral">"    sub ax, "</span> + right);
<a name="l00611"></a>00611                                         emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00612"></a>00612                                 }
<a name="l00613"></a>00613                                 <span class="keywordflow">else</span>
<a name="l00614"></a>00614                                 {
<a name="l00615"></a>00615                                         emit(<span class="stringliteral">"    mov ax, "</span> + GetAddress(left));
<a name="l00616"></a>00616                                         emit(<span class="stringliteral">"    sub ax, "</span> + GetAddress(right));
<a name="l00617"></a>00617                                         emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00618"></a>00618                                 }
<a name="l00619"></a>00619                                 <span class="keywordflow">return</span>;
<a name="l00620"></a>00620                         }
<a name="l00621"></a>00621                 }
<a name="l00622"></a>00622                 
<a name="l00624"></a>00624                 <span class="keyword">private</span> <span class="keywordtype">void</span> _Mul(string dest, string left, string right)
<a name="l00625"></a>00625                 {
<a name="l00626"></a>00626                         <span class="comment">/* check for special cases */</span>
<a name="l00627"></a>00627                         <span class="keywordflow">if</span> (left == <span class="stringliteral">"0"</span>)
<a name="l00628"></a>00628                         {
<a name="l00629"></a>00629                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(right) + <span class="stringliteral">", 0"</span>);
<a name="l00630"></a>00630                                 <span class="keywordflow">return</span>;
<a name="l00631"></a>00631                         }
<a name="l00632"></a>00632                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (right == <span class="stringliteral">"0"</span>)
<a name="l00633"></a>00633                         {
<a name="l00634"></a>00634                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(left) + <span class="stringliteral">", 0"</span>);
<a name="l00635"></a>00635                                 <span class="keywordflow">return</span>;
<a name="l00636"></a>00636                         }
<a name="l00637"></a>00637                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((left == <span class="stringliteral">"1"</span>) || (right == <span class="stringliteral">"1"</span>))
<a name="l00638"></a>00638                         {
<a name="l00639"></a>00639                                 <span class="comment">/* we don't need to subtract 0, no point in putting it in the output */</span>
<a name="l00640"></a>00640                                 <span class="keywordflow">return</span>;
<a name="l00641"></a>00641                         }
<a name="l00642"></a>00642                         <span class="keywordflow">else</span>
<a name="l00643"></a>00643                         {
<a name="l00644"></a>00644                                 emit(<span class="stringliteral">"    push bx"</span>);
<a name="l00645"></a>00645                                 emit(<span class="stringliteral">"    mov ax, "</span> + GetAddress(left));
<a name="l00646"></a>00646                                 emit(<span class="stringliteral">"    mov bx, "</span> + GetAddress(right));
<a name="l00647"></a>00647                                 emit(<span class="stringliteral">"    imul bx"</span>);
<a name="l00648"></a>00648                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00649"></a>00649                                 emit(<span class="stringliteral">"    pop bx"</span>);
<a name="l00650"></a>00650                                 <span class="keywordflow">return</span>;
<a name="l00651"></a>00651                         }
<a name="l00652"></a>00652                 }
<a name="l00653"></a>00653                 
<a name="l00655"></a>00655                 <span class="keyword">private</span> <span class="keywordtype">void</span> _Div(string dest, string left, string right)
<a name="l00656"></a>00656                 {
<a name="l00657"></a>00657                         <span class="comment">/* check for special cases */</span>
<a name="l00658"></a>00658                         <span class="keywordflow">if</span> (left == <span class="stringliteral">"0"</span>)
<a name="l00659"></a>00659                         {
<a name="l00660"></a>00660                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(right) + <span class="stringliteral">", 0"</span>);
<a name="l00661"></a>00661                                 <span class="keywordflow">return</span>;
<a name="l00662"></a>00662                         }
<a name="l00663"></a>00663                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (right == <span class="stringliteral">"0"</span>)
<a name="l00664"></a>00664                         {
<a name="l00665"></a>00665                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(left) + <span class="stringliteral">", 0"</span>);
<a name="l00666"></a>00666                                 <span class="keywordflow">return</span>;
<a name="l00667"></a>00667                         }
<a name="l00668"></a>00668                         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((left == <span class="stringliteral">"1"</span>) || (right == <span class="stringliteral">"1"</span>))
<a name="l00669"></a>00669                         {
<a name="l00670"></a>00670                                 <span class="comment">/* we don't need to subtract 0, no point in putting it in the output */</span>
<a name="l00671"></a>00671                                 <span class="keywordflow">return</span>;
<a name="l00672"></a>00672                         }
<a name="l00673"></a>00673                         <span class="keywordflow">else</span>
<a name="l00674"></a>00674                         {
<a name="l00675"></a>00675                                 emit(<span class="stringliteral">"    push bx"</span>);
<a name="l00676"></a>00676                                 emit(<span class="stringliteral">"    mov ax, "</span> + GetAddress(left));
<a name="l00677"></a>00677                                 emit(<span class="stringliteral">"    mov bx, "</span> + GetAddress(right));
<a name="l00678"></a>00678                                 emit(<span class="stringliteral">"    idiv bx"</span>);
<a name="l00679"></a>00679                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00680"></a>00680                                 emit(<span class="stringliteral">"    pop bx"</span>);
<a name="l00681"></a>00681                                 <span class="keywordflow">return</span>;
<a name="l00682"></a>00682                         }
<a name="l00683"></a>00683                 }
<a name="l00684"></a>00684                 
<a name="l00686"></a>00686                 <span class="keyword">private</span> <span class="keywordtype">void</span> _Neg(string dest, string right)
<a name="l00687"></a>00687                 {
<a name="l00688"></a>00688                         <span class="keywordflow">if</span> (CCType.IsNumeric(right))
<a name="l00689"></a>00689                         {
<a name="l00690"></a>00690                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", -"</span> + right);
<a name="l00691"></a>00691                                 <span class="keywordflow">return</span>;
<a name="l00692"></a>00692                         }
<a name="l00693"></a>00693                         <span class="keywordflow">else</span>
<a name="l00694"></a>00694                         {
<a name="l00695"></a>00695                                 emit(<span class="stringliteral">"    mov ax, "</span> + GetAddress(right));
<a name="l00696"></a>00696                                 emit(<span class="stringliteral">"    neg ax"</span>);
<a name="l00697"></a>00697                                 emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00698"></a>00698                                 <span class="keywordflow">return</span>;
<a name="l00699"></a>00699                         }
<a name="l00700"></a>00700                 }
<a name="l00701"></a>00701                 
<a name="l00703"></a>00703                 <span class="keyword">private</span> <span class="keywordtype">void</span> _Ass(string dest, string src)
<a name="l00704"></a>00704                 {
<a name="l00705"></a>00705                         <span class="keywordflow">if</span> (dest == src)
<a name="l00706"></a>00706                         {
<a name="l00707"></a>00707                                 <span class="comment">/* we don't need to do 'a = a' */</span>
<a name="l00708"></a>00708                                 <span class="keywordflow">return</span>;
<a name="l00709"></a>00709                         }
<a name="l00710"></a>00710                         <span class="keywordflow">else</span>
<a name="l00711"></a>00711                         {
<a name="l00712"></a>00712                                 <span class="keywordflow">if</span> (dest == <span class="stringliteral">"_AX"</span>)
<a name="l00713"></a>00713                                         emit(<span class="stringliteral">"    mov ax, "</span> + GetAddress(src));
<a name="l00714"></a>00714                                 <span class="keywordflow">else</span> <span class="keywordflow">if</span> (src == <span class="stringliteral">"_AX"</span>)
<a name="l00715"></a>00715                                         emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00716"></a>00716                                 <span class="keywordflow">else</span>
<a name="l00717"></a>00717                                 {
<a name="l00718"></a>00718                                         <span class="keywordflow">if</span> (CCType.IsNumeric(src))
<a name="l00719"></a>00719                                                 emit(<span class="stringliteral">"    mov ax, "</span> + src);
<a name="l00720"></a>00720                                         <span class="keywordflow">else</span>
<a name="l00721"></a>00721                                         {
<a name="l00722"></a>00722                                                 <span class="keywordflow">if</span> (src[0] == <span class="charliteral">'-'</span>)
<a name="l00723"></a>00723                                                 {
<a name="l00724"></a>00724                                                         _Neg(dest, src.Substring(1, src.Length - 1));
<a name="l00725"></a>00725                                                         <span class="keywordflow">return</span>;
<a name="l00726"></a>00726                                                 }
<a name="l00727"></a>00727                                                 <span class="keywordflow">else</span>
<a name="l00728"></a>00728                                                         emit(<span class="stringliteral">"    mov ax, "</span> + GetAddress(src));
<a name="l00729"></a>00729                                         }
<a name="l00730"></a>00730                                         emit(<span class="stringliteral">"    mov "</span> + GetAddress(dest) + <span class="stringliteral">", ax"</span>);
<a name="l00731"></a>00731                                 }
<a name="l00732"></a>00732                                 <span class="keywordflow">return</span>;
<a name="l00733"></a>00733                         }
<a name="l00734"></a>00734                 }
<a name="l00735"></a>00735                 
<a name="l00737"></a>00737                 <span class="keyword">private</span> <span class="keywordtype">void</span> _WriteStr(string strname)
<a name="l00738"></a>00738                 {
<a name="l00739"></a>00739                         emit(<span class="stringliteral">"    push dx"</span>);
<a name="l00740"></a>00740                         emit(<span class="stringliteral">"    mov dx, OFFSET _S"</span> + strname[2].ToString());
<a name="l00741"></a>00741                         emit(<span class="stringliteral">"    call writestr"</span>);
<a name="l00742"></a>00742                         emit(<span class="stringliteral">"    pop dx"</span>);
<a name="l00743"></a>00743                         <span class="keywordflow">return</span>;
<a name="l00744"></a>00744                 }
<a name="l00745"></a>00745                 
<a name="l00747"></a>00747                 <span class="keyword">private</span> <span class="keywordtype">void</span> _WriteInt(string intname)
<a name="l00748"></a>00748                 {
<a name="l00749"></a>00749                         <span class="keywordflow">if</span> (CCType.IsNumeric(intname))
<a name="l00750"></a>00750                                 emit(<span class="stringliteral">"    mov ax, "</span> + intname);
<a name="l00751"></a>00751                         <span class="keywordflow">else</span>
<a name="l00752"></a>00752                                 emit(<span class="stringliteral">"    mov ax, "</span> + GetAddress(intname));
<a name="l00753"></a>00753                         emit(<span class="stringliteral">"    call writeint"</span>);
<a name="l00754"></a>00754                         <span class="keywordflow">return</span>;
<a name="l00755"></a>00755                 }
<a name="l00756"></a>00756                 
<a name="l00758"></a>00758                 <span class="keyword">private</span> <span class="keywordtype">void</span> _WriteLn()
<a name="l00759"></a>00759                 {
<a name="l00760"></a>00760                         emit(<span class="stringliteral">"    call writeln"</span>);
<a name="l00761"></a>00761                         <span class="keywordflow">return</span>;
<a name="l00762"></a>00762                 }
<a name="l00763"></a>00763                 
<a name="l00765"></a>00765                 <span class="keyword">private</span> <span class="keywordtype">void</span> _ReadInt(string addr)
<a name="l00766"></a>00766                 {
<a name="l00767"></a>00767                         emit(<span class="stringliteral">"    push bx"</span>);
<a name="l00768"></a>00768                         emit(<span class="stringliteral">"    call readint"</span>);
<a name="l00769"></a>00769                         emit(<span class="stringliteral">"    mov "</span> + GetAddress(addr) + <span class="stringliteral">", bx"</span>);
<a name="l00770"></a>00770                         emit(<span class="stringliteral">"    pop bx"</span>);
<a name="l00771"></a>00771                         <span class="keywordflow">return</span>;
<a name="l00772"></a>00772                 }
<a name="l00773"></a>00773         }
<a name="l00774"></a>00774 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Sun May 14 16:08:27 2006 for MiniCSharp by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
