<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>MiniCSharp: /Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/CCType.cs Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<h1>/Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/CCType.cs</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id$</span>
<a name="l00002"></a>00002 <span class="comment"> * Ross Nelson</span>
<a name="l00003"></a>00003 <span class="comment"> * Compiler Construction (CSC 446)</span>
<a name="l00004"></a>00004 <span class="comment"> * CCType - ctype.h-like functions specific to MiniCSharp</span>
<a name="l00005"></a>00005 <span class="comment"> */</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="preprocessor">#region Using directives</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span><span class="keyword">using</span> System;
<a name="l00009"></a>00009 <span class="keyword">using</span> System.Text;
<a name="l00010"></a>00010 <span class="preprocessor">#endregion</span>
<a name="l00011"></a>00011 <span class="preprocessor"></span>
<a name="l00012"></a><a class="code" href="namespace_mini_c_sharp.htm">00012</a> <span class="keyword">namespace </span>MiniCSharp
<a name="l00013"></a>00013 {
<a name="l00014"></a><a class="code" href="class_mini_c_sharp_1_1_c_c_type.htm">00014</a>         <span class="keyword">class </span><a class="code" href="class_mini_c_sharp_1_1_c_c_type.htm">CCType</a>
<a name="l00015"></a>00015         {
<a name="l00016"></a>00016                 <span class="comment">/* IsOperator()</span>
<a name="l00017"></a>00017 <span class="comment">                 * </span>
<a name="l00018"></a>00018 <span class="comment">                 * Return true/false based on whether the passed character</span>
<a name="l00019"></a>00019 <span class="comment">                 * is [+-/*%&lt;&gt;=!]</span>
<a name="l00020"></a>00020 <span class="comment">                 */</span>
<a name="l00021"></a><a class="code" href="class_mini_c_sharp_1_1_c_c_type.htm#c113d57ada6c84f53eea5ecbd624300b">00021</a>                 <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="class_mini_c_sharp_1_1_c_c_type.htm#c113d57ada6c84f53eea5ecbd624300b">IsOperator</a>(<span class="keywordtype">char</span> input)
<a name="l00022"></a>00022                 {
<a name="l00023"></a>00023                         <span class="keywordflow">try</span>
<a name="l00024"></a>00024                         {
<a name="l00025"></a>00025                                 <span class="keywordflow">switch</span> (input)
<a name="l00026"></a>00026                                 {
<a name="l00027"></a>00027                                         <span class="keywordflow">case</span> <span class="charliteral">'+'</span>:
<a name="l00028"></a>00028                                         <span class="keywordflow">case</span> <span class="charliteral">'-'</span>:
<a name="l00029"></a>00029                                         <span class="keywordflow">case</span> <span class="charliteral">'/'</span>:
<a name="l00030"></a>00030                                         <span class="keywordflow">case</span> <span class="charliteral">'*'</span>:
<a name="l00031"></a>00031                                         <span class="keywordflow">case</span> <span class="charliteral">'%'</span>:
<a name="l00032"></a>00032                                         <span class="keywordflow">case</span> <span class="charliteral">'&lt;'</span>:
<a name="l00033"></a>00033                                         <span class="keywordflow">case</span> <span class="charliteral">'&gt;'</span>:
<a name="l00034"></a>00034                                         <span class="keywordflow">case</span> <span class="charliteral">'='</span>:
<a name="l00035"></a>00035                                         <span class="keywordflow">case</span> <span class="charliteral">'!'</span>:
<a name="l00036"></a>00036                                         <span class="keywordflow">case</span> <span class="charliteral">'&amp;'</span>:
<a name="l00037"></a>00037                                         <span class="keywordflow">case</span> <span class="charliteral">'|'</span>:
<a name="l00038"></a>00038                                                 <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00039"></a>00039                                         <span class="keywordflow">default</span>:
<a name="l00040"></a>00040                                                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00041"></a>00041                                 }
<a name="l00042"></a>00042                         }
<a name="l00043"></a>00043                         <span class="keywordflow">catch</span> (System.Exception e)
<a name="l00044"></a>00044                         {
<a name="l00045"></a>00045                                 System.Console.WriteLine(<span class="stringliteral">"Exception caught: {0}"</span>, e.Message);
<a name="l00046"></a>00046                                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00047"></a>00047                         }
<a name="l00048"></a>00048                 }
<a name="l00049"></a>00049                 
<a name="l00050"></a>00050                 <span class="comment">/* IsNumeric()</span>
<a name="l00051"></a>00051 <span class="comment">                 * </span>
<a name="l00052"></a>00052 <span class="comment">                 * Return true/false based on whether the object is a number</span>
<a name="l00053"></a>00053 <span class="comment">                 * Source: http://dotnet.org.za/deonvs/archive/2004/07/06/2579.aspx</span>
<a name="l00054"></a>00054 <span class="comment">                 */</span>
<a name="l00055"></a><a class="code" href="class_mini_c_sharp_1_1_c_c_type.htm#37a28c29069d126cedf7d60933cbb626">00055</a>                 <span class="keyword">public</span> <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="class_mini_c_sharp_1_1_c_c_type.htm#37a28c29069d126cedf7d60933cbb626">IsNumeric</a>(object expression)
<a name="l00056"></a>00056                 {
<a name="l00057"></a>00057                         <span class="keywordtype">bool</span> isNum;
<a name="l00058"></a>00058                         <span class="keywordtype">double</span> retNum;
<a name="l00059"></a>00059                         isNum = Double.TryParse(Convert.ToString(expression), System.Globalization.NumberStyles.Any, System.Globalization.NumberFormatInfo.InvariantInfo, out retNum);
<a name="l00060"></a>00060                         <span class="keywordflow">return</span> isNum;
<a name="l00061"></a>00061                 }
<a name="l00062"></a>00062         }
<a name="l00063"></a>00063 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Sun May 14 16:08:26 2006 for MiniCSharp by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
