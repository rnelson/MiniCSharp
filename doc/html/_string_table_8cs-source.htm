<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>MiniCSharp: /Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/StringTable.cs Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.6 -->
<div class="tabs">
  <ul>
    <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
    <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
    <li><a href="classes.htm"><span>Classes</span></a></li>
    <li id="current"><a href="files.htm"><span>Files</span></a></li>
  </ul></div>
<h1>/Users/rnelson/Documents/School/csc/446-compiler_construction/MiniCSharp/StringTable.cs</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* $Id$</span>
<a name="l00002"></a>00002 <span class="comment"> * Ross Nelson</span>
<a name="l00003"></a>00003 <span class="comment"> * Compiler Construction (CSC 446)</span>
<a name="l00004"></a>00004 <span class="comment"> * MiniCSharp/String Table</span>
<a name="l00005"></a>00005 <span class="comment"> */</span>
<a name="l00006"></a>00006 
<a name="l00007"></a>00007 <span class="preprocessor">#region Using declarations</span>
<a name="l00008"></a>00008 <span class="preprocessor"></span><span class="keyword">using</span> System;
<a name="l00009"></a>00009 <span class="keyword">using</span> System.Text;
<a name="l00010"></a>00010 <span class="keyword">using</span> System.IO;
<a name="l00011"></a>00011 <span class="preprocessor">#endregion</span>
<a name="l00012"></a>00012 <span class="preprocessor"></span>
<a name="l00013"></a>00013 <span class="keyword">namespace </span>MiniCSharp
<a name="l00014"></a>00014 {
<a name="l00020"></a><a class="code" href="class_mini_c_sharp_1_1_string_table.htm">00020</a>         <span class="keyword">public</span> <span class="keyword">class </span><a class="code" href="class_mini_c_sharp_1_1_string_table.htm">StringTable</a>
<a name="l00021"></a>00021         {
<a name="l00023"></a>00023                 <span class="keyword">private</span> <span class="keywordtype">int</span> MAXSTRINGS = 99999;
<a name="l00024"></a>00024                 
<a name="l00026"></a><a class="code" href="class_mini_c_sharp_1_1_string_table.htm#ddbc1cd13ca6a0a37aa0292536564cd6">00026</a>                 <span class="keyword">public</span> <span class="keywordtype">int</span> <a class="code" href="class_mini_c_sharp_1_1_string_table.htm#ddbc1cd13ca6a0a37aa0292536564cd6">numstrings</a>;
<a name="l00027"></a>00027                 
<a name="l00029"></a>00029                 <span class="keyword">private</span> <a class="code" href="class_mini_c_sharp_1_1_string_t.htm">StringT</a>[] vertArray;
<a name="l00030"></a>00030                 
<a name="l00034"></a><a class="code" href="class_mini_c_sharp_1_1_string_table.htm#c1ea091b60ca2877944b96d95e0a83d6">00034</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_string_table.htm#c1ea091b60ca2877944b96d95e0a83d6">StringTable</a>()
<a name="l00035"></a>00035                 {
<a name="l00036"></a>00036                         <span class="comment">/* allocate space for the hash values */</span>
<a name="l00037"></a>00037                         vertArray = <span class="keyword">new</span> <a class="code" href="class_mini_c_sharp_1_1_string_t.htm">StringT</a>[MAXSTRINGS];
<a name="l00038"></a>00038                         <a class="code" href="class_mini_c_sharp_1_1_string_table.htm#1abd8f566fbe1c76357e5f47f0eabaa9">InitTable</a>();
<a name="l00039"></a>00039                 }
<a name="l00040"></a>00040                 
<a name="l00044"></a><a class="code" href="class_mini_c_sharp_1_1_string_table.htm#1abd8f566fbe1c76357e5f47f0eabaa9">00044</a>                 <span class="keyword">public</span> <span class="keywordtype">void</span> <a class="code" href="class_mini_c_sharp_1_1_string_table.htm#1abd8f566fbe1c76357e5f47f0eabaa9">InitTable</a>()
<a name="l00045"></a>00045                 {
<a name="l00046"></a>00046                         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; MAXSTRINGS; i++)
<a name="l00047"></a>00047                                 vertArray[i] = null;
<a name="l00048"></a>00048                 }
<a name="l00049"></a>00049                 
<a name="l00055"></a><a class="code" href="class_mini_c_sharp_1_1_string_table.htm#3a9c6720eabe3da58df29ee2482f1c8d">00055</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_string_t.htm">StringT</a> <a class="code" href="class_mini_c_sharp_1_1_string_table.htm#3a9c6720eabe3da58df29ee2482f1c8d">Insert</a>(string str)
<a name="l00056"></a>00056                 {
<a name="l00057"></a>00057                         string insstr = str;
<a name="l00058"></a>00058                         
<a name="l00059"></a>00059                         <span class="comment">/* error out if we have no more memory */</span>
<a name="l00060"></a>00060                         <span class="keywordflow">if</span> (<a class="code" href="class_mini_c_sharp_1_1_string_table.htm#ddbc1cd13ca6a0a37aa0292536564cd6">numstrings</a> &gt;= MAXSTRINGS)
<a name="l00061"></a>00061                         {
<a name="l00062"></a>00062                                 System.Console.WriteLine(<span class="stringliteral">"error: no more memory available for additional strings, terminating"</span>);
<a name="l00063"></a>00063                                 System.Environment.Exit(-3);
<a name="l00064"></a>00064                         }
<a name="l00065"></a>00065                         
<a name="l00066"></a>00066                         <span class="comment">/* check for duplicates */</span>
<a name="l00067"></a>00067                         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="class_mini_c_sharp_1_1_string_table.htm#ddbc1cd13ca6a0a37aa0292536564cd6">numstrings</a>; i++)
<a name="l00068"></a>00068                         {
<a name="l00069"></a>00069                                 <span class="keywordflow">if</span> (vertArray[i].str == str)
<a name="l00070"></a>00070                                         <span class="keywordflow">return</span> vertArray[i];
<a name="l00071"></a>00071                         }
<a name="l00072"></a>00072                         
<a name="l00073"></a>00073                         <span class="comment">/* MASM 6.14 and 6.15 reject empty strings; change them to a space */</span>
<a name="l00074"></a>00074                         <span class="keywordflow">if</span> (str == <span class="stringliteral">"\"\""</span>)
<a name="l00075"></a>00075                                 insstr = <span class="stringliteral">"\" \""</span>;
<a name="l00076"></a>00076                         
<a name="l00077"></a>00077                         <span class="comment">/* set the new string and add it */</span>
<a name="l00078"></a>00078                         <a class="code" href="class_mini_c_sharp_1_1_string_t.htm">StringT</a> el = <span class="keyword">new</span> <a class="code" href="class_mini_c_sharp_1_1_string_t.htm">StringT</a>();
<a name="l00079"></a>00079                         el.name = <span class="stringliteral">"_S"</span> + <a class="code" href="class_mini_c_sharp_1_1_string_table.htm#ddbc1cd13ca6a0a37aa0292536564cd6">numstrings</a>.ToString();
<a name="l00080"></a>00080                         el.str = insstr;
<a name="l00081"></a>00081                         vertArray[<a class="code" href="class_mini_c_sharp_1_1_string_table.htm#ddbc1cd13ca6a0a37aa0292536564cd6">numstrings</a>] = el;
<a name="l00082"></a>00082                         <a class="code" href="class_mini_c_sharp_1_1_string_table.htm#ddbc1cd13ca6a0a37aa0292536564cd6">numstrings</a>++;
<a name="l00083"></a>00083                         
<a name="l00084"></a>00084                         <span class="keywordflow">return</span> el;
<a name="l00085"></a>00085                 }
<a name="l00086"></a>00086                 
<a name="l00092"></a><a class="code" href="class_mini_c_sharp_1_1_string_table.htm#50262d2dd8a235e1f696be7717d32c8a">00092</a>                 <span class="keyword">public</span> <a class="code" href="class_mini_c_sharp_1_1_string_t.htm">StringT</a> Lookup(string name)
<a name="l00093"></a>00093                 {
<a name="l00094"></a>00094                         <span class="comment">/* create a pointer to a StringT */</span>
<a name="l00095"></a>00095                         <a class="code" href="class_mini_c_sharp_1_1_string_t.htm">StringT</a> el = null;
<a name="l00096"></a>00096                         
<a name="l00097"></a>00097                         <span class="comment">/* find the string */</span>
<a name="l00098"></a>00098                         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> arrayLoc = 0; arrayLoc &lt; numstrings; arrayLoc++)
<a name="l00099"></a>00099                         {
<a name="l00100"></a>00100                                 el = vertArray[arrayLoc];
<a name="l00101"></a>00101                                 <span class="keywordflow">if</span> (el.<a class="code" href="class_mini_c_sharp_1_1_string_t.htm#efc57e4c0c2bace0098881fc24c5ddc7">name</a> == name)
<a name="l00102"></a>00102                                         <span class="keywordflow">return</span> el;
<a name="l00103"></a>00103                         }
<a name="l00104"></a>00104                         
<a name="l00105"></a>00105                         <span class="comment">/* return whatever we found */</span>
<a name="l00106"></a>00106                         <span class="keywordflow">return</span> null;
<a name="l00107"></a>00107                 }
<a name="l00108"></a>00108                 
<a name="l00110"></a><a class="code" href="class_mini_c_sharp_1_1_string_table.htm#dba91e45cb694bdad1838ba7f24b6fc6">00110</a>                 <span class="keyword">public</span> <span class="keywordtype">void</span> PrintTable()
<a name="l00111"></a>00111                 {
<a name="l00112"></a>00112                         System.Console.WriteLine(<span class="stringliteral">"Name  Value\n----  -----"</span>);
<a name="l00113"></a>00113                         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> arrayLoc = 0; arrayLoc &lt; numstrings; arrayLoc++)
<a name="l00114"></a>00114                         {
<a name="l00115"></a>00115                                 System.Console.WriteLine(<span class="stringliteral">"{0}   {1}"</span>, vertArray[arrayLoc].name, vertArray[arrayLoc].str);
<a name="l00116"></a>00116                         }
<a name="l00117"></a>00117                 }
<a name="l00118"></a>00118         }
<a name="l00119"></a>00119         
<a name="l00125"></a><a class="code" href="class_mini_c_sharp_1_1_string_t.htm">00125</a>         <span class="keyword">public</span> <span class="keyword">class </span><a class="code" href="class_mini_c_sharp_1_1_string_t.htm">StringT</a>
<a name="l00126"></a>00126         {
<a name="l00127"></a><a class="code" href="class_mini_c_sharp_1_1_string_t.htm#a565c3679b25c1cbcc3b609b2d2c24c7">00127</a>                 <span class="keyword">public</span> string str;
<a name="l00128"></a><a class="code" href="class_mini_c_sharp_1_1_string_t.htm#efc57e4c0c2bace0098881fc24c5ddc7">00128</a>                 <span class="keyword">public</span> string name;
<a name="l00129"></a>00129         }
<a name="l00130"></a>00130 }
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Sun May 14 16:08:27 2006 for MiniCSharp by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.6 </small></address>
</body>
</html>
